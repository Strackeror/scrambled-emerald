/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte =
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if Self::raw_get_bit(this, i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
        }
    }
}
pub const __NEWLIB_H__: u32 = 1;
pub const _NEWLIB_VERSION_H__: u32 = 1;
pub const _NEWLIB_VERSION: &[u8; 6] = b"4.5.0\0";
pub const __NEWLIB__: u32 = 4;
pub const __NEWLIB_MINOR__: u32 = 5;
pub const __NEWLIB_PATCHLEVEL__: u32 = 0;
pub const _ATEXIT_DYNAMIC_ALLOC: u32 = 1;
pub const _FSEEK_OPTIMIZATION: u32 = 1;
pub const _FVWRITE_IN_STREAMIO: u32 = 1;
pub const _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL: u32 = 1;
pub const _HAVE_INITFINI_ARRAY: u32 = 1;
pub const _HAVE_LONG_DOUBLE: u32 = 1;
pub const _LDBL_EQ_DBL: u32 = 1;
pub const _MB_LEN_MAX: u32 = 1;
pub const _REENT_CHECK_VERIFY: u32 = 1;
pub const _UNBUF_STREAM_OPT: u32 = 1;
pub const _WANT_USE_GDTOA: u32 = 1;
pub const _WIDE_ORIENT: u32 = 1;
pub const __OBSOLETE_MATH_DEFAULT: u32 = 1;
pub const __OBSOLETE_MATH: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 202405;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __ATFILE_VISIBLE: u32 = 1;
pub const __BSD_VISIBLE: u32 = 1;
pub const __GNU_VISIBLE: u32 = 0;
pub const __ISO_C_VISIBLE: u32 = 2011;
pub const __LARGEFILE_VISIBLE: u32 = 0;
pub const __MISC_VISIBLE: u32 = 1;
pub const __POSIX_VISIBLE: u32 = 202405;
pub const __SVID_VISIBLE: u32 = 1;
pub const __XSI_VISIBLE: u32 = 0;
pub const __SSP_FORTIFY_LEVEL: u32 = 0;
pub const __RAND_MAX: u32 = 2147483647;
pub const __have_longlong64: u32 = 1;
pub const __have_long32: u32 = 1;
pub const ___int8_t_defined: u32 = 1;
pub const ___int16_t_defined: u32 = 1;
pub const ___int32_t_defined: u32 = 1;
pub const ___int64_t_defined: u32 = 1;
pub const ___int_least8_t_defined: u32 = 1;
pub const ___int_least16_t_defined: u32 = 1;
pub const ___int_least32_t_defined: u32 = 1;
pub const ___int_least64_t_defined: u32 = 1;
pub const __GNUCLIKE_ASM: u32 = 3;
pub const __GNUCLIKE___TYPEOF: u32 = 1;
pub const __GNUCLIKE___SECTION: u32 = 1;
pub const __GNUCLIKE_CTOR_SECTION_HANDLING: u32 = 1;
pub const __GNUCLIKE_BUILTIN_CONSTANT_P: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VARARGS: u32 = 1;
pub const __GNUCLIKE_BUILTIN_STDARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VAALIST: u32 = 1;
pub const __GNUC_VA_LIST_COMPATIBILITY: u32 = 1;
pub const __GNUCLIKE_BUILTIN_NEXT_ARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_MEMCPY: u32 = 1;
pub const __CC_SUPPORTS_INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE__: u32 = 1;
pub const __CC_SUPPORTS___FUNC__: u32 = 1;
pub const __CC_SUPPORTS_WARNING: u32 = 1;
pub const __CC_SUPPORTS_VARADIC_XXX: u32 = 1;
pub const __CC_SUPPORTS_DYNAMIC_ARRAY_INIT: u32 = 1;
pub const _NULL: u32 = 0;
pub const _ATEXIT_SIZE: u32 = 32;
pub const _RAND48_SEED_0: u32 = 13070;
pub const _RAND48_SEED_1: u32 = 43981;
pub const _RAND48_SEED_2: u32 = 4660;
pub const _RAND48_MULT_0: u32 = 58989;
pub const _RAND48_MULT_1: u32 = 57068;
pub const _RAND48_MULT_2: u32 = 5;
pub const _RAND48_ADD: u32 = 11;
pub const _REENT_EMERGENCY_SIZE: u32 = 25;
pub const _REENT_ASCTIME_SIZE: u32 = 26;
pub const _REENT_SIGNAL_SIZE: u32 = 24;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const ARG_MAX: u32 = 65536;
pub const CHILD_MAX: u32 = 40;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const OPEN_MAX: u32 = 64;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const IOV_MAX: u32 = 1024;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 0;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const MB_LEN_MAX: u32 = 1;
pub const NL_ARGMAX: u32 = 32;
pub const CHAR_MIN: u32 = 0;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const PRETTY_PRINT_MINI_PRINTF: u32 = 0;
pub const PRETTY_PRINT_LIBC: u32 = 1;
pub const LOG_HANDLER_AGB_PRINT: u32 = 0;
pub const LOG_HANDLER_NOCASH_PRINT: u32 = 1;
pub const LOG_HANDLER_MGBA_PRINT: u32 = 2;
pub const PRETTY_PRINT_HANDLER: u32 = 0;
pub const LOG_HANDLER: u32 = 2;
pub const GEN_1: u32 = 0;
pub const GEN_2: u32 = 1;
pub const GEN_3: u32 = 2;
pub const GEN_4: u32 = 3;
pub const GEN_5: u32 = 4;
pub const GEN_6: u32 = 5;
pub const GEN_7: u32 = 6;
pub const GEN_8: u32 = 7;
pub const GEN_9: u32 = 8;
pub const GEN_LATEST: u32 = 8;
pub const NUM_FRAMES_AUTO_SCROLL_DELAY: u32 = 49;
pub const UNITS_IMPERIAL: u32 = 0;
pub const UNITS_METRIC: u32 = 1;
pub const UNITS: u32 = 0;
pub const AUTO_LOWERCASE_KEYBOARD: u32 = 8;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const ROM_START: u32 = 134217728;
pub const ROM_END: u32 = 167772160;
pub const EWRAM_START: u32 = 33554432;
pub const EWRAM_END: u32 = 33816576;
pub const IWRAM_START: u32 = 50331648;
pub const IWRAM_END: u32 = 50364416;
pub const PLTT: u32 = 83886080;
pub const BG_PLTT: u32 = 83886080;
pub const BG_PLTT_SIZE: u32 = 512;
pub const OBJ_PLTT: u32 = 83886592;
pub const OBJ_PLTT_SIZE: u32 = 512;
pub const PLTT_SIZE: u32 = 1024;
pub const VRAM: u32 = 100663296;
pub const VRAM_SIZE: u32 = 98304;
pub const BG_VRAM: u32 = 100663296;
pub const BG_VRAM_SIZE: u32 = 65536;
pub const BG_CHAR_SIZE: u32 = 16384;
pub const BG_SCREEN_SIZE: u32 = 2048;
pub const NUM_BACKGROUNDS: u32 = 4;
pub const OBJ_VRAM0: u32 = 100728832;
pub const OBJ_VRAM0_SIZE: u32 = 32768;
pub const OBJ_VRAM1: u32 = 100745216;
pub const OBJ_VRAM1_SIZE: u32 = 16384;
pub const OAM: u32 = 117440512;
pub const OAM_SIZE: u32 = 1024;
pub const ROM_HEADER_SIZE: u32 = 192;
pub const TILE_WIDTH: u32 = 8;
pub const TILE_HEIGHT: u32 = 8;
pub const DISPLAY_WIDTH: u32 = 240;
pub const DISPLAY_HEIGHT: u32 = 160;
pub const DISPLAY_TILE_WIDTH: u32 = 30;
pub const DISPLAY_TILE_HEIGHT: u32 = 20;
pub const TOTAL_OBJ_TILE_COUNT: u32 = 1024;
pub const REG_BASE: u32 = 67108864;
pub const REG_OFFSET_DISPCNT: u32 = 0;
pub const REG_OFFSET_DISPSTAT: u32 = 4;
pub const REG_OFFSET_VCOUNT: u32 = 6;
pub const REG_OFFSET_BG0CNT: u32 = 8;
pub const REG_OFFSET_BG1CNT: u32 = 10;
pub const REG_OFFSET_BG2CNT: u32 = 12;
pub const REG_OFFSET_BG3CNT: u32 = 14;
pub const REG_OFFSET_BG0HOFS: u32 = 16;
pub const REG_OFFSET_BG0VOFS: u32 = 18;
pub const REG_OFFSET_BG1HOFS: u32 = 20;
pub const REG_OFFSET_BG1VOFS: u32 = 22;
pub const REG_OFFSET_BG2HOFS: u32 = 24;
pub const REG_OFFSET_BG2VOFS: u32 = 26;
pub const REG_OFFSET_BG3HOFS: u32 = 28;
pub const REG_OFFSET_BG3VOFS: u32 = 30;
pub const REG_OFFSET_BG2PA: u32 = 32;
pub const REG_OFFSET_BG2PB: u32 = 34;
pub const REG_OFFSET_BG2PC: u32 = 36;
pub const REG_OFFSET_BG2PD: u32 = 38;
pub const REG_OFFSET_BG2X: u32 = 40;
pub const REG_OFFSET_BG2X_L: u32 = 40;
pub const REG_OFFSET_BG2X_H: u32 = 42;
pub const REG_OFFSET_BG2Y: u32 = 44;
pub const REG_OFFSET_BG2Y_L: u32 = 44;
pub const REG_OFFSET_BG2Y_H: u32 = 46;
pub const REG_OFFSET_BG3PA: u32 = 48;
pub const REG_OFFSET_BG3PB: u32 = 50;
pub const REG_OFFSET_BG3PC: u32 = 52;
pub const REG_OFFSET_BG3PD: u32 = 54;
pub const REG_OFFSET_BG3X: u32 = 56;
pub const REG_OFFSET_BG3X_L: u32 = 56;
pub const REG_OFFSET_BG3X_H: u32 = 58;
pub const REG_OFFSET_BG3Y: u32 = 60;
pub const REG_OFFSET_BG3Y_L: u32 = 60;
pub const REG_OFFSET_BG3Y_H: u32 = 62;
pub const REG_OFFSET_WIN0H: u32 = 64;
pub const REG_OFFSET_WIN1H: u32 = 66;
pub const REG_OFFSET_WIN0V: u32 = 68;
pub const REG_OFFSET_WIN1V: u32 = 70;
pub const REG_OFFSET_WININ: u32 = 72;
pub const REG_OFFSET_WINOUT: u32 = 74;
pub const REG_OFFSET_MOSAIC: u32 = 76;
pub const REG_OFFSET_BLDCNT: u32 = 80;
pub const REG_OFFSET_BLDALPHA: u32 = 82;
pub const REG_OFFSET_BLDY: u32 = 84;
pub const REG_OFFSET_SOUND1CNT_L: u32 = 96;
pub const REG_OFFSET_NR10: u32 = 96;
pub const REG_OFFSET_SOUND1CNT_H: u32 = 98;
pub const REG_OFFSET_NR11: u32 = 98;
pub const REG_OFFSET_NR12: u32 = 99;
pub const REG_OFFSET_SOUND1CNT_X: u32 = 100;
pub const REG_OFFSET_NR13: u32 = 100;
pub const REG_OFFSET_NR14: u32 = 101;
pub const REG_OFFSET_SOUND2CNT_L: u32 = 104;
pub const REG_OFFSET_NR21: u32 = 104;
pub const REG_OFFSET_NR22: u32 = 105;
pub const REG_OFFSET_SOUND2CNT_H: u32 = 108;
pub const REG_OFFSET_NR23: u32 = 108;
pub const REG_OFFSET_NR24: u32 = 109;
pub const REG_OFFSET_SOUND3CNT_L: u32 = 112;
pub const REG_OFFSET_NR30: u32 = 112;
pub const REG_OFFSET_SOUND3CNT_H: u32 = 114;
pub const REG_OFFSET_NR31: u32 = 114;
pub const REG_OFFSET_NR32: u32 = 115;
pub const REG_OFFSET_SOUND3CNT_X: u32 = 116;
pub const REG_OFFSET_NR33: u32 = 116;
pub const REG_OFFSET_NR34: u32 = 117;
pub const REG_OFFSET_SOUND4CNT_L: u32 = 120;
pub const REG_OFFSET_NR41: u32 = 120;
pub const REG_OFFSET_NR42: u32 = 121;
pub const REG_OFFSET_SOUND4CNT_H: u32 = 124;
pub const REG_OFFSET_NR43: u32 = 124;
pub const REG_OFFSET_NR44: u32 = 125;
pub const REG_OFFSET_SOUNDCNT_L: u32 = 128;
pub const REG_OFFSET_NR50: u32 = 128;
pub const REG_OFFSET_NR51: u32 = 129;
pub const REG_OFFSET_SOUNDCNT_H: u32 = 130;
pub const REG_OFFSET_SOUNDCNT_X: u32 = 132;
pub const REG_OFFSET_NR52: u32 = 132;
pub const REG_OFFSET_SOUNDBIAS: u32 = 136;
pub const REG_OFFSET_SOUNDBIAS_L: u32 = 136;
pub const REG_OFFSET_SOUNDBIAS_H: u32 = 137;
pub const REG_OFFSET_WAVE_RAM0: u32 = 144;
pub const REG_OFFSET_WAVE_RAM1: u32 = 148;
pub const REG_OFFSET_WAVE_RAM2: u32 = 152;
pub const REG_OFFSET_WAVE_RAM3: u32 = 156;
pub const REG_OFFSET_FIFO_A: u32 = 160;
pub const REG_OFFSET_FIFO_B: u32 = 164;
pub const REG_OFFSET_DMA0: u32 = 176;
pub const REG_OFFSET_DMA0SAD: u32 = 176;
pub const REG_OFFSET_DMA0SAD_L: u32 = 176;
pub const REG_OFFSET_DMA0SAD_H: u32 = 178;
pub const REG_OFFSET_DMA0DAD: u32 = 180;
pub const REG_OFFSET_DMA0DAD_L: u32 = 180;
pub const REG_OFFSET_DMA0DAD_H: u32 = 182;
pub const REG_OFFSET_DMA0CNT: u32 = 184;
pub const REG_OFFSET_DMA0CNT_L: u32 = 184;
pub const REG_OFFSET_DMA0CNT_H: u32 = 186;
pub const REG_OFFSET_DMA1: u32 = 188;
pub const REG_OFFSET_DMA1SAD: u32 = 188;
pub const REG_OFFSET_DMA1SAD_L: u32 = 188;
pub const REG_OFFSET_DMA1SAD_H: u32 = 190;
pub const REG_OFFSET_DMA1DAD: u32 = 192;
pub const REG_OFFSET_DMA1DAD_L: u32 = 192;
pub const REG_OFFSET_DMA1DAD_H: u32 = 194;
pub const REG_OFFSET_DMA1CNT: u32 = 196;
pub const REG_OFFSET_DMA1CNT_L: u32 = 196;
pub const REG_OFFSET_DMA1CNT_H: u32 = 198;
pub const REG_OFFSET_DMA2: u32 = 200;
pub const REG_OFFSET_DMA2SAD: u32 = 200;
pub const REG_OFFSET_DMA2SAD_L: u32 = 200;
pub const REG_OFFSET_DMA2SAD_H: u32 = 202;
pub const REG_OFFSET_DMA2DAD: u32 = 204;
pub const REG_OFFSET_DMA2DAD_L: u32 = 204;
pub const REG_OFFSET_DMA2DAD_H: u32 = 206;
pub const REG_OFFSET_DMA2CNT: u32 = 208;
pub const REG_OFFSET_DMA2CNT_L: u32 = 208;
pub const REG_OFFSET_DMA2CNT_H: u32 = 210;
pub const REG_OFFSET_DMA3: u32 = 212;
pub const REG_OFFSET_DMA3SAD: u32 = 212;
pub const REG_OFFSET_DMA3SAD_L: u32 = 212;
pub const REG_OFFSET_DMA3SAD_H: u32 = 214;
pub const REG_OFFSET_DMA3DAD: u32 = 216;
pub const REG_OFFSET_DMA3DAD_L: u32 = 216;
pub const REG_OFFSET_DMA3DAD_H: u32 = 218;
pub const REG_OFFSET_DMA3CNT: u32 = 220;
pub const REG_OFFSET_DMA3CNT_L: u32 = 220;
pub const REG_OFFSET_DMA3CNT_H: u32 = 222;
pub const REG_OFFSET_TMCNT: u32 = 256;
pub const REG_OFFSET_TMCNT_L: u32 = 256;
pub const REG_OFFSET_TMCNT_H: u32 = 258;
pub const REG_OFFSET_TM0CNT: u32 = 256;
pub const REG_OFFSET_TM0CNT_L: u32 = 256;
pub const REG_OFFSET_TM0CNT_H: u32 = 258;
pub const REG_OFFSET_TM1CNT: u32 = 260;
pub const REG_OFFSET_TM1CNT_L: u32 = 260;
pub const REG_OFFSET_TM1CNT_H: u32 = 262;
pub const REG_OFFSET_TM2CNT: u32 = 264;
pub const REG_OFFSET_TM2CNT_L: u32 = 264;
pub const REG_OFFSET_TM2CNT_H: u32 = 266;
pub const REG_OFFSET_TM3CNT: u32 = 268;
pub const REG_OFFSET_TM3CNT_L: u32 = 268;
pub const REG_OFFSET_TM3CNT_H: u32 = 270;
pub const REG_OFFSET_SIOCNT: u32 = 296;
pub const REG_OFFSET_SIODATA8: u32 = 298;
pub const REG_OFFSET_SIODATA32: u32 = 288;
pub const REG_OFFSET_SIOMLT_SEND: u32 = 298;
pub const REG_OFFSET_SIOMLT_RECV: u32 = 288;
pub const REG_OFFSET_SIOMULTI0: u32 = 288;
pub const REG_OFFSET_SIOMULTI1: u32 = 290;
pub const REG_OFFSET_SIOMULTI2: u32 = 292;
pub const REG_OFFSET_SIOMULTI3: u32 = 294;
pub const REG_OFFSET_KEYINPUT: u32 = 304;
pub const REG_OFFSET_KEYCNT: u32 = 306;
pub const REG_OFFSET_RCNT: u32 = 308;
pub const REG_OFFSET_JOYCNT: u32 = 320;
pub const REG_OFFSET_JOYSTAT: u32 = 344;
pub const REG_OFFSET_JOY_RECV: u32 = 336;
pub const REG_OFFSET_JOY_RECV_L: u32 = 336;
pub const REG_OFFSET_JOY_RECV_H: u32 = 338;
pub const REG_OFFSET_JOY_TRANS: u32 = 340;
pub const REG_OFFSET_JOY_TRANS_L: u32 = 340;
pub const REG_OFFSET_JOY_TRANS_H: u32 = 342;
pub const REG_OFFSET_IME: u32 = 520;
pub const REG_OFFSET_IE: u32 = 512;
pub const REG_OFFSET_IF: u32 = 514;
pub const REG_OFFSET_WAITCNT: u32 = 516;
pub const REG_ADDR_DISPCNT: u32 = 67108864;
pub const REG_ADDR_DISPSTAT: u32 = 67108868;
pub const REG_ADDR_VCOUNT: u32 = 67108870;
pub const REG_ADDR_BG0CNT: u32 = 67108872;
pub const REG_ADDR_BG1CNT: u32 = 67108874;
pub const REG_ADDR_BG2CNT: u32 = 67108876;
pub const REG_ADDR_BG3CNT: u32 = 67108878;
pub const REG_ADDR_BG0HOFS: u32 = 67108880;
pub const REG_ADDR_BG0VOFS: u32 = 67108882;
pub const REG_ADDR_BG1HOFS: u32 = 67108884;
pub const REG_ADDR_BG1VOFS: u32 = 67108886;
pub const REG_ADDR_BG2HOFS: u32 = 67108888;
pub const REG_ADDR_BG2VOFS: u32 = 67108890;
pub const REG_ADDR_BG3HOFS: u32 = 67108892;
pub const REG_ADDR_BG3VOFS: u32 = 67108894;
pub const REG_ADDR_BG2PA: u32 = 67108896;
pub const REG_ADDR_BG2PB: u32 = 67108898;
pub const REG_ADDR_BG2PC: u32 = 67108900;
pub const REG_ADDR_BG2PD: u32 = 67108902;
pub const REG_ADDR_BG2X: u32 = 67108904;
pub const REG_ADDR_BG2X_L: u32 = 67108904;
pub const REG_ADDR_BG2X_H: u32 = 67108906;
pub const REG_ADDR_BG2Y: u32 = 67108908;
pub const REG_ADDR_BG2Y_L: u32 = 67108908;
pub const REG_ADDR_BG2Y_H: u32 = 67108910;
pub const REG_ADDR_BG3PA: u32 = 67108912;
pub const REG_ADDR_BG3PB: u32 = 67108914;
pub const REG_ADDR_BG3PC: u32 = 67108916;
pub const REG_ADDR_BG3PD: u32 = 67108918;
pub const REG_ADDR_BG3X: u32 = 67108920;
pub const REG_ADDR_BG3X_L: u32 = 67108920;
pub const REG_ADDR_BG3X_H: u32 = 67108922;
pub const REG_ADDR_BG3Y: u32 = 67108924;
pub const REG_ADDR_BG3Y_L: u32 = 67108924;
pub const REG_ADDR_BG3Y_H: u32 = 67108926;
pub const REG_ADDR_WIN0H: u32 = 67108928;
pub const REG_ADDR_WIN1H: u32 = 67108930;
pub const REG_ADDR_WIN0V: u32 = 67108932;
pub const REG_ADDR_WIN1V: u32 = 67108934;
pub const REG_ADDR_WININ: u32 = 67108936;
pub const REG_ADDR_WINOUT: u32 = 67108938;
pub const REG_ADDR_MOSAIC: u32 = 67108940;
pub const REG_ADDR_BLDCNT: u32 = 67108944;
pub const REG_ADDR_BLDALPHA: u32 = 67108946;
pub const REG_ADDR_BLDY: u32 = 67108948;
pub const REG_ADDR_SOUND1CNT_L: u32 = 67108960;
pub const REG_ADDR_NR10: u32 = 67108960;
pub const REG_ADDR_SOUND1CNT_H: u32 = 67108962;
pub const REG_ADDR_NR11: u32 = 67108962;
pub const REG_ADDR_NR12: u32 = 67108963;
pub const REG_ADDR_SOUND1CNT_X: u32 = 67108964;
pub const REG_ADDR_NR13: u32 = 67108964;
pub const REG_ADDR_NR14: u32 = 67108965;
pub const REG_ADDR_SOUND2CNT_L: u32 = 67108968;
pub const REG_ADDR_NR21: u32 = 67108968;
pub const REG_ADDR_NR22: u32 = 67108969;
pub const REG_ADDR_SOUND2CNT_H: u32 = 67108972;
pub const REG_ADDR_NR23: u32 = 67108972;
pub const REG_ADDR_NR24: u32 = 67108973;
pub const REG_ADDR_SOUND3CNT_L: u32 = 67108976;
pub const REG_ADDR_NR30: u32 = 67108976;
pub const REG_ADDR_SOUND3CNT_H: u32 = 67108978;
pub const REG_ADDR_NR31: u32 = 67108978;
pub const REG_ADDR_NR32: u32 = 67108979;
pub const REG_ADDR_SOUND3CNT_X: u32 = 67108980;
pub const REG_ADDR_NR33: u32 = 67108980;
pub const REG_ADDR_NR34: u32 = 67108981;
pub const REG_ADDR_SOUND4CNT_L: u32 = 67108984;
pub const REG_ADDR_NR41: u32 = 67108984;
pub const REG_ADDR_NR42: u32 = 67108985;
pub const REG_ADDR_SOUND4CNT_H: u32 = 67108988;
pub const REG_ADDR_NR43: u32 = 67108988;
pub const REG_ADDR_NR44: u32 = 67108989;
pub const REG_ADDR_SOUNDCNT_L: u32 = 67108992;
pub const REG_ADDR_NR50: u32 = 67108992;
pub const REG_ADDR_NR51: u32 = 67108993;
pub const REG_ADDR_SOUNDCNT_H: u32 = 67108994;
pub const REG_ADDR_SOUNDCNT_X: u32 = 67108996;
pub const REG_ADDR_NR52: u32 = 67108996;
pub const REG_ADDR_SOUNDBIAS: u32 = 67109000;
pub const REG_ADDR_SOUNDBIAS_L: u32 = 67109000;
pub const REG_ADDR_SOUNDBIAS_H: u32 = 67109001;
pub const REG_ADDR_WAVE_RAM0: u32 = 67109008;
pub const REG_ADDR_WAVE_RAM1: u32 = 67109012;
pub const REG_ADDR_WAVE_RAM2: u32 = 67109016;
pub const REG_ADDR_WAVE_RAM3: u32 = 67109020;
pub const REG_ADDR_FIFO_A: u32 = 67109024;
pub const REG_ADDR_FIFO_B: u32 = 67109028;
pub const REG_ADDR_DMA0: u32 = 67109040;
pub const REG_ADDR_DMA0SAD: u32 = 67109040;
pub const REG_ADDR_DMA0DAD: u32 = 67109044;
pub const REG_ADDR_DMA0CNT: u32 = 67109048;
pub const REG_ADDR_DMA0CNT_L: u32 = 67109048;
pub const REG_ADDR_DMA0CNT_H: u32 = 67109050;
pub const REG_ADDR_DMA1: u32 = 67109052;
pub const REG_ADDR_DMA1SAD: u32 = 67109052;
pub const REG_ADDR_DMA1DAD: u32 = 67109056;
pub const REG_ADDR_DMA1CNT: u32 = 67109060;
pub const REG_ADDR_DMA1CNT_L: u32 = 67109060;
pub const REG_ADDR_DMA1CNT_H: u32 = 67109062;
pub const REG_ADDR_DMA2: u32 = 67109064;
pub const REG_ADDR_DMA2SAD: u32 = 67109064;
pub const REG_ADDR_DMA2DAD: u32 = 67109068;
pub const REG_ADDR_DMA2CNT: u32 = 67109072;
pub const REG_ADDR_DMA2CNT_L: u32 = 67109072;
pub const REG_ADDR_DMA2CNT_H: u32 = 67109074;
pub const REG_ADDR_DMA3: u32 = 67109076;
pub const REG_ADDR_DMA3SAD: u32 = 67109076;
pub const REG_ADDR_DMA3DAD: u32 = 67109080;
pub const REG_ADDR_DMA3CNT: u32 = 67109084;
pub const REG_ADDR_DMA3CNT_L: u32 = 67109084;
pub const REG_ADDR_DMA3CNT_H: u32 = 67109086;
pub const REG_ADDR_TMCNT: u32 = 67109120;
pub const REG_ADDR_TMCNT_L: u32 = 67109120;
pub const REG_ADDR_TMCNT_H: u32 = 67109122;
pub const REG_ADDR_TM0CNT: u32 = 67109120;
pub const REG_ADDR_TM0CNT_L: u32 = 67109120;
pub const REG_ADDR_TM0CNT_H: u32 = 67109122;
pub const REG_ADDR_TM1CNT: u32 = 67109124;
pub const REG_ADDR_TM1CNT_L: u32 = 67109124;
pub const REG_ADDR_TM1CNT_H: u32 = 67109126;
pub const REG_ADDR_TM2CNT: u32 = 67109128;
pub const REG_ADDR_TM2CNT_L: u32 = 67109128;
pub const REG_ADDR_TM2CNT_H: u32 = 67109130;
pub const REG_ADDR_TM3CNT: u32 = 67109132;
pub const REG_ADDR_TM3CNT_L: u32 = 67109132;
pub const REG_ADDR_TM3CNT_H: u32 = 67109134;
pub const REG_ADDR_SIOCNT: u32 = 67109160;
pub const REG_ADDR_SIODATA8: u32 = 67109162;
pub const REG_ADDR_SIODATA32: u32 = 67109152;
pub const REG_ADDR_SIOMLT_SEND: u32 = 67109162;
pub const REG_ADDR_SIOMLT_RECV: u32 = 67109152;
pub const REG_ADDR_SIOMULTI0: u32 = 67109152;
pub const REG_ADDR_SIOMULTI1: u32 = 67109154;
pub const REG_ADDR_SIOMULTI2: u32 = 67109156;
pub const REG_ADDR_SIOMULTI3: u32 = 67109158;
pub const REG_ADDR_KEYINPUT: u32 = 67109168;
pub const REG_ADDR_KEYCNT: u32 = 67109170;
pub const REG_ADDR_RCNT: u32 = 67109172;
pub const REG_ADDR_JOYCNT: u32 = 67109184;
pub const REG_ADDR_JOYSTAT: u32 = 67109208;
pub const REG_ADDR_JOY_RECV: u32 = 67109200;
pub const REG_ADDR_JOY_RECV_L: u32 = 67109200;
pub const REG_ADDR_JOY_RECV_H: u32 = 67109202;
pub const REG_ADDR_JOY_TRANS: u32 = 67109204;
pub const REG_ADDR_JOY_TRANS_L: u32 = 67109204;
pub const REG_ADDR_JOY_TRANS_H: u32 = 67109206;
pub const REG_ADDR_IME: u32 = 67109384;
pub const REG_ADDR_IE: u32 = 67109376;
pub const REG_ADDR_IF: u32 = 67109378;
pub const REG_ADDR_WAITCNT: u32 = 67109380;
pub const DISPCNT_MODE_0: u32 = 0;
pub const DISPCNT_MODE_1: u32 = 1;
pub const DISPCNT_MODE_2: u32 = 2;
pub const DISPCNT_MODE_3: u32 = 3;
pub const DISPCNT_MODE_4: u32 = 4;
pub const DISPCNT_MODE_5: u32 = 5;
pub const DISPCNT_HBLANK_INTERVAL: u32 = 32;
pub const DISPCNT_OBJ_1D_MAP: u32 = 64;
pub const DISPCNT_FORCED_BLANK: u32 = 128;
pub const DISPCNT_BG0_ON: u32 = 256;
pub const DISPCNT_BG1_ON: u32 = 512;
pub const DISPCNT_BG2_ON: u32 = 1024;
pub const DISPCNT_BG3_ON: u32 = 2048;
pub const DISPCNT_BG_ALL_ON: u32 = 3840;
pub const DISPCNT_OBJ_ON: u32 = 4096;
pub const DISPCNT_WIN0_ON: u32 = 8192;
pub const DISPCNT_WIN1_ON: u32 = 16384;
pub const DISPCNT_OBJWIN_ON: u32 = 32768;
pub const DISPSTAT_VBLANK: u32 = 1;
pub const DISPSTAT_HBLANK: u32 = 2;
pub const DISPSTAT_VCOUNT: u32 = 4;
pub const DISPSTAT_VBLANK_INTR: u32 = 8;
pub const DISPSTAT_HBLANK_INTR: u32 = 16;
pub const DISPSTAT_VCOUNT_INTR: u32 = 32;
pub const BGCNT_MOSAIC: u32 = 64;
pub const BGCNT_16COLOR: u32 = 0;
pub const BGCNT_256COLOR: u32 = 128;
pub const BGCNT_WRAP: u32 = 8192;
pub const BGCNT_TXT256x256: u32 = 0;
pub const BGCNT_TXT512x256: u32 = 16384;
pub const BGCNT_TXT256x512: u32 = 32768;
pub const BGCNT_TXT512x512: u32 = 49152;
pub const BGCNT_AFF128x128: u32 = 0;
pub const BGCNT_AFF256x256: u32 = 16384;
pub const BGCNT_AFF512x512: u32 = 32768;
pub const BGCNT_AFF1024x1024: u32 = 49152;
pub const WININ_WIN0_BG0: u32 = 1;
pub const WININ_WIN0_BG1: u32 = 2;
pub const WININ_WIN0_BG2: u32 = 4;
pub const WININ_WIN0_BG3: u32 = 8;
pub const WININ_WIN0_BG_ALL: u32 = 15;
pub const WININ_WIN0_OBJ: u32 = 16;
pub const WININ_WIN0_CLR: u32 = 32;
pub const WININ_WIN0_ALL: u32 = 63;
pub const WININ_WIN1_BG0: u32 = 256;
pub const WININ_WIN1_BG1: u32 = 512;
pub const WININ_WIN1_BG2: u32 = 1024;
pub const WININ_WIN1_BG3: u32 = 2048;
pub const WININ_WIN1_BG_ALL: u32 = 3840;
pub const WININ_WIN1_OBJ: u32 = 4096;
pub const WININ_WIN1_CLR: u32 = 8192;
pub const WININ_WIN1_ALL: u32 = 16128;
pub const WINOUT_WIN01_BG0: u32 = 1;
pub const WINOUT_WIN01_BG1: u32 = 2;
pub const WINOUT_WIN01_BG2: u32 = 4;
pub const WINOUT_WIN01_BG3: u32 = 8;
pub const WINOUT_WIN01_BG_ALL: u32 = 15;
pub const WINOUT_WIN01_OBJ: u32 = 16;
pub const WINOUT_WIN01_CLR: u32 = 32;
pub const WINOUT_WIN01_ALL: u32 = 63;
pub const WINOUT_WINOBJ_BG0: u32 = 256;
pub const WINOUT_WINOBJ_BG1: u32 = 512;
pub const WINOUT_WINOBJ_BG2: u32 = 1024;
pub const WINOUT_WINOBJ_BG3: u32 = 2048;
pub const WINOUT_WINOBJ_BG_ALL: u32 = 3840;
pub const WINOUT_WINOBJ_OBJ: u32 = 4096;
pub const WINOUT_WINOBJ_CLR: u32 = 8192;
pub const WINOUT_WINOBJ_ALL: u32 = 16128;
pub const BLDCNT_TGT1_BG0: u32 = 1;
pub const BLDCNT_TGT1_BG1: u32 = 2;
pub const BLDCNT_TGT1_BG2: u32 = 4;
pub const BLDCNT_TGT1_BG3: u32 = 8;
pub const BLDCNT_TGT1_BG_ALL: u32 = 15;
pub const BLDCNT_TGT1_OBJ: u32 = 16;
pub const BLDCNT_TGT1_BD: u32 = 32;
pub const BLDCNT_TGT1_ALL: u32 = 63;
pub const BLDCNT_EFFECT_NONE: u32 = 0;
pub const BLDCNT_EFFECT_BLEND: u32 = 64;
pub const BLDCNT_EFFECT_LIGHTEN: u32 = 128;
pub const BLDCNT_EFFECT_DARKEN: u32 = 192;
pub const BLDCNT_TGT2_BG0: u32 = 256;
pub const BLDCNT_TGT2_BG1: u32 = 512;
pub const BLDCNT_TGT2_BG2: u32 = 1024;
pub const BLDCNT_TGT2_BG3: u32 = 2048;
pub const BLDCNT_TGT2_BG_ALL: u32 = 3840;
pub const BLDCNT_TGT2_OBJ: u32 = 4096;
pub const BLDCNT_TGT2_BD: u32 = 8192;
pub const BLDCNT_TGT2_ALL: u32 = 16128;
pub const SOUND_CGB_MIX_QUARTER: u32 = 0;
pub const SOUND_CGB_MIX_HALF: u32 = 1;
pub const SOUND_CGB_MIX_FULL: u32 = 2;
pub const SOUND_A_MIX_HALF: u32 = 0;
pub const SOUND_A_MIX_FULL: u32 = 4;
pub const SOUND_B_MIX_HALF: u32 = 0;
pub const SOUND_B_MIX_FULL: u32 = 8;
pub const SOUND_ALL_MIX_FULL: u32 = 14;
pub const SOUND_A_RIGHT_OUTPUT: u32 = 256;
pub const SOUND_A_LEFT_OUTPUT: u32 = 512;
pub const SOUND_A_TIMER_0: u32 = 0;
pub const SOUND_A_TIMER_1: u32 = 1024;
pub const SOUND_A_FIFO_RESET: u32 = 2048;
pub const SOUND_B_RIGHT_OUTPUT: u32 = 4096;
pub const SOUND_B_LEFT_OUTPUT: u32 = 8192;
pub const SOUND_B_TIMER_0: u32 = 0;
pub const SOUND_B_TIMER_1: u32 = 16384;
pub const SOUND_B_FIFO_RESET: u32 = 32768;
pub const SOUND_1_ON: u32 = 1;
pub const SOUND_2_ON: u32 = 2;
pub const SOUND_3_ON: u32 = 4;
pub const SOUND_4_ON: u32 = 8;
pub const SOUND_MASTER_ENABLE: u32 = 128;
pub const DMA_DEST_INC: u32 = 0;
pub const DMA_DEST_DEC: u32 = 32;
pub const DMA_DEST_FIXED: u32 = 64;
pub const DMA_DEST_RELOAD: u32 = 96;
pub const DMA_SRC_INC: u32 = 0;
pub const DMA_SRC_DEC: u32 = 128;
pub const DMA_SRC_FIXED: u32 = 256;
pub const DMA_REPEAT: u32 = 512;
pub const DMA_16BIT: u32 = 0;
pub const DMA_32BIT: u32 = 1024;
pub const DMA_DREQ_ON: u32 = 2048;
pub const DMA_START_NOW: u32 = 0;
pub const DMA_START_VBLANK: u32 = 4096;
pub const DMA_START_HBLANK: u32 = 8192;
pub const DMA_START_SPECIAL: u32 = 12288;
pub const DMA_START_MASK: u32 = 12288;
pub const DMA_INTR_ENABLE: u32 = 16384;
pub const DMA_ENABLE: u32 = 32768;
pub const TIMER_1CLK: u32 = 0;
pub const TIMER_64CLK: u32 = 1;
pub const TIMER_256CLK: u32 = 2;
pub const TIMER_1024CLK: u32 = 3;
pub const TIMER_COUNTUP: u32 = 4;
pub const TIMER_INTR_ENABLE: u32 = 64;
pub const TIMER_ENABLE: u32 = 128;
pub const SIO_ID: u32 = 48;
pub const SIO_8BIT_MODE: u32 = 0;
pub const SIO_32BIT_MODE: u32 = 4096;
pub const SIO_MULTI_MODE: u32 = 8192;
pub const SIO_UART_MODE: u32 = 12288;
pub const SIO_9600_BPS: u32 = 0;
pub const SIO_38400_BPS: u32 = 1;
pub const SIO_57600_BPS: u32 = 2;
pub const SIO_115200_BPS: u32 = 3;
pub const SIO_MULTI_SI: u32 = 4;
pub const SIO_MULTI_SD: u32 = 8;
pub const SIO_MULTI_BUSY: u32 = 128;
pub const SIO_ERROR: u32 = 64;
pub const SIO_START: u32 = 128;
pub const SIO_ENABLE: u32 = 128;
pub const SIO_INTR_ENABLE: u32 = 16384;
pub const SIO_MULTI_SI_SHIFT: u32 = 2;
pub const SIO_MULTI_SI_MASK: u32 = 1;
pub const SIO_MULTI_DI_SHIFT: u32 = 3;
pub const SIO_MULTI_DI_MASK: u32 = 1;
pub const A_BUTTON: u32 = 1;
pub const B_BUTTON: u32 = 2;
pub const SELECT_BUTTON: u32 = 4;
pub const START_BUTTON: u32 = 8;
pub const DPAD_RIGHT: u32 = 16;
pub const DPAD_LEFT: u32 = 32;
pub const DPAD_UP: u32 = 64;
pub const DPAD_DOWN: u32 = 128;
pub const R_BUTTON: u32 = 256;
pub const L_BUTTON: u32 = 512;
pub const KEYS_MASK: u32 = 1023;
pub const KEY_INTR_ENABLE: u32 = 16384;
pub const KEY_OR_INTR: u32 = 0;
pub const KEY_AND_INTR: u32 = 32768;
pub const DPAD_ANY: u32 = 240;
pub const JOY_EXCL_DPAD: u32 = 783;
pub const INTR_FLAG_VBLANK: u32 = 1;
pub const INTR_FLAG_HBLANK: u32 = 2;
pub const INTR_FLAG_VCOUNT: u32 = 4;
pub const INTR_FLAG_TIMER0: u32 = 8;
pub const INTR_FLAG_TIMER1: u32 = 16;
pub const INTR_FLAG_TIMER2: u32 = 32;
pub const INTR_FLAG_TIMER3: u32 = 64;
pub const INTR_FLAG_SERIAL: u32 = 128;
pub const INTR_FLAG_DMA0: u32 = 256;
pub const INTR_FLAG_DMA1: u32 = 512;
pub const INTR_FLAG_DMA2: u32 = 1024;
pub const INTR_FLAG_DMA3: u32 = 2048;
pub const INTR_FLAG_KEYPAD: u32 = 4096;
pub const INTR_FLAG_GAMEPAK: u32 = 8192;
pub const WAITCNT_SRAM_4: u32 = 0;
pub const WAITCNT_SRAM_3: u32 = 1;
pub const WAITCNT_SRAM_2: u32 = 2;
pub const WAITCNT_SRAM_8: u32 = 3;
pub const WAITCNT_SRAM_MASK: u32 = 3;
pub const WAITCNT_WS0_N_4: u32 = 0;
pub const WAITCNT_WS0_N_3: u32 = 4;
pub const WAITCNT_WS0_N_2: u32 = 8;
pub const WAITCNT_WS0_N_8: u32 = 12;
pub const WAITCNT_WS0_N_MASK: u32 = 12;
pub const WAITCNT_WS0_S_2: u32 = 0;
pub const WAITCNT_WS0_S_1: u32 = 16;
pub const WAITCNT_WS1_N_4: u32 = 0;
pub const WAITCNT_WS1_N_3: u32 = 32;
pub const WAITCNT_WS1_N_2: u32 = 64;
pub const WAITCNT_WS1_N_8: u32 = 96;
pub const WAITCNT_WS1_N_MASK: u32 = 96;
pub const WAITCNT_WS1_S_4: u32 = 0;
pub const WAITCNT_WS1_S_1: u32 = 128;
pub const WAITCNT_WS2_N_4: u32 = 0;
pub const WAITCNT_WS2_N_3: u32 = 256;
pub const WAITCNT_WS2_N_2: u32 = 512;
pub const WAITCNT_WS2_N_8: u32 = 768;
pub const WAITCNT_WS2_N_MASK: u32 = 768;
pub const WAITCNT_WS2_S_8: u32 = 0;
pub const WAITCNT_WS2_S_1: u32 = 1024;
pub const WAITCNT_PHI_OUT_NONE: u32 = 0;
pub const WAITCNT_PHI_OUT_4MHZ: u32 = 2048;
pub const WAITCNT_PHI_OUT_8MHZ: u32 = 4096;
pub const WAITCNT_PHI_OUT_16MHZ: u32 = 6144;
pub const WAITCNT_PHI_OUT_MASK: u32 = 6144;
pub const WAITCNT_PREFETCH_ENABLE: u32 = 16384;
pub const WAITCNT_AGB: u32 = 0;
pub const WAITCNT_CGB: u32 = 32768;
pub const __int20: u32 = 2;
pub const __int20__: u32 = 2;
pub const __INT8: &[u8; 3] = b"hh\0";
pub const __INT16: &[u8; 2] = b"h\0";
pub const __INT64: &[u8; 3] = b"ll\0";
pub const __FAST8: &[u8; 3] = b"hh\0";
pub const __FAST16: &[u8; 2] = b"h\0";
pub const __FAST64: &[u8; 3] = b"ll\0";
pub const __LEAST8: &[u8; 3] = b"hh\0";
pub const __LEAST16: &[u8; 2] = b"h\0";
pub const __LEAST64: &[u8; 3] = b"ll\0";
pub const __int8_t_defined: u32 = 1;
pub const __int16_t_defined: u32 = 1;
pub const __int32_t_defined: u32 = 1;
pub const __int64_t_defined: u32 = 1;
pub const __int_least8_t_defined: u32 = 1;
pub const __int_least16_t_defined: u32 = 1;
pub const __int_least32_t_defined: u32 = 1;
pub const __int_least64_t_defined: u32 = 1;
pub const __int_fast8_t_defined: u32 = 1;
pub const __int_fast16_t_defined: u32 = 1;
pub const __int_fast32_t_defined: u32 = 1;
pub const __int_fast64_t_defined: u32 = 1;
pub const WINT_MIN: u32 = 0;
pub const ST_OAM_HFLIP: u32 = 8;
pub const ST_OAM_VFLIP: u32 = 16;
pub const ST_OAM_MNUM_FLIP_MASK: u32 = 24;
pub const ST_OAM_OBJ_NORMAL: u32 = 0;
pub const ST_OAM_OBJ_BLEND: u32 = 1;
pub const ST_OAM_OBJ_WINDOW: u32 = 2;
pub const ST_OAM_AFFINE_OFF: u32 = 0;
pub const ST_OAM_AFFINE_NORMAL: u32 = 1;
pub const ST_OAM_AFFINE_ERASE: u32 = 2;
pub const ST_OAM_AFFINE_DOUBLE: u32 = 3;
pub const ST_OAM_AFFINE_ON_MASK: u32 = 1;
pub const ST_OAM_AFFINE_DOUBLE_MASK: u32 = 2;
pub const ST_OAM_4BPP: u32 = 0;
pub const ST_OAM_8BPP: u32 = 1;
pub const ST_OAM_SQUARE: u32 = 0;
pub const ST_OAM_H_RECTANGLE: u32 = 1;
pub const ST_OAM_V_RECTANGLE: u32 = 2;
pub const ST_OAM_SIZE_0: u32 = 0;
pub const ST_OAM_SIZE_1: u32 = 1;
pub const ST_OAM_SIZE_2: u32 = 2;
pub const ST_OAM_SIZE_3: u32 = 3;
pub const SPRITE_SIZE_8x8: u32 = 0;
pub const SPRITE_SIZE_16x16: u32 = 4;
pub const SPRITE_SIZE_32x32: u32 = 8;
pub const SPRITE_SIZE_64x64: u32 = 12;
pub const SPRITE_SIZE_16x8: u32 = 1;
pub const SPRITE_SIZE_32x8: u32 = 5;
pub const SPRITE_SIZE_32x16: u32 = 9;
pub const SPRITE_SIZE_64x32: u32 = 13;
pub const SPRITE_SIZE_8x16: u32 = 2;
pub const SPRITE_SIZE_8x32: u32 = 6;
pub const SPRITE_SIZE_16x32: u32 = 10;
pub const SPRITE_SIZE_32x64: u32 = 14;
pub const ST_SIO_MULTI_MODE: u32 = 2;
pub const ST_SIO_9600_BPS: u32 = 0;
pub const ST_SIO_38400_BPS: u32 = 1;
pub const ST_SIO_57600_BPS: u32 = 2;
pub const ST_SIO_115200_BPS: u32 = 3;
pub const MULTIBOOT_NCHILD: u32 = 3;
pub const MULTIBOOT_HEADER_SIZE: u32 = 192;
pub const MULTIBOOT_SEND_SIZE_MIN: u32 = 256;
pub const MULTIBOOT_SEND_SIZE_MAX: u32 = 262144;
pub const MULTIBOOT_ERROR_04: u32 = 4;
pub const MULTIBOOT_ERROR_08: u32 = 8;
pub const MULTIBOOT_ERROR_0c: u32 = 12;
pub const MULTIBOOT_ERROR_40: u32 = 64;
pub const MULTIBOOT_ERROR_44: u32 = 68;
pub const MULTIBOOT_ERROR_48: u32 = 72;
pub const MULTIBOOT_ERROR_4c: u32 = 76;
pub const MULTIBOOT_ERROR_80: u32 = 128;
pub const MULTIBOOT_ERROR_84: u32 = 132;
pub const MULTIBOOT_ERROR_88: u32 = 136;
pub const MULTIBOOT_ERROR_8c: u32 = 140;
pub const MULTIBOOT_ERROR_NO_PROBE_TARGET: u32 = 80;
pub const MULTIBOOT_ERROR_NO_DLREADY: u32 = 96;
pub const MULTIBOOT_ERROR_BOOT_FAILURE: u32 = 112;
pub const MULTIBOOT_ERROR_HANDSHAKE_FAILURE: u32 = 113;
pub const MULTIBOOT_CONNECTION_CHECK_WAIT: u32 = 15;
pub const MULTIBOOT_SERVER_TYPE_NORMAL: u32 = 0;
pub const MULTIBOOT_SERVER_TYPE_QUICK: u32 = 1;
pub const MULTIBOOT_HANDSHAKE_TIMEOUT: u32 = 400;
pub const RESET_EWRAM: u32 = 1;
pub const RESET_IWRAM: u32 = 2;
pub const RESET_PALETTE: u32 = 4;
pub const RESET_VRAM: u32 = 8;
pub const RESET_OAM: u32 = 16;
pub const RESET_SIO_REGS: u32 = 32;
pub const RESET_SOUND_REGS: u32 = 64;
pub const RESET_REGS: u32 = 128;
pub const RESET_ALL: u32 = 255;
pub const CPU_SET_SRC_FIXED: u32 = 16777216;
pub const CPU_SET_16BIT: u32 = 0;
pub const CPU_SET_32BIT: u32 = 67108864;
pub const CPU_FAST_SET_SRC_FIXED: u32 = 16777216;
pub const MGBA_LOG_FATAL: u32 = 0;
pub const MGBA_LOG_ERROR: u32 = 1;
pub const MGBA_LOG_WARN: u32 = 2;
pub const MGBA_LOG_INFO: u32 = 3;
pub const MGBA_LOG_DEBUG: u32 = 4;
pub const Q_4_12_SHIFT: u32 = 12;
pub const UQ_4_12_SHIFT: u32 = 12;
pub const Q_4_12_ROUND: u32 = 2048;
pub const UQ_4_12_ROUND: u32 = 2048;
pub const B_CRIT_CHANCE: u32 = 8;
pub const B_CRIT_MULTIPLIER: u32 = 8;
pub const B_PARALYSIS_SPEED: u32 = 8;
pub const B_CONFUSION_SELF_DMG_CHANCE: u32 = 8;
pub const B_MULTI_HIT_CHANCE: u32 = 8;
pub const B_WHITEOUT_MONEY: u32 = 8;
pub const B_LIGHT_BALL_ATTACK_BOOST: u32 = 8;
pub const B_SANDSTORM_SPDEF_BOOST: u32 = 8;
pub const B_EXP_CATCH: u32 = 8;
pub const B_TRAINER_EXP_MULTIPLIER: u32 = 8;
pub const B_SPLIT_EXP: u32 = 8;
pub const B_SCALED_EXP: u32 = 8;
pub const B_UNEVOLVED_EXP_MULTIPLIER: u32 = 8;
pub const B_BADGE_BOOST: u32 = 8;
pub const B_FRIENDSHIP_BOOST: u32 = 0;
pub const B_MAX_LEVEL_EV_GAINS: u32 = 8;
pub const B_RECALCULATE_STATS: u32 = 8;
pub const B_BURN_DAMAGE: u32 = 8;
pub const B_BURN_FACADE_DMG: u32 = 8;
pub const B_BINDING_DAMAGE: u32 = 8;
pub const B_PSYWAVE_DMG: u32 = 8;
pub const B_PAYBACK_SWITCH_BOOST: u32 = 8;
pub const B_HIDDEN_POWER_DMG: u32 = 8;
pub const B_ROUGH_SKIN_DMG: u32 = 8;
pub const B_KNOCK_OFF_DMG: u32 = 8;
pub const B_SPORT_DMG_REDUCTION: u32 = 8;
pub const B_EXPLOSION_DEFENSE: u32 = 8;
pub const B_PARENTAL_BOND_DMG: u32 = 8;
pub const B_MULTIPLE_TARGETS_DMG: u32 = 8;
pub const B_GHOSTS_ESCAPE: u32 = 8;
pub const B_PARALYZE_ELECTRIC: u32 = 8;
pub const B_POWDER_GRASS: u32 = 8;
pub const B_UPDATED_TYPE_MATCHUPS: u32 = 8;
pub const B_PRANKSTER_DARK_TYPES: u32 = 8;
pub const B_SHEER_COLD_IMMUNITY: u32 = 8;
pub const B_ROOST_PURE_FLYING: u32 = 8;
pub const B_STATUS_TYPE_IMMUNITY: u32 = 8;
pub const B_BINDING_TURNS: u32 = 8;
pub const B_UPROAR_TURNS: u32 = 8;
pub const B_UPROAR_IGNORE_SOUNDPROOF: u32 = 8;
pub const B_DISABLE_TURNS: u32 = 8;
pub const B_TAILWIND_TURNS: u32 = 8;
pub const B_SLEEP_TURNS: u32 = 8;
pub const B_TAUNT_TURNS: u32 = 8;
pub const B_SPORT_TURNS: u32 = 8;
pub const B_MEGA_EVO_TURN_ORDER: u32 = 8;
pub const B_RECALC_TURN_AFTER_ACTIONS: u32 = 8;
pub const B_FAINT_SWITCH_IN: u32 = 8;
pub const B_UPDATED_MOVE_DATA: u32 = 8;
pub const B_UPDATED_MOVE_TYPES: u32 = 8;
pub const B_UPDATED_MOVE_FLAGS: u32 = 8;
pub const B_PHYSICAL_SPECIAL_SPLIT: u32 = 8;
pub const B_RECOIL_IF_MISS_DMG: u32 = 8;
pub const B_KLUTZ_FLING_INTERACTION: u32 = 8;
pub const B_UPDATED_CONVERSION: u32 = 8;
pub const B_UPDATED_CONVERSION_2: u32 = 8;
pub const B_PP_REDUCED_BY_SPITE: u32 = 8;
pub const B_EXTRAPOLATED_MOVE_FLAGS: u32 = 1;
pub const B_UPDATED_ABILITY_DATA: u32 = 8;
pub const B_TOXIC_NEVER_MISS: u32 = 8;
pub const B_MINIMIZE_DMG_ACC: u32 = 8;
pub const B_BLIZZARD_HAIL: u32 = 8;
pub const B_SHEER_COLD_ACC: u32 = 8;
pub const B_FELL_STINGER_STAT_RAISE: u32 = 8;
pub const B_KINGS_SHIELD_LOWER_ATK: u32 = 8;
pub const B_SPEED_BUFFING_RAPID_SPIN: u32 = 8;
pub const B_CHARGE_SPDEF_RAISE: u32 = 8;
pub const B_MINIMIZE_EVASION: u32 = 8;
pub const B_GROWTH_STAT_RAISE: u32 = 8;
pub const B_INCINERATE_GEMS: u32 = 8;
pub const B_CAN_SPITE_FAIL: u32 = 8;
pub const B_CRASH_IF_TARGET_IMMUNE: u32 = 8;
pub const B_MEMENTO_FAIL: u32 = 8;
pub const B_GLARE_GHOST: u32 = 8;
pub const B_SKILL_SWAP: u32 = 8;
pub const B_BRICK_BREAK: u32 = 8;
pub const B_WISH_HP_SOURCE: u32 = 8;
pub const B_RAMPAGE_CANCELLING: u32 = 8;
pub const B_HEAL_BLOCKING: u32 = 8;
pub const B_ROOTED_GROUNDING: u32 = 8;
pub const B_METRONOME_MOVES: u32 = 8;
pub const B_TELEPORT_BEHAVIOR: u32 = 8;
pub const B_BEAT_UP: u32 = 8;
pub const B_DARK_VOID_FAIL: u32 = 8;
pub const B_BURN_HIT_THAW: u32 = 8;
pub const B_HEALING_WISH_SWITCH: u32 = 8;
pub const B_DEFOG_EFFECT_CLEARING: u32 = 8;
pub const B_STOCKPILE_RAISES_DEFS: u32 = 8;
pub const B_TRANSFORM_SHINY: u32 = 8;
pub const B_TRANSFORM_FORM_CHANGES: u32 = 8;
pub const B_WIDE_GUARD: u32 = 8;
pub const B_QUICK_GUARD: u32 = 8;
pub const B_IMPRISON: u32 = 8;
pub const B_ALLY_SWITCH_FAIL_CHANCE: u32 = 8;
pub const B_SKETCH_BANS: u32 = 8;
pub const B_KNOCK_OFF_REMOVAL: u32 = 8;
pub const B_HEAL_BELL_SOUNDPROOF: u32 = 8;
pub const B_CHARGE: u32 = 8;
pub const B_POWDER_RAIN: u32 = 8;
pub const B_AFTER_YOU_TURN_ORDER: u32 = 8;
pub const B_QUASH_TURN_ORDER: u32 = 8;
pub const B_ABILITY_WEATHER: u32 = 8;
pub const B_GALE_WINGS: u32 = 8;
pub const B_STANCE_CHANGE_FAIL: u32 = 8;
pub const B_SHADOW_TAG_ESCAPE: u32 = 8;
pub const B_MOODY_ACC_EVASION: u32 = 8;
pub const B_FLASH_FIRE_FROZEN: u32 = 8;
pub const B_SYNCHRONIZE_TOXIC: u32 = 8;
pub const B_UPDATED_INTIMIDATE: u32 = 8;
pub const B_OBLIVIOUS_TAUNT: u32 = 8;
pub const B_STURDY: u32 = 8;
pub const B_PLUS_MINUS_INTERACTION: u32 = 8;
pub const B_WEATHER_FORMS: u32 = 8;
pub const B_SYMBIOSIS_GEMS: u32 = 8;
pub const B_ABSORBING_ABILITY_STRING: u32 = 8;
pub const B_REDIRECT_ABILITY_IMMUNITY: u32 = 8;
pub const B_LEAF_GUARD_PREVENTS_REST: u32 = 8;
pub const B_SNOW_WARNING: u32 = 8;
pub const B_TRANSISTOR_BOOST: u32 = 8;
pub const B_ILLUMINATE_EFFECT: u32 = 8;
pub const B_WEAK_ARMOR_SPEED: u32 = 8;
pub const B_PROTEAN_LIBERO: u32 = 8;
pub const B_INTREPID_SWORD: u32 = 8;
pub const B_DAUNTLESS_SHIELD: u32 = 8;
pub const B_DISGUISE_HP_LOSS: u32 = 8;
pub const B_ABILITY_TRIGGER_CHANCE: u32 = 8;
pub const B_PICKUP_WILD: u32 = 8;
pub const B_MAGIC_GUARD: u32 = 8;
pub const B_HP_BERRIES: u32 = 8;
pub const B_BERRIES_INSTANT: u32 = 8;
pub const B_CONFUSE_BERRIES_HEAL: u32 = 8;
pub const B_X_ITEMS_BUFF: u32 = 8;
pub const B_MENTAL_HERB: u32 = 8;
pub const B_TRAINERS_KNOCK_OFF_ITEMS: u32 = 1;
pub const B_RETURN_STOLEN_NPC_ITEMS: u32 = 8;
pub const B_STEAL_WILD_ITEMS: u32 = 8;
pub const B_RESTORE_HELD_BATTLE_ITEMS: u32 = 8;
pub const B_SOUL_DEW_BOOST: u32 = 8;
pub const B_NET_BALL_MODIFIER: u32 = 8;
pub const B_DIVE_BALL_MODIFIER: u32 = 8;
pub const B_NEST_BALL_MODIFIER: u32 = 8;
pub const B_REPEAT_BALL_MODIFIER: u32 = 8;
pub const B_TIMER_BALL_MODIFIER: u32 = 8;
pub const B_DUSK_BALL_MODIFIER: u32 = 8;
pub const B_QUICK_BALL_MODIFIER: u32 = 8;
pub const B_LURE_BALL_MODIFIER: u32 = 8;
pub const B_HEAVY_BALL_MODIFIER: u32 = 8;
pub const B_DREAM_BALL_MODIFIER: u32 = 8;
pub const B_SPORT_BALL_MODIFIER: u32 = 8;
pub const B_SAFARI_BALL_MODIFIER: u32 = 8;
pub const B_SERENE_GRACE_BOOST: u32 = 8;
pub const B_FLAG_INVERSE_BATTLE: u32 = 0;
pub const B_FLAG_FORCE_DOUBLE_WILD: u32 = 0;
pub const B_SMART_WILD_AI_FLAG: u32 = 0;
pub const B_FLAG_NO_BAG_USE: u32 = 0;
pub const B_FLAG_NO_CATCHING: u32 = 0;
pub const B_FLAG_NO_RUNNING: u32 = 0;
pub const B_FLAG_AI_VS_AI_BATTLE: u32 = 0;
pub const B_FLAG_DYNAMAX_BATTLE: u32 = 0;
pub const B_FLAG_TERA_ORB_NO_COST: u32 = 0;
pub const B_VAR_STARTING_STATUS: u32 = 0;
pub const B_VAR_STARTING_STATUS_TIMER: u32 = 0;
pub const B_VAR_WILD_AI_FLAGS: u32 = 0;
pub const B_FLAG_SKY_BATTLE: u32 = 0;
pub const B_VAR_SKY_BATTLE: u32 = 0;
pub const B_SKY_BATTLE_STRICT_ELIGIBILITY: u32 = 0;
pub const B_RESET_FLAGS_VARS_AFTER_WHITEOUT: u32 = 1;
pub const B_SHOW_PARTNER_TARGET: u32 = 0;
pub const B_TERRAIN_BG_CHANGE: u32 = 1;
pub const B_THUNDERSTORM_TERRAIN: u32 = 1;
pub const B_TERRAIN_TYPE_BOOST: u32 = 8;
pub const B_SECRET_POWER_EFFECT: u32 = 8;
pub const B_SECRET_POWER_ANIMATION: u32 = 8;
pub const B_NATURE_POWER_MOVES: u32 = 8;
pub const B_CAMOUFLAGE_TYPES: u32 = 8;
pub const B_NEW_TERRAIN_BACKGROUNDS: u32 = 0;
pub const B_ABILITY_POP_UP: u32 = 1;
pub const B_FAST_INTRO_PKMN_TEXT: u32 = 1;
pub const B_FAST_INTRO_NO_SLIDE: u32 = 0;
pub const B_FAST_HP_DRAIN: u32 = 1;
pub const B_FAST_EXP_GROW: u32 = 1;
pub const B_SHOW_TARGETS: u32 = 1;
pub const B_SHOW_CATEGORY_ICON: u32 = 1;
pub const B_HIDE_HEALTHBOX_IN_ANIMS: u32 = 1;
pub const B_WAIT_TIME_MULTIPLIER: u32 = 16;
pub const B_QUICK_MOVE_CURSOR_TO_RUN: u32 = 0;
pub const B_MOVE_DESCRIPTION_BUTTON: u32 = 512;
pub const B_SEMI_INVULNERABLE_CATCH: u32 = 8;
pub const B_CATCHING_CHARM_BOOST: u32 = 20;
pub const B_CRITICAL_CAPTURE: u32 = 1;
pub const B_LAST_USED_BALL: u32 = 1;
pub const B_LAST_USED_BALL_BUTTON: u32 = 256;
pub const B_LAST_USED_BALL_CYCLE: u32 = 1;
pub const B_DOUBLE_WILD_CHANCE: u32 = 0;
pub const B_DOUBLE_WILD_REQUIRE_2_MONS: u32 = 0;
pub const B_MULTI_BATTLE_WHITEOUT: u32 = 8;
pub const B_EVOLUTION_AFTER_WHITEOUT: u32 = 8;
pub const B_WILD_NATURAL_ENEMIES: u32 = 1;
pub const B_AFFECTION_MECHANICS: u32 = 1;
pub const B_TRAINER_CLASS_POKE_BALLS: u32 = 8;
pub const B_TRAINER_MON_RANDOM_ABILITY: u32 = 0;
pub const B_OBEDIENCE_MECHANICS: u32 = 8;
pub const B_USE_FROSTBITE: u32 = 0;
pub const B_OVERWORLD_SNOW: u32 = 8;
pub const B_OVERWORLD_FOG: u32 = 8;
pub const B_TOXIC_REVERSAL: u32 = 8;
pub const B_TRY_CATCH_TRAINER_BALL: u32 = 8;
pub const B_NEW_SWORD_PARTICLE: u32 = 0;
pub const B_NEW_LEECH_SEED_PARTICLE: u32 = 0;
pub const B_NEW_HORN_ATTACK_PARTICLE: u32 = 0;
pub const B_NEW_ROCKS_PARTICLE: u32 = 0;
pub const B_NEW_LEAF_PARTICLE: u32 = 0;
pub const B_NEW_EMBER_PARTICLES: u32 = 0;
pub const B_NEW_MEAN_LOOK_PARTICLE: u32 = 0;
pub const B_NEW_TEETH_PARTICLE: u32 = 0;
pub const B_NEW_HANDS_FEET_PARTICLE: u32 = 0;
pub const B_NEW_SPIKES_PARTICLE: u32 = 0;
pub const B_NEW_FLY_BUBBLE_PARTICLE: u32 = 0;
pub const B_NEW_CURSE_NAIL_PARTICLE: u32 = 0;
pub const B_NEW_BATON_PASS_BALL_PARTICLE: u32 = 0;
pub const B_NEW_MORNING_SUN_STAR_PARTICLE: u32 = 0;
pub const B_NEW_IMPACT_PALETTE: u32 = 0;
pub const B_NEW_SURF_PARTICLE_PALETTE: u32 = 0;
pub const B_ENEMY_THROW_BALLS: u32 = 8;
pub const B_ENEMY_THROW_BALLS_SOUND: u32 = 8;
pub const B_PLAYER_THROW_BALLS_SOUND: u32 = 8;
pub const SHOW_TYPES_NEVER: u32 = 0;
pub const SHOW_TYPES_ALWAYS: u32 = 1;
pub const SHOW_TYPES_CAUGHT: u32 = 2;
pub const B_SHOW_TYPES: u32 = 0;
pub const B_ENEMY_MON_SHADOW_STYLE: u32 = 2;
pub const DEBUG_OVERWORLD_MENU: u32 = 1;
pub const DEBUG_OVERWORLD_HELD_KEYS: u32 = 256;
pub const DEBUG_OVERWORLD_IN_MENU: u32 = 0;
pub const DEBUG_BATTLE_MENU: u32 = 1;
pub const DEBUG_AI_DELAY_TIMER: u32 = 0;
pub const DEBUG_POKEMON_SPRITE_VISUALIZER: u32 = 1;
pub const I_SHINY_CHARM_ADDITIONAL_ROLLS: u32 = 2;
pub const I_KEY_FOSSILS: u32 = 8;
pub const I_KEY_ESCAPE_ROPE: u32 = 8;
pub const I_HEALTH_RECOVERY: u32 = 8;
pub const I_SITRUS_BERRY_HEAL: u32 = 8;
pub const I_VITAMIN_EV_CAP: u32 = 8;
pub const I_BERRY_EV_JUMP: u32 = 8;
pub const I_GRISEOUS_ORB_FORM_CHANGE: u32 = 8;
pub const I_GEM_BOOST_POWER: u32 = 8;
pub const I_USE_EVO_HELD_ITEMS_FROM_BAG: u32 = 0;
pub const I_TYPE_BOOST_POWER: u32 = 8;
pub const I_SELL_VALUE_FRACTION: u32 = 8;
pub const I_PRICE: u32 = 8;
pub const I_BERRY_PRICE: u32 = 6;
pub const I_POWER_ITEM_BOOST: u32 = 8;
pub const I_PREMIER_BALL_BONUS: u32 = 8;
pub const I_ROTOM_CATALOG_THUNDER_SHOCK: u32 = 8;
pub const I_REPEL_INCLUDE_FAINTED: u32 = 8;
pub const I_REUSABLE_TMS: u32 = 0;
pub const I_EXP_SHARE_FLAG: u32 = 0;
pub const I_EXP_SHARE_ITEM: u32 = 4;
pub const VAR_LAST_REPEL_LURE_USED: u32 = 0;
pub const I_REPEL_LURE_MENU: u32 = 1;
pub const I_VS_SEEKER_CHARGING: u32 = 0;
pub const I_FISHING_BITE_ODDS: u32 = 8;
pub const I_FISHING_MINIGAME: u32 = 2;
pub const I_FISHING_STICKY_BOOST: u32 = 8;
pub const I_FISHING_FOLLOWER_BOOST: u32 = 0;
pub const I_FISHING_CHAIN: u32 = 0;
pub const I_FISHING_PROXIMITY: u32 = 0;
pub const EXP_CAP_NONE: u32 = 0;
pub const EXP_CAP_HARD: u32 = 1;
pub const EXP_CAP_SOFT: u32 = 2;
pub const LEVEL_CAP_NONE: u32 = 0;
pub const LEVEL_CAP_FLAG_LIST: u32 = 1;
pub const LEVEL_CAP_VARIABLE: u32 = 2;
pub const B_EXP_CAP_TYPE: u32 = 1;
pub const B_LEVEL_CAP_TYPE: u32 = 2;
pub const B_RARE_CANDY_CAP: u32 = 1;
pub const B_LEVEL_CAP_EXP_UP: u32 = 0;
pub const EV_CAP_NONE: u32 = 0;
pub const EV_CAP_FLAG_LIST: u32 = 1;
pub const EV_CAP_VARIABLE: u32 = 2;
pub const EV_CAP_NO_GAIN: u32 = 3;
pub const B_EV_CAP_TYPE: u32 = 0;
pub const B_EV_CAP_VARIABLE: u32 = 8;
pub const B_EV_ITEMS_CAP: u32 = 0;
pub const P_UPDATED_TYPES: u32 = 8;
pub const P_UPDATED_STATS: u32 = 8;
pub const P_UPDATED_ABILITIES: u32 = 8;
pub const P_UPDATED_EGG_GROUPS: u32 = 8;
pub const P_UPDATED_FRIENDSHIP: u32 = 8;
pub const P_UPDATED_EVS: u32 = 8;
pub const P_UPDATED_EXP_YIELDS: u32 = 8;
pub const P_LVL_UP_LEARNSETS: u32 = 8;
pub const P_FRIENDSHIP_EVO_THRESHOLD: u32 = 8;
pub const P_NIDORAN_M_DITTO_BREED: u32 = 8;
pub const P_INCENSE_BREEDING: u32 = 8;
pub const P_EGG_HATCH_LEVEL: u32 = 8;
pub const P_BALL_INHERITING: u32 = 8;
pub const P_TM_INHERITANCE: u32 = 8;
pub const P_MOTHER_EGG_MOVE_INHERITANCE: u32 = 8;
pub const P_NATURE_INHERITANCE: u32 = 8;
pub const P_ABILITY_INHERITANCE: u32 = 8;
pub const P_EGG_MOVE_TRANSFER: u32 = 8;
pub const P_SHEDINJA_BALL: u32 = 8;
pub const P_KADABRA_EVERSTONE: u32 = 8;
pub const P_SHUCKLE_BERRY_JUICE: u32 = 8;
pub const P_GENDER_DIFFERENCES: u32 = 1;
pub const P_CUSTOM_GENDER_DIFF_ICONS: u32 = 1;
pub const P_ARCEUS_UNIQUE_FORM_ICONS: u32 = 8;
pub const P_FOOTPRINTS: u32 = 1;
pub const P_TWO_FRAME_FRONT_SPRITES: u32 = 1;
pub const P_GBA_STYLE_SPECIES_GFX: u32 = 0;
pub const P_GBA_STYLE_SPECIES_ICONS: u32 = 0;
pub const P_GBA_STYLE_SPECIES_FOOTPRINTS: u32 = 0;
pub const P_CRIES_ENABLED: u32 = 1;
pub const P_LEGENDARY_PERFECT_IVS: u32 = 8;
pub const P_EV_CAP: u32 = 8;
pub const P_SHOW_TERA_TYPE: u32 = 7;
pub const P_TM_LITERACY: u32 = 8;
pub const P_CAN_FORGET_HIDDEN_MOVE: u32 = 0;
pub const P_EGG_CYCLE_LENGTH: u32 = 8;
pub const P_ONLY_OBTAINABLE_SHINIES: u32 = 0;
pub const P_NO_SHINIES_WITHOUT_POKEBALLS: u32 = 0;
pub const P_SHOW_DYNAMIC_TYPES: u32 = 0;
pub const P_SUMMARY_SCREEN_MOVE_RELEARNER: u32 = 1;
pub const P_SUMMARY_MOVE_RELEARNER_FULL_PP: u32 = 1;
pub const P_SUMMARY_SCREEN_RENAME: u32 = 1;
pub const P_LEARNSET_HELPER_TEACHABLE: u32 = 1;
pub const P_FLAG_FORCE_SHINY: u32 = 0;
pub const P_FLAG_FORCE_NO_SHINY: u32 = 0;
pub const P_GEN_1_POKEMON: u32 = 1;
pub const P_GEN_2_POKEMON: u32 = 1;
pub const P_GEN_3_POKEMON: u32 = 1;
pub const P_GEN_4_POKEMON: u32 = 1;
pub const P_GEN_5_POKEMON: u32 = 1;
pub const P_GEN_6_POKEMON: u32 = 1;
pub const P_GEN_7_POKEMON: u32 = 1;
pub const P_GEN_8_POKEMON: u32 = 1;
pub const P_GEN_9_POKEMON: u32 = 1;
pub const P_NEW_EVOS_IN_REGIONAL_DEX: u32 = 1;
pub const P_MEGA_EVOLUTIONS: u32 = 1;
pub const P_PRIMAL_REVERSIONS: u32 = 1;
pub const P_ULTRA_BURST_FORMS: u32 = 1;
pub const P_GIGANTAMAX_FORMS: u32 = 1;
pub const P_TERA_FORMS: u32 = 1;
pub const P_FUSION_FORMS: u32 = 1;
pub const P_REGIONAL_FORMS: u32 = 1;
pub const P_ALOLAN_FORMS: u32 = 1;
pub const P_GALARIAN_FORMS: u32 = 1;
pub const P_HISUIAN_FORMS: u32 = 1;
pub const P_PALDEAN_FORMS: u32 = 1;
pub const P_PIKACHU_EXTRA_FORMS: u32 = 1;
pub const P_COSPLAY_PIKACHU_FORMS: u32 = 1;
pub const P_CAP_PIKACHU_FORMS: u32 = 1;
pub const P_CROSS_GENERATION_EVOS: u32 = 1;
pub const P_GEN_2_CROSS_EVOS: u32 = 1;
pub const P_GEN_3_CROSS_EVOS: u32 = 1;
pub const P_GEN_4_CROSS_EVOS: u32 = 1;
pub const P_GEN_6_CROSS_EVOS: u32 = 1;
pub const P_GEN_8_CROSS_EVOS: u32 = 1;
pub const P_GEN_9_CROSS_EVOS: u32 = 1;
pub const P_FAMILY_BULBASAUR: u32 = 1;
pub const P_FAMILY_CHARMANDER: u32 = 1;
pub const P_FAMILY_SQUIRTLE: u32 = 1;
pub const P_FAMILY_CATERPIE: u32 = 1;
pub const P_FAMILY_WEEDLE: u32 = 1;
pub const P_FAMILY_PIDGEY: u32 = 1;
pub const P_FAMILY_RATTATA: u32 = 1;
pub const P_FAMILY_SPEAROW: u32 = 1;
pub const P_FAMILY_EKANS: u32 = 1;
pub const P_FAMILY_PIKACHU: u32 = 1;
pub const P_FAMILY_SANDSHREW: u32 = 1;
pub const P_FAMILY_NIDORAN: u32 = 1;
pub const P_FAMILY_CLEFAIRY: u32 = 1;
pub const P_FAMILY_VULPIX: u32 = 1;
pub const P_FAMILY_JIGGLYPUFF: u32 = 1;
pub const P_FAMILY_ZUBAT: u32 = 1;
pub const P_FAMILY_ODDISH: u32 = 1;
pub const P_FAMILY_PARAS: u32 = 1;
pub const P_FAMILY_VENONAT: u32 = 1;
pub const P_FAMILY_DIGLETT: u32 = 1;
pub const P_FAMILY_MEOWTH: u32 = 1;
pub const P_FAMILY_PSYDUCK: u32 = 1;
pub const P_FAMILY_MANKEY: u32 = 1;
pub const P_FAMILY_GROWLITHE: u32 = 1;
pub const P_FAMILY_POLIWAG: u32 = 1;
pub const P_FAMILY_ABRA: u32 = 1;
pub const P_FAMILY_MACHOP: u32 = 1;
pub const P_FAMILY_BELLSPROUT: u32 = 1;
pub const P_FAMILY_TENTACOOL: u32 = 1;
pub const P_FAMILY_GEODUDE: u32 = 1;
pub const P_FAMILY_PONYTA: u32 = 1;
pub const P_FAMILY_SLOWPOKE: u32 = 1;
pub const P_FAMILY_MAGNEMITE: u32 = 1;
pub const P_FAMILY_FARFETCHD: u32 = 1;
pub const P_FAMILY_DODUO: u32 = 1;
pub const P_FAMILY_SEEL: u32 = 1;
pub const P_FAMILY_GRIMER: u32 = 1;
pub const P_FAMILY_SHELLDER: u32 = 1;
pub const P_FAMILY_GASTLY: u32 = 1;
pub const P_FAMILY_ONIX: u32 = 1;
pub const P_FAMILY_DROWZEE: u32 = 1;
pub const P_FAMILY_KRABBY: u32 = 1;
pub const P_FAMILY_VOLTORB: u32 = 1;
pub const P_FAMILY_EXEGGCUTE: u32 = 1;
pub const P_FAMILY_CUBONE: u32 = 1;
pub const P_FAMILY_HITMONS: u32 = 1;
pub const P_FAMILY_LICKITUNG: u32 = 1;
pub const P_FAMILY_KOFFING: u32 = 1;
pub const P_FAMILY_RHYHORN: u32 = 1;
pub const P_FAMILY_CHANSEY: u32 = 1;
pub const P_FAMILY_TANGELA: u32 = 1;
pub const P_FAMILY_KANGASKHAN: u32 = 1;
pub const P_FAMILY_HORSEA: u32 = 1;
pub const P_FAMILY_GOLDEEN: u32 = 1;
pub const P_FAMILY_STARYU: u32 = 1;
pub const P_FAMILY_MR_MIME: u32 = 1;
pub const P_FAMILY_SCYTHER: u32 = 1;
pub const P_FAMILY_JYNX: u32 = 1;
pub const P_FAMILY_ELECTABUZZ: u32 = 1;
pub const P_FAMILY_MAGMAR: u32 = 1;
pub const P_FAMILY_PINSIR: u32 = 1;
pub const P_FAMILY_TAUROS: u32 = 1;
pub const P_FAMILY_MAGIKARP: u32 = 1;
pub const P_FAMILY_LAPRAS: u32 = 1;
pub const P_FAMILY_DITTO: u32 = 1;
pub const P_FAMILY_EEVEE: u32 = 1;
pub const P_FAMILY_PORYGON: u32 = 1;
pub const P_FAMILY_OMANYTE: u32 = 1;
pub const P_FAMILY_KABUTO: u32 = 1;
pub const P_FAMILY_AERODACTYL: u32 = 1;
pub const P_FAMILY_SNORLAX: u32 = 1;
pub const P_FAMILY_ARTICUNO: u32 = 1;
pub const P_FAMILY_ZAPDOS: u32 = 1;
pub const P_FAMILY_MOLTRES: u32 = 1;
pub const P_FAMILY_DRATINI: u32 = 1;
pub const P_FAMILY_MEWTWO: u32 = 1;
pub const P_FAMILY_MEW: u32 = 1;
pub const P_FAMILY_CHIKORITA: u32 = 1;
pub const P_FAMILY_CYNDAQUIL: u32 = 1;
pub const P_FAMILY_TOTODILE: u32 = 1;
pub const P_FAMILY_SENTRET: u32 = 1;
pub const P_FAMILY_HOOTHOOT: u32 = 1;
pub const P_FAMILY_LEDYBA: u32 = 1;
pub const P_FAMILY_SPINARAK: u32 = 1;
pub const P_FAMILY_CHINCHOU: u32 = 1;
pub const P_FAMILY_TOGEPI: u32 = 1;
pub const P_FAMILY_NATU: u32 = 1;
pub const P_FAMILY_MAREEP: u32 = 1;
pub const P_FAMILY_MARILL: u32 = 1;
pub const P_FAMILY_SUDOWOODO: u32 = 1;
pub const P_FAMILY_HOPPIP: u32 = 1;
pub const P_FAMILY_AIPOM: u32 = 1;
pub const P_FAMILY_SUNKERN: u32 = 1;
pub const P_FAMILY_YANMA: u32 = 1;
pub const P_FAMILY_WOOPER: u32 = 1;
pub const P_FAMILY_MURKROW: u32 = 1;
pub const P_FAMILY_MISDREAVUS: u32 = 1;
pub const P_FAMILY_UNOWN: u32 = 1;
pub const P_FAMILY_WOBBUFFET: u32 = 1;
pub const P_FAMILY_GIRAFARIG: u32 = 1;
pub const P_FAMILY_PINECO: u32 = 1;
pub const P_FAMILY_DUNSPARCE: u32 = 1;
pub const P_FAMILY_GLIGAR: u32 = 1;
pub const P_FAMILY_SNUBBULL: u32 = 1;
pub const P_FAMILY_QWILFISH: u32 = 1;
pub const P_FAMILY_SHUCKLE: u32 = 1;
pub const P_FAMILY_HERACROSS: u32 = 1;
pub const P_FAMILY_SNEASEL: u32 = 1;
pub const P_FAMILY_TEDDIURSA: u32 = 1;
pub const P_FAMILY_SLUGMA: u32 = 1;
pub const P_FAMILY_SWINUB: u32 = 1;
pub const P_FAMILY_CORSOLA: u32 = 1;
pub const P_FAMILY_REMORAID: u32 = 1;
pub const P_FAMILY_DELIBIRD: u32 = 1;
pub const P_FAMILY_MANTINE: u32 = 1;
pub const P_FAMILY_SKARMORY: u32 = 1;
pub const P_FAMILY_HOUNDOUR: u32 = 1;
pub const P_FAMILY_PHANPY: u32 = 1;
pub const P_FAMILY_STANTLER: u32 = 1;
pub const P_FAMILY_SMEARGLE: u32 = 1;
pub const P_FAMILY_MILTANK: u32 = 1;
pub const P_FAMILY_RAIKOU: u32 = 1;
pub const P_FAMILY_ENTEI: u32 = 1;
pub const P_FAMILY_SUICUNE: u32 = 1;
pub const P_FAMILY_LARVITAR: u32 = 1;
pub const P_FAMILY_LUGIA: u32 = 1;
pub const P_FAMILY_HO_OH: u32 = 1;
pub const P_FAMILY_CELEBI: u32 = 1;
pub const P_FAMILY_TREECKO: u32 = 1;
pub const P_FAMILY_TORCHIC: u32 = 1;
pub const P_FAMILY_MUDKIP: u32 = 1;
pub const P_FAMILY_POOCHYENA: u32 = 1;
pub const P_FAMILY_ZIGZAGOON: u32 = 1;
pub const P_FAMILY_WURMPLE: u32 = 1;
pub const P_FAMILY_LOTAD: u32 = 1;
pub const P_FAMILY_SEEDOT: u32 = 1;
pub const P_FAMILY_TAILLOW: u32 = 1;
pub const P_FAMILY_WINGULL: u32 = 1;
pub const P_FAMILY_RALTS: u32 = 1;
pub const P_FAMILY_SURSKIT: u32 = 1;
pub const P_FAMILY_SHROOMISH: u32 = 1;
pub const P_FAMILY_SLAKOTH: u32 = 1;
pub const P_FAMILY_NINCADA: u32 = 1;
pub const P_FAMILY_WHISMUR: u32 = 1;
pub const P_FAMILY_MAKUHITA: u32 = 1;
pub const P_FAMILY_NOSEPASS: u32 = 1;
pub const P_FAMILY_SKITTY: u32 = 1;
pub const P_FAMILY_SABLEYE: u32 = 1;
pub const P_FAMILY_MAWILE: u32 = 1;
pub const P_FAMILY_ARON: u32 = 1;
pub const P_FAMILY_MEDITITE: u32 = 1;
pub const P_FAMILY_ELECTRIKE: u32 = 1;
pub const P_FAMILY_PLUSLE: u32 = 1;
pub const P_FAMILY_MINUN: u32 = 1;
pub const P_FAMILY_VOLBEAT_ILLUMISE: u32 = 1;
pub const P_FAMILY_ROSELIA: u32 = 1;
pub const P_FAMILY_GULPIN: u32 = 1;
pub const P_FAMILY_CARVANHA: u32 = 1;
pub const P_FAMILY_WAILMER: u32 = 1;
pub const P_FAMILY_NUMEL: u32 = 1;
pub const P_FAMILY_TORKOAL: u32 = 1;
pub const P_FAMILY_SPOINK: u32 = 1;
pub const P_FAMILY_SPINDA: u32 = 1;
pub const P_FAMILY_TRAPINCH: u32 = 1;
pub const P_FAMILY_CACNEA: u32 = 1;
pub const P_FAMILY_SWABLU: u32 = 1;
pub const P_FAMILY_ZANGOOSE: u32 = 1;
pub const P_FAMILY_SEVIPER: u32 = 1;
pub const P_FAMILY_LUNATONE: u32 = 1;
pub const P_FAMILY_SOLROCK: u32 = 1;
pub const P_FAMILY_BARBOACH: u32 = 1;
pub const P_FAMILY_CORPHISH: u32 = 1;
pub const P_FAMILY_BALTOY: u32 = 1;
pub const P_FAMILY_LILEEP: u32 = 1;
pub const P_FAMILY_ANORITH: u32 = 1;
pub const P_FAMILY_FEEBAS: u32 = 1;
pub const P_FAMILY_CASTFORM: u32 = 1;
pub const P_FAMILY_KECLEON: u32 = 1;
pub const P_FAMILY_SHUPPET: u32 = 1;
pub const P_FAMILY_DUSKULL: u32 = 1;
pub const P_FAMILY_TROPIUS: u32 = 1;
pub const P_FAMILY_CHIMECHO: u32 = 1;
pub const P_FAMILY_ABSOL: u32 = 1;
pub const P_FAMILY_SNORUNT: u32 = 1;
pub const P_FAMILY_SPHEAL: u32 = 1;
pub const P_FAMILY_CLAMPERL: u32 = 1;
pub const P_FAMILY_RELICANTH: u32 = 1;
pub const P_FAMILY_LUVDISC: u32 = 1;
pub const P_FAMILY_BAGON: u32 = 1;
pub const P_FAMILY_BELDUM: u32 = 1;
pub const P_FAMILY_REGIROCK: u32 = 1;
pub const P_FAMILY_REGICE: u32 = 1;
pub const P_FAMILY_REGISTEEL: u32 = 1;
pub const P_FAMILY_LATIAS: u32 = 1;
pub const P_FAMILY_LATIOS: u32 = 1;
pub const P_FAMILY_KYOGRE: u32 = 1;
pub const P_FAMILY_GROUDON: u32 = 1;
pub const P_FAMILY_RAYQUAZA: u32 = 1;
pub const P_FAMILY_JIRACHI: u32 = 1;
pub const P_FAMILY_DEOXYS: u32 = 1;
pub const P_FAMILY_TURTWIG: u32 = 1;
pub const P_FAMILY_CHIMCHAR: u32 = 1;
pub const P_FAMILY_PIPLUP: u32 = 1;
pub const P_FAMILY_STARLY: u32 = 1;
pub const P_FAMILY_BIDOOF: u32 = 1;
pub const P_FAMILY_KRICKETOT: u32 = 1;
pub const P_FAMILY_SHINX: u32 = 1;
pub const P_FAMILY_CRANIDOS: u32 = 1;
pub const P_FAMILY_SHIELDON: u32 = 1;
pub const P_FAMILY_BURMY: u32 = 1;
pub const P_FAMILY_COMBEE: u32 = 1;
pub const P_FAMILY_PACHIRISU: u32 = 1;
pub const P_FAMILY_BUIZEL: u32 = 1;
pub const P_FAMILY_CHERUBI: u32 = 1;
pub const P_FAMILY_SHELLOS: u32 = 1;
pub const P_FAMILY_DRIFLOON: u32 = 1;
pub const P_FAMILY_BUNEARY: u32 = 1;
pub const P_FAMILY_GLAMEOW: u32 = 1;
pub const P_FAMILY_STUNKY: u32 = 1;
pub const P_FAMILY_BRONZOR: u32 = 1;
pub const P_FAMILY_CHATOT: u32 = 1;
pub const P_FAMILY_SPIRITOMB: u32 = 1;
pub const P_FAMILY_GIBLE: u32 = 1;
pub const P_FAMILY_RIOLU: u32 = 1;
pub const P_FAMILY_HIPPOPOTAS: u32 = 1;
pub const P_FAMILY_SKORUPI: u32 = 1;
pub const P_FAMILY_CROAGUNK: u32 = 1;
pub const P_FAMILY_CARNIVINE: u32 = 1;
pub const P_FAMILY_FINNEON: u32 = 1;
pub const P_FAMILY_SNOVER: u32 = 1;
pub const P_FAMILY_ROTOM: u32 = 1;
pub const P_FAMILY_UXIE: u32 = 1;
pub const P_FAMILY_MESPRIT: u32 = 1;
pub const P_FAMILY_AZELF: u32 = 1;
pub const P_FAMILY_DIALGA: u32 = 1;
pub const P_FAMILY_PALKIA: u32 = 1;
pub const P_FAMILY_HEATRAN: u32 = 1;
pub const P_FAMILY_REGIGIGAS: u32 = 1;
pub const P_FAMILY_GIRATINA: u32 = 1;
pub const P_FAMILY_CRESSELIA: u32 = 1;
pub const P_FAMILY_MANAPHY: u32 = 1;
pub const P_FAMILY_DARKRAI: u32 = 1;
pub const P_FAMILY_SHAYMIN: u32 = 1;
pub const P_FAMILY_ARCEUS: u32 = 1;
pub const P_FAMILY_VICTINI: u32 = 1;
pub const P_FAMILY_SNIVY: u32 = 1;
pub const P_FAMILY_TEPIG: u32 = 1;
pub const P_FAMILY_OSHAWOTT: u32 = 1;
pub const P_FAMILY_PATRAT: u32 = 1;
pub const P_FAMILY_LILLIPUP: u32 = 1;
pub const P_FAMILY_PURRLOIN: u32 = 1;
pub const P_FAMILY_PANSAGE: u32 = 1;
pub const P_FAMILY_PANSEAR: u32 = 1;
pub const P_FAMILY_PANPOUR: u32 = 1;
pub const P_FAMILY_MUNNA: u32 = 1;
pub const P_FAMILY_PIDOVE: u32 = 1;
pub const P_FAMILY_BLITZLE: u32 = 1;
pub const P_FAMILY_ROGGENROLA: u32 = 1;
pub const P_FAMILY_WOOBAT: u32 = 1;
pub const P_FAMILY_DRILBUR: u32 = 1;
pub const P_FAMILY_AUDINO: u32 = 1;
pub const P_FAMILY_TIMBURR: u32 = 1;
pub const P_FAMILY_TYMPOLE: u32 = 1;
pub const P_FAMILY_THROH: u32 = 1;
pub const P_FAMILY_SAWK: u32 = 1;
pub const P_FAMILY_SEWADDLE: u32 = 1;
pub const P_FAMILY_VENIPEDE: u32 = 1;
pub const P_FAMILY_COTTONEE: u32 = 1;
pub const P_FAMILY_PETILIL: u32 = 1;
pub const P_FAMILY_BASCULIN: u32 = 1;
pub const P_FAMILY_SANDILE: u32 = 1;
pub const P_FAMILY_DARUMAKA: u32 = 1;
pub const P_FAMILY_MARACTUS: u32 = 1;
pub const P_FAMILY_DWEBBLE: u32 = 1;
pub const P_FAMILY_SCRAGGY: u32 = 1;
pub const P_FAMILY_SIGILYPH: u32 = 1;
pub const P_FAMILY_YAMASK: u32 = 1;
pub const P_FAMILY_TIRTOUGA: u32 = 1;
pub const P_FAMILY_ARCHEN: u32 = 1;
pub const P_FAMILY_TRUBBISH: u32 = 1;
pub const P_FAMILY_ZORUA: u32 = 1;
pub const P_FAMILY_MINCCINO: u32 = 1;
pub const P_FAMILY_GOTHITA: u32 = 1;
pub const P_FAMILY_SOLOSIS: u32 = 1;
pub const P_FAMILY_DUCKLETT: u32 = 1;
pub const P_FAMILY_VANILLITE: u32 = 1;
pub const P_FAMILY_DEERLING: u32 = 1;
pub const P_FAMILY_EMOLGA: u32 = 1;
pub const P_FAMILY_KARRABLAST: u32 = 1;
pub const P_FAMILY_FOONGUS: u32 = 1;
pub const P_FAMILY_FRILLISH: u32 = 1;
pub const P_FAMILY_ALOMOMOLA: u32 = 1;
pub const P_FAMILY_JOLTIK: u32 = 1;
pub const P_FAMILY_FERROSEED: u32 = 1;
pub const P_FAMILY_KLINK: u32 = 1;
pub const P_FAMILY_TYNAMO: u32 = 1;
pub const P_FAMILY_ELGYEM: u32 = 1;
pub const P_FAMILY_LITWICK: u32 = 1;
pub const P_FAMILY_AXEW: u32 = 1;
pub const P_FAMILY_CUBCHOO: u32 = 1;
pub const P_FAMILY_CRYOGONAL: u32 = 1;
pub const P_FAMILY_SHELMET: u32 = 1;
pub const P_FAMILY_STUNFISK: u32 = 1;
pub const P_FAMILY_MIENFOO: u32 = 1;
pub const P_FAMILY_DRUDDIGON: u32 = 1;
pub const P_FAMILY_GOLETT: u32 = 1;
pub const P_FAMILY_PAWNIARD: u32 = 1;
pub const P_FAMILY_BOUFFALANT: u32 = 1;
pub const P_FAMILY_RUFFLET: u32 = 1;
pub const P_FAMILY_VULLABY: u32 = 1;
pub const P_FAMILY_HEATMOR: u32 = 1;
pub const P_FAMILY_DURANT: u32 = 1;
pub const P_FAMILY_DEINO: u32 = 1;
pub const P_FAMILY_LARVESTA: u32 = 1;
pub const P_FAMILY_COBALION: u32 = 1;
pub const P_FAMILY_TERRAKION: u32 = 1;
pub const P_FAMILY_VIRIZION: u32 = 1;
pub const P_FAMILY_TORNADUS: u32 = 1;
pub const P_FAMILY_THUNDURUS: u32 = 1;
pub const P_FAMILY_RESHIRAM: u32 = 1;
pub const P_FAMILY_ZEKROM: u32 = 1;
pub const P_FAMILY_LANDORUS: u32 = 1;
pub const P_FAMILY_KYUREM: u32 = 1;
pub const P_FAMILY_KELDEO: u32 = 1;
pub const P_FAMILY_MELOETTA: u32 = 1;
pub const P_FAMILY_GENESECT: u32 = 1;
pub const P_FAMILY_CHESPIN: u32 = 1;
pub const P_FAMILY_FENNEKIN: u32 = 1;
pub const P_FAMILY_FROAKIE: u32 = 1;
pub const P_FAMILY_BUNNELBY: u32 = 1;
pub const P_FAMILY_FLETCHLING: u32 = 1;
pub const P_FAMILY_SCATTERBUG: u32 = 1;
pub const P_FAMILY_LITLEO: u32 = 1;
pub const P_FAMILY_FLABEBE: u32 = 1;
pub const P_FAMILY_SKIDDO: u32 = 1;
pub const P_FAMILY_PANCHAM: u32 = 1;
pub const P_FAMILY_FURFROU: u32 = 1;
pub const P_FAMILY_ESPURR: u32 = 1;
pub const P_FAMILY_HONEDGE: u32 = 1;
pub const P_FAMILY_SPRITZEE: u32 = 1;
pub const P_FAMILY_SWIRLIX: u32 = 1;
pub const P_FAMILY_INKAY: u32 = 1;
pub const P_FAMILY_BINACLE: u32 = 1;
pub const P_FAMILY_SKRELP: u32 = 1;
pub const P_FAMILY_CLAUNCHER: u32 = 1;
pub const P_FAMILY_HELIOPTILE: u32 = 1;
pub const P_FAMILY_TYRUNT: u32 = 1;
pub const P_FAMILY_AMAURA: u32 = 1;
pub const P_FAMILY_HAWLUCHA: u32 = 1;
pub const P_FAMILY_DEDENNE: u32 = 1;
pub const P_FAMILY_CARBINK: u32 = 1;
pub const P_FAMILY_GOOMY: u32 = 1;
pub const P_FAMILY_KLEFKI: u32 = 1;
pub const P_FAMILY_PHANTUMP: u32 = 1;
pub const P_FAMILY_PUMPKABOO: u32 = 1;
pub const P_FAMILY_BERGMITE: u32 = 1;
pub const P_FAMILY_NOIBAT: u32 = 1;
pub const P_FAMILY_XERNEAS: u32 = 1;
pub const P_FAMILY_YVELTAL: u32 = 1;
pub const P_FAMILY_ZYGARDE: u32 = 1;
pub const P_FAMILY_DIANCIE: u32 = 1;
pub const P_FAMILY_HOOPA: u32 = 1;
pub const P_FAMILY_VOLCANION: u32 = 1;
pub const P_FAMILY_ROWLET: u32 = 1;
pub const P_FAMILY_LITTEN: u32 = 1;
pub const P_FAMILY_POPPLIO: u32 = 1;
pub const P_FAMILY_PIKIPEK: u32 = 1;
pub const P_FAMILY_YUNGOOS: u32 = 1;
pub const P_FAMILY_GRUBBIN: u32 = 1;
pub const P_FAMILY_CRABRAWLER: u32 = 1;
pub const P_FAMILY_ORICORIO: u32 = 1;
pub const P_FAMILY_CUTIEFLY: u32 = 1;
pub const P_FAMILY_ROCKRUFF: u32 = 1;
pub const P_FAMILY_WISHIWASHI: u32 = 1;
pub const P_FAMILY_MAREANIE: u32 = 1;
pub const P_FAMILY_MUDBRAY: u32 = 1;
pub const P_FAMILY_DEWPIDER: u32 = 1;
pub const P_FAMILY_FOMANTIS: u32 = 1;
pub const P_FAMILY_MORELULL: u32 = 1;
pub const P_FAMILY_SALANDIT: u32 = 1;
pub const P_FAMILY_STUFFUL: u32 = 1;
pub const P_FAMILY_BOUNSWEET: u32 = 1;
pub const P_FAMILY_COMFEY: u32 = 1;
pub const P_FAMILY_ORANGURU: u32 = 1;
pub const P_FAMILY_PASSIMIAN: u32 = 1;
pub const P_FAMILY_WIMPOD: u32 = 1;
pub const P_FAMILY_SANDYGAST: u32 = 1;
pub const P_FAMILY_PYUKUMUKU: u32 = 1;
pub const P_FAMILY_TYPE_NULL: u32 = 1;
pub const P_FAMILY_MINIOR: u32 = 1;
pub const P_FAMILY_KOMALA: u32 = 1;
pub const P_FAMILY_TURTONATOR: u32 = 1;
pub const P_FAMILY_TOGEDEMARU: u32 = 1;
pub const P_FAMILY_MIMIKYU: u32 = 1;
pub const P_FAMILY_BRUXISH: u32 = 1;
pub const P_FAMILY_DRAMPA: u32 = 1;
pub const P_FAMILY_DHELMISE: u32 = 1;
pub const P_FAMILY_JANGMO_O: u32 = 1;
pub const P_FAMILY_TAPU_KOKO: u32 = 1;
pub const P_FAMILY_TAPU_LELE: u32 = 1;
pub const P_FAMILY_TAPU_BULU: u32 = 1;
pub const P_FAMILY_TAPU_FINI: u32 = 1;
pub const P_FAMILY_COSMOG: u32 = 1;
pub const P_FAMILY_NIHILEGO: u32 = 1;
pub const P_FAMILY_BUZZWOLE: u32 = 1;
pub const P_FAMILY_PHEROMOSA: u32 = 1;
pub const P_FAMILY_XURKITREE: u32 = 1;
pub const P_FAMILY_CELESTEELA: u32 = 1;
pub const P_FAMILY_KARTANA: u32 = 1;
pub const P_FAMILY_GUZZLORD: u32 = 1;
pub const P_FAMILY_NECROZMA: u32 = 1;
pub const P_FAMILY_MAGEARNA: u32 = 1;
pub const P_FAMILY_MARSHADOW: u32 = 1;
pub const P_FAMILY_POIPOLE: u32 = 1;
pub const P_FAMILY_STAKATAKA: u32 = 1;
pub const P_FAMILY_BLACEPHALON: u32 = 1;
pub const P_FAMILY_ZERAORA: u32 = 1;
pub const P_FAMILY_MELTAN: u32 = 1;
pub const P_FAMILY_GROOKEY: u32 = 1;
pub const P_FAMILY_SCORBUNNY: u32 = 1;
pub const P_FAMILY_SOBBLE: u32 = 1;
pub const P_FAMILY_SKWOVET: u32 = 1;
pub const P_FAMILY_ROOKIDEE: u32 = 1;
pub const P_FAMILY_BLIPBUG: u32 = 1;
pub const P_FAMILY_NICKIT: u32 = 1;
pub const P_FAMILY_GOSSIFLEUR: u32 = 1;
pub const P_FAMILY_WOOLOO: u32 = 1;
pub const P_FAMILY_CHEWTLE: u32 = 1;
pub const P_FAMILY_YAMPER: u32 = 1;
pub const P_FAMILY_ROLYCOLY: u32 = 1;
pub const P_FAMILY_APPLIN: u32 = 1;
pub const P_FAMILY_SILICOBRA: u32 = 1;
pub const P_FAMILY_CRAMORANT: u32 = 1;
pub const P_FAMILY_ARROKUDA: u32 = 1;
pub const P_FAMILY_TOXEL: u32 = 1;
pub const P_FAMILY_SIZZLIPEDE: u32 = 1;
pub const P_FAMILY_CLOBBOPUS: u32 = 1;
pub const P_FAMILY_SINISTEA: u32 = 1;
pub const P_FAMILY_HATENNA: u32 = 1;
pub const P_FAMILY_IMPIDIMP: u32 = 1;
pub const P_FAMILY_MILCERY: u32 = 1;
pub const P_FAMILY_FALINKS: u32 = 1;
pub const P_FAMILY_PINCURCHIN: u32 = 1;
pub const P_FAMILY_SNOM: u32 = 1;
pub const P_FAMILY_STONJOURNER: u32 = 1;
pub const P_FAMILY_EISCUE: u32 = 1;
pub const P_FAMILY_INDEEDEE: u32 = 1;
pub const P_FAMILY_MORPEKO: u32 = 1;
pub const P_FAMILY_CUFANT: u32 = 1;
pub const P_FAMILY_DRACOZOLT: u32 = 1;
pub const P_FAMILY_ARCTOZOLT: u32 = 1;
pub const P_FAMILY_DRACOVISH: u32 = 1;
pub const P_FAMILY_ARCTOVISH: u32 = 1;
pub const P_FAMILY_DURALUDON: u32 = 1;
pub const P_FAMILY_DREEPY: u32 = 1;
pub const P_FAMILY_ZACIAN: u32 = 1;
pub const P_FAMILY_ZAMAZENTA: u32 = 1;
pub const P_FAMILY_ETERNATUS: u32 = 1;
pub const P_FAMILY_KUBFU: u32 = 1;
pub const P_FAMILY_ZARUDE: u32 = 1;
pub const P_FAMILY_REGIELEKI: u32 = 1;
pub const P_FAMILY_REGIDRAGO: u32 = 1;
pub const P_FAMILY_GLASTRIER: u32 = 1;
pub const P_FAMILY_SPECTRIER: u32 = 1;
pub const P_FAMILY_CALYREX: u32 = 1;
pub const P_FAMILY_ENAMORUS: u32 = 1;
pub const P_FAMILY_SPRIGATITO: u32 = 1;
pub const P_FAMILY_FUECOCO: u32 = 1;
pub const P_FAMILY_QUAXLY: u32 = 1;
pub const P_FAMILY_LECHONK: u32 = 1;
pub const P_FAMILY_TAROUNTULA: u32 = 1;
pub const P_FAMILY_NYMBLE: u32 = 1;
pub const P_FAMILY_PAWMI: u32 = 1;
pub const P_FAMILY_TANDEMAUS: u32 = 1;
pub const P_FAMILY_FIDOUGH: u32 = 1;
pub const P_FAMILY_SMOLIV: u32 = 1;
pub const P_FAMILY_SQUAWKABILLY: u32 = 1;
pub const P_FAMILY_NACLI: u32 = 1;
pub const P_FAMILY_CHARCADET: u32 = 1;
pub const P_FAMILY_TADBULB: u32 = 1;
pub const P_FAMILY_WATTREL: u32 = 1;
pub const P_FAMILY_MASCHIFF: u32 = 1;
pub const P_FAMILY_SHROODLE: u32 = 1;
pub const P_FAMILY_BRAMBLIN: u32 = 1;
pub const P_FAMILY_TOEDSCOOL: u32 = 1;
pub const P_FAMILY_KLAWF: u32 = 1;
pub const P_FAMILY_CAPSAKID: u32 = 1;
pub const P_FAMILY_RELLOR: u32 = 1;
pub const P_FAMILY_FLITTLE: u32 = 1;
pub const P_FAMILY_TINKATINK: u32 = 1;
pub const P_FAMILY_WIGLETT: u32 = 1;
pub const P_FAMILY_BOMBIRDIER: u32 = 1;
pub const P_FAMILY_FINIZEN: u32 = 1;
pub const P_FAMILY_VAROOM: u32 = 1;
pub const P_FAMILY_CYCLIZAR: u32 = 1;
pub const P_FAMILY_ORTHWORM: u32 = 1;
pub const P_FAMILY_GLIMMET: u32 = 1;
pub const P_FAMILY_GREAVARD: u32 = 1;
pub const P_FAMILY_FLAMIGO: u32 = 1;
pub const P_FAMILY_CETODDLE: u32 = 1;
pub const P_FAMILY_VELUZA: u32 = 1;
pub const P_FAMILY_DONDOZO: u32 = 1;
pub const P_FAMILY_TATSUGIRI: u32 = 1;
pub const P_FAMILY_GREAT_TUSK: u32 = 1;
pub const P_FAMILY_SCREAM_TAIL: u32 = 1;
pub const P_FAMILY_BRUTE_BONNET: u32 = 1;
pub const P_FAMILY_FLUTTER_MANE: u32 = 1;
pub const P_FAMILY_SLITHER_WING: u32 = 1;
pub const P_FAMILY_SANDY_SHOCKS: u32 = 1;
pub const P_FAMILY_IRON_TREADS: u32 = 1;
pub const P_FAMILY_IRON_BUNDLE: u32 = 1;
pub const P_FAMILY_IRON_HANDS: u32 = 1;
pub const P_FAMILY_IRON_JUGULIS: u32 = 1;
pub const P_FAMILY_IRON_MOTH: u32 = 1;
pub const P_FAMILY_IRON_THORNS: u32 = 1;
pub const P_FAMILY_FRIGIBAX: u32 = 1;
pub const P_FAMILY_GIMMIGHOUL: u32 = 1;
pub const P_FAMILY_WO_CHIEN: u32 = 1;
pub const P_FAMILY_CHIEN_PAO: u32 = 1;
pub const P_FAMILY_TING_LU: u32 = 1;
pub const P_FAMILY_CHI_YU: u32 = 1;
pub const P_FAMILY_ROARING_MOON: u32 = 1;
pub const P_FAMILY_IRON_VALIANT: u32 = 1;
pub const P_FAMILY_KORAIDON: u32 = 1;
pub const P_FAMILY_MIRAIDON: u32 = 1;
pub const P_FAMILY_WALKING_WAKE: u32 = 1;
pub const P_FAMILY_IRON_LEAVES: u32 = 1;
pub const P_FAMILY_POLTCHAGEIST: u32 = 1;
pub const P_FAMILY_SINISTCHA: u32 = 1;
pub const P_FAMILY_OKIDOGI: u32 = 1;
pub const P_FAMILY_MUNKIDORI: u32 = 1;
pub const P_FAMILY_FEZANDIPITI: u32 = 1;
pub const P_FAMILY_OGERPON: u32 = 1;
pub const P_FAMILY_GOUGING_FIRE: u32 = 1;
pub const P_FAMILY_RAGING_BOLT: u32 = 1;
pub const P_FAMILY_IRON_BOULDER: u32 = 1;
pub const P_FAMILY_IRON_CROWN: u32 = 1;
pub const P_FAMILY_TERAPAGOS: u32 = 1;
pub const P_FAMILY_PECHARUNT: u32 = 1;
pub const OW_RUNNING_INDOORS: u32 = 8;
pub const OW_AUTO_SIGNPOST: u32 = 0;
pub const SLOW_MOVEMENT_ON_STAIRS: u32 = 0;
pub const OW_POISON_DAMAGE: u32 = 8;
pub const OW_DOUBLE_APPROACH_WITH_ONE_MON: u32 = 0;
pub const OW_HIDE_REPEAT_MAP_POPUP: u32 = 0;
pub const OW_FRLG_WHITEOUT: u32 = 0;
pub const OW_ITEM_DESCRIPTIONS_OFF: u32 = 0;
pub const OW_ITEM_DESCRIPTIONS_FIRST_TIME: u32 = 1;
pub const OW_ITEM_DESCRIPTIONS_ALWAYS: u32 = 2;
pub const OW_SHOW_ITEM_DESCRIPTIONS: u32 = 2;
pub const GEN_6_XY: u32 = 5;
pub const GEN_6_ORAS: u32 = 9;
pub const OW_PC_PRESS_B: u32 = 8;
pub const OW_PC_JAPAN_WALDA_ICONS: u32 = 1;
pub const OW_PC_HEAL: u32 = 8;
pub const OW_PC_MOVE_ORDER: u32 = 8;
pub const OW_PC_RELEASE_ITEM: u32 = 8;
pub const OW_BERRY_MUTATIONS: u32 = 0;
pub const OW_BERRY_MUTATION_CHANCE: u32 = 25;
pub const OW_BERRY_MOISTURE: u32 = 0;
pub const OW_BERRY_ALWAYS_WATERABLE: u32 = 0;
pub const OW_BERRY_MULCH_USAGE: u32 = 0;
pub const OW_BERRY_WEEDS: u32 = 0;
pub const OW_BERRY_PESTS: u32 = 0;
pub const OW_BERRY_SIX_STAGES: u32 = 0;
pub const OW_BERRY_GROWTH_RATE: u32 = 2;
pub const OW_BERRY_YIELD_RATE: u32 = 2;
pub const OW_BERRY_DRAIN_RATE: u32 = 9;
pub const OW_BERRY_IMMORTAL: u32 = 0;
pub const OW_POKEMON_OBJECT_EVENTS: u32 = 1;
pub const OW_SUBSTITUTE_PLACEHOLDER: u32 = 1;
pub const OW_LARGE_OW_SUPPORT: u32 = 1;
pub const OW_PKMN_OBJECTS_SHARE_PALETTES: u32 = 0;
pub const OW_GFX_COMPRESS: u32 = 1;
pub const OW_MON_WANDER_WALK: u32 = 1;
pub const OW_FOLLOWERS_ENABLED: u32 = 1;
pub const OW_FOLLOWERS_BOBBING: u32 = 1;
pub const OW_FOLLOWERS_POKEBALLS: u32 = 1;
pub const OW_SYNCHRONIZE_NATURE: u32 = 8;
pub const OW_SUPER_LUCK: u32 = 8;
pub const OW_INFILTRATOR: u32 = 8;
pub const OW_HARVEST: u32 = 8;
pub const OW_LIGHTNING_ROD: u32 = 8;
pub const OW_STORM_DRAIN: u32 = 8;
pub const OW_FLASH_FIRE: u32 = 8;
pub const GEN_8_PLA: u32 = 10;
pub const OW_TIMES_OF_DAY: u32 = 8;
pub const OW_USE_FAKE_RTC: u32 = 0;
pub const OW_ALTERED_TIME_RATIO: u32 = 8;
pub const OW_FLAG_PAUSE_TIME: u32 = 0;
pub const OW_FLAG_NO_ENCOUNTER: u32 = 0;
pub const OW_FLAG_NO_TRAINER_SEE: u32 = 0;
pub const OW_FLAG_NO_COLLISION: u32 = 0;
pub const BATTLE_PYRAMID_RANDOM_ENCOUNTERS: u32 = 0;
pub const OW_POPUP_GENERATION: u32 = 2;
pub const OW_POPUP_BW_TIME_NONE: u32 = 0;
pub const OW_POPUP_BW_TIME_12_HR: u32 = 1;
pub const OW_POPUP_BW_TIME_24_HR: u32 = 2;
pub const OW_POPUP_BW_COLOR_BLACK: u32 = 0;
pub const OW_POPUP_BW_COLOR_WHITE: u32 = 1;
pub const OW_POPUP_BW_COLOR: u32 = 0;
pub const OW_POPUP_BW_TIME_MODE: u32 = 0;
pub const OW_POPUP_BW_ALPHA_BLEND: u32 = 0;
pub const OW_IGNORE_EGGS_ON_HEAL: u32 = 8;
pub const OW_UNION_DISABLE_CHECK: u32 = 0;
pub const OW_FLAG_MOVE_UNION_ROOM_CHECK: u32 = 0;
pub const VERSION_SAPPHIRE: u32 = 1;
pub const VERSION_RUBY: u32 = 2;
pub const VERSION_EMERALD: u32 = 3;
pub const VERSION_FIRE_RED: u32 = 4;
pub const VERSION_LEAF_GREEN: u32 = 5;
pub const VERSION_HEART_GOLD: u32 = 7;
pub const VERSION_SOUL_SILVER: u32 = 8;
pub const VERSION_DIAMOND: u32 = 10;
pub const VERSION_PEARL: u32 = 11;
pub const VERSION_PLATINUM: u32 = 12;
pub const VERSION_GAMECUBE: u32 = 15;
pub const NUM_VERSIONS: u32 = 15;
pub const LANGUAGE_JAPANESE: u32 = 1;
pub const LANGUAGE_ENGLISH: u32 = 2;
pub const LANGUAGE_FRENCH: u32 = 3;
pub const LANGUAGE_ITALIAN: u32 = 4;
pub const LANGUAGE_GERMAN: u32 = 5;
pub const LANGUAGE_KOREAN: u32 = 6;
pub const LANGUAGE_SPANISH: u32 = 7;
pub const NUM_LANGUAGES: u32 = 7;
pub const GAME_VERSION: u32 = 3;
pub const GAME_LANGUAGE: u32 = 2;
pub const PARTY_SIZE: u32 = 6;
pub const MULTI_PARTY_SIZE: u32 = 3;
pub const FRONTIER_PARTY_SIZE: u32 = 3;
pub const FRONTIER_DOUBLES_PARTY_SIZE: u32 = 4;
pub const FRONTIER_MULTI_PARTY_SIZE: u32 = 2;
pub const UNION_ROOM_PARTY_SIZE: u32 = 2;
pub const DAYCARE_MON_COUNT: u32 = 2;
pub const POKEBLOCKS_COUNT: u32 = 40;
pub const OBJECT_EVENTS_COUNT: u32 = 16;
pub const MAIL_COUNT: u32 = 16;
pub const SECRET_BASES_COUNT: u32 = 20;
pub const POKE_NEWS_COUNT: u32 = 16;
pub const PC_ITEMS_COUNT: u32 = 50;
pub const BAG_ITEMS_COUNT: u32 = 30;
pub const BAG_KEYITEMS_COUNT: u32 = 30;
pub const BAG_POKEBALLS_COUNT: u32 = 16;
pub const BAG_TMHM_COUNT: u32 = 64;
pub const BAG_BERRIES_COUNT: u32 = 46;
pub const OBJECT_EVENT_TEMPLATES_COUNT: u32 = 64;
pub const DECOR_MAX_SECRET_BASE: u32 = 16;
pub const DECOR_MAX_PLAYERS_HOUSE: u32 = 12;
pub const APPRENTICE_COUNT: u32 = 4;
pub const APPRENTICE_MAX_QUESTIONS: u32 = 9;
pub const MAX_REMATCH_ENTRIES: u32 = 100;
pub const NUM_CONTEST_WINNERS: u32 = 13;
pub const UNION_ROOM_KB_ROW_COUNT: u32 = 10;
pub const GIFT_RIBBONS_COUNT: u32 = 11;
pub const SAVED_TRENDS_COUNT: u32 = 5;
pub const PYRAMID_BAG_ITEMS_COUNT: u32 = 10;
pub const ROAMER_COUNT: u32 = 1;
pub const HALL_FACILITIES_COUNT: u32 = 9;
pub const HALL_RECORDS_COUNT: u32 = 3;
pub const FRONTIER_LVL_50: u32 = 0;
pub const FRONTIER_LVL_OPEN: u32 = 1;
pub const FRONTIER_LVL_MODE_COUNT: u32 = 2;
pub const FRONTIER_LVL_TENT: u32 = 2;
pub const TRAINER_ID_LENGTH: u32 = 4;
pub const MAX_MON_MOVES: u32 = 4;
pub const ALL_MOVES_MASK: u32 = 15;
pub const CONTESTANT_COUNT: u32 = 4;
pub const CONTEST_CATEGORY_COOL: u32 = 0;
pub const CONTEST_CATEGORY_BEAUTY: u32 = 1;
pub const CONTEST_CATEGORY_CUTE: u32 = 2;
pub const CONTEST_CATEGORY_SMART: u32 = 3;
pub const CONTEST_CATEGORY_TOUGH: u32 = 4;
pub const CONTEST_CATEGORIES_COUNT: u32 = 5;
pub const ITEM_NAME_LENGTH: u32 = 20;
pub const ITEM_NAME_PLURAL_LENGTH: u32 = 22;
pub const POKEMON_NAME_LENGTH: u32 = 12;
pub const VANILLA_POKEMON_NAME_LENGTH: u32 = 10;
pub const PLAYER_NAME_LENGTH: u32 = 7;
pub const MAIL_WORDS_COUNT: u32 = 9;
pub const EASY_CHAT_BATTLE_WORDS_COUNT: u32 = 6;
pub const MOVE_NAME_LENGTH: u32 = 16;
pub const NUM_QUESTIONNAIRE_WORDS: u32 = 4;
pub const QUIZ_QUESTION_LEN: u32 = 9;
pub const WONDER_CARD_TEXT_LENGTH: u32 = 40;
pub const WONDER_NEWS_TEXT_LENGTH: u32 = 40;
pub const WONDER_CARD_BODY_TEXT_LINES: u32 = 4;
pub const WONDER_NEWS_BODY_TEXT_LINES: u32 = 10;
pub const TYPE_NAME_LENGTH: u32 = 8;
pub const ABILITY_NAME_LENGTH: u32 = 16;
pub const TRAINER_NAME_LENGTH: u32 = 10;
pub const MAX_STAMP_CARD_STAMPS: u32 = 7;
pub const MALE: u32 = 0;
pub const FEMALE: u32 = 1;
pub const GENDER_COUNT: u32 = 2;
pub const BARD_SONG_LENGTH: u32 = 6;
pub const NUM_STORYTELLER_TALES: u32 = 4;
pub const NUM_TRADER_ITEMS: u32 = 4;
pub const GIDDY_MAX_TALES: u32 = 10;
pub const GIDDY_MAX_QUESTIONS: u32 = 8;
pub const OPTIONS_BUTTON_MODE_NORMAL: u32 = 0;
pub const OPTIONS_BUTTON_MODE_LR: u32 = 1;
pub const OPTIONS_BUTTON_MODE_L_EQUALS_A: u32 = 2;
pub const OPTIONS_TEXT_SPEED_SLOW: u32 = 0;
pub const OPTIONS_TEXT_SPEED_MID: u32 = 1;
pub const OPTIONS_TEXT_SPEED_FAST: u32 = 2;
pub const OPTIONS_SOUND_MONO: u32 = 0;
pub const OPTIONS_SOUND_STEREO: u32 = 1;
pub const OPTIONS_BATTLE_STYLE_SHIFT: u32 = 0;
pub const OPTIONS_BATTLE_STYLE_SET: u32 = 1;
pub const OPTIONS_BATTLE_SCENE_1X: u32 = 0;
pub const OPTIONS_BATTLE_SCENE_2X: u32 = 1;
pub const OPTIONS_BATTLE_SCENE_4X: u32 = 2;
pub const OPTIONS_BATTLE_SCENE_DISABLED: u32 = 3;
pub const OPTIONS_BATTLE_SCENE_COUNT: u32 = 4;
pub const DIR_NONE: u32 = 0;
pub const DIR_SOUTH: u32 = 1;
pub const DIR_NORTH: u32 = 2;
pub const DIR_WEST: u32 = 3;
pub const DIR_EAST: u32 = 4;
pub const DIR_SOUTHWEST: u32 = 5;
pub const DIR_SOUTHEAST: u32 = 6;
pub const DIR_NORTHWEST: u32 = 7;
pub const DIR_NORTHEAST: u32 = 8;
pub const CARDINAL_DIRECTION_COUNT: u32 = 5;
pub const AXIS_X: u32 = 0;
pub const AXIS_Y: u32 = 1;
pub const AXIS_COUNT: u32 = 2;
pub const CONNECTION_INVALID: i32 = -1;
pub const CONNECTION_NONE: u32 = 0;
pub const CONNECTION_SOUTH: u32 = 1;
pub const CONNECTION_NORTH: u32 = 2;
pub const CONNECTION_WEST: u32 = 3;
pub const CONNECTION_EAST: u32 = 4;
pub const CONNECTION_DIVE: u32 = 5;
pub const CONNECTION_EMERGE: u32 = 6;
pub const PARTNER_NONE: u32 = 0;
pub const PARTNER_STEVEN: u32 = 1;
pub const PARTNER_PEPPER_NUSI_01: u32 = 2;
pub const PARTNER_PEPPER_NUSI_02: u32 = 3;
pub const PARTNER_PEPPER_NUSI_03: u32 = 4;
pub const PARTNER_PEPPER_NUSI_04: u32 = 5;
pub const PARTNER_PEPPER_NUSI_05: u32 = 6;
pub const PARTNER_SISTER_ONITAIZI: u32 = 7;
pub const TRAINER_NONE: u32 = 0;
pub const TRAINER_SAWYER_1: u32 = 1;
pub const TRAINER_CLAVEL_01_HONO: u32 = 2;
pub const TRAINER_BOTAN_01: u32 = 3;
pub const TRAINER_RIVAL_06_HONO: u32 = 4;
pub const TRAINER_PROFESSOR_A_01: u32 = 5;
pub const TRAINER_PROFESSOR_B_01: u32 = 6;
pub const TRAINER_GRUNT_SEAFLOOR_CAVERN_2: u32 = 7;
pub const TRAINER_GRUNT_SEAFLOOR_CAVERN_3: u32 = 8;
pub const TRAINER_GABRIELLE_1: u32 = 9;
pub const TRAINER_GRUNT_PETALBURG_WOODS: u32 = 10;
pub const TRAINER_MARCEL: u32 = 11;
pub const TRAINER_ALBERTO: u32 = 12;
pub const TRAINER_ED: u32 = 13;
pub const TRAINER_GRUNT_SEAFLOOR_CAVERN_4: u32 = 14;
pub const TRAINER_DECLAN: u32 = 15;
pub const TRAINER_GRUNT_RUSTURF_TUNNEL: u32 = 16;
pub const TRAINER_GRUNT_WEATHER_INST_1: u32 = 17;
pub const TRAINER_GRUNT_WEATHER_INST_2: u32 = 18;
pub const TRAINER_GRUNT_WEATHER_INST_3: u32 = 19;
pub const TRAINER_GRUNT_MUSEUM_1: u32 = 20;
pub const TRAINER_GRUNT_MUSEUM_2: u32 = 21;
pub const TRAINER_GRUNT_SPACE_CENTER_1: u32 = 22;
pub const TRAINER_GRUNT_MT_PYRE_1: u32 = 23;
pub const TRAINER_GRUNT_MT_PYRE_2: u32 = 24;
pub const TRAINER_GRUNT_MT_PYRE_3: u32 = 25;
pub const TRAINER_GRUNT_WEATHER_INST_4: u32 = 26;
pub const TRAINER_GRUNT_AQUA_HIDEOUT_5: u32 = 27;
pub const TRAINER_GRUNT_AQUA_HIDEOUT_6: u32 = 28;
pub const TRAINER_FREDRICK: u32 = 29;
pub const TRAINER_MATT: u32 = 30;
pub const TRAINER_ZANDER: u32 = 31;
pub const TRAINER_SHELLY_WEATHER_INSTITUTE: u32 = 32;
pub const TRAINER_SHELLY_SEAFLOOR_CAVERN: u32 = 33;
pub const TRAINER_ARCHIE: u32 = 34;
pub const TRAINER_LEAH: u32 = 35;
pub const TRAINER_DAISY: u32 = 36;
pub const TRAINER_ROSE_1: u32 = 37;
pub const TRAINER_FELIX: u32 = 38;
pub const TRAINER_VIOLET: u32 = 39;
pub const TRAINER_ROSE_2: u32 = 40;
pub const TRAINER_ROSE_3: u32 = 41;
pub const TRAINER_ROSE_4: u32 = 42;
pub const TRAINER_ROSE_5: u32 = 43;
pub const TRAINER_DUSTY_1: u32 = 44;
pub const TRAINER_CHIP: u32 = 45;
pub const TRAINER_FOSTER: u32 = 46;
pub const TRAINER_DUSTY_2: u32 = 47;
pub const TRAINER_DUSTY_3: u32 = 48;
pub const TRAINER_DUSTY_4: u32 = 49;
pub const TRAINER_DUSTY_5: u32 = 50;
pub const TRAINER_GABBY_AND_TY_1: u32 = 51;
pub const TRAINER_GABBY_AND_TY_2: u32 = 52;
pub const TRAINER_GABBY_AND_TY_3: u32 = 53;
pub const TRAINER_GABBY_AND_TY_4: u32 = 54;
pub const TRAINER_GABBY_AND_TY_5: u32 = 55;
pub const TRAINER_GABBY_AND_TY_6: u32 = 56;
pub const TRAINER_LOLA_1: u32 = 57;
pub const TRAINER_AUSTINA: u32 = 58;
pub const TRAINER_GWEN: u32 = 59;
pub const TRAINER_LOLA_2: u32 = 60;
pub const TRAINER_LOLA_3: u32 = 61;
pub const TRAINER_LOLA_4: u32 = 62;
pub const TRAINER_LOLA_5: u32 = 63;
pub const TRAINER_RICKY_1: u32 = 64;
pub const TRAINER_SIMON: u32 = 65;
pub const TRAINER_CHARLIE: u32 = 66;
pub const TRAINER_RICKY_2: u32 = 67;
pub const TRAINER_RICKY_3: u32 = 68;
pub const TRAINER_RICKY_4: u32 = 69;
pub const TRAINER_RICKY_5: u32 = 70;
pub const TRAINER_RANDALL: u32 = 71;
pub const TRAINER_PARKER: u32 = 72;
pub const TRAINER_GEORGE: u32 = 73;
pub const TRAINER_BERKE: u32 = 74;
pub const TRAINER_BRAXTON: u32 = 75;
pub const TRAINER_VINCENT: u32 = 76;
pub const TRAINER_LEROY: u32 = 77;
pub const TRAINER_WILTON_1: u32 = 78;
pub const TRAINER_EDGAR: u32 = 79;
pub const TRAINER_ALBERT: u32 = 80;
pub const TRAINER_SAMUEL: u32 = 81;
pub const TRAINER_VITO: u32 = 82;
pub const TRAINER_OWEN: u32 = 83;
pub const TRAINER_WILTON_2: u32 = 84;
pub const TRAINER_WILTON_3: u32 = 85;
pub const TRAINER_WILTON_4: u32 = 86;
pub const TRAINER_WILTON_5: u32 = 87;
pub const TRAINER_WARREN: u32 = 88;
pub const TRAINER_MARY: u32 = 89;
pub const TRAINER_ALEXIA: u32 = 90;
pub const TRAINER_JODY: u32 = 91;
pub const TRAINER_WENDY: u32 = 92;
pub const TRAINER_KEIRA: u32 = 93;
pub const TRAINER_BROOKE_1: u32 = 94;
pub const TRAINER_JENNIFER: u32 = 95;
pub const TRAINER_HOPE: u32 = 96;
pub const TRAINER_SHANNON: u32 = 97;
pub const TRAINER_MICHELLE: u32 = 98;
pub const TRAINER_CAROLINE: u32 = 99;
pub const TRAINER_JULIE: u32 = 100;
pub const TRAINER_BROOKE_2: u32 = 101;
pub const TRAINER_BROOKE_3: u32 = 102;
pub const TRAINER_BROOKE_4: u32 = 103;
pub const TRAINER_BROOKE_5: u32 = 104;
pub const TRAINER_PATRICIA: u32 = 105;
pub const TRAINER_KINDRA: u32 = 106;
pub const TRAINER_TAMMY: u32 = 107;
pub const TRAINER_VALERIE_1: u32 = 108;
pub const TRAINER_TASHA: u32 = 109;
pub const TRAINER_VALERIE_2: u32 = 110;
pub const TRAINER_VALERIE_3: u32 = 111;
pub const TRAINER_VALERIE_4: u32 = 112;
pub const TRAINER_VALERIE_5: u32 = 113;
pub const TRAINER_CINDY_1: u32 = 114;
pub const TRAINER_DAPHNE: u32 = 115;
pub const TRAINER_GRUNT_SPACE_CENTER_2: u32 = 116;
pub const TRAINER_CINDY_2: u32 = 117;
pub const TRAINER_BRIANNA: u32 = 118;
pub const TRAINER_NAOMI: u32 = 119;
pub const TRAINER_CINDY_3: u32 = 120;
pub const TRAINER_CINDY_4: u32 = 121;
pub const TRAINER_CINDY_5: u32 = 122;
pub const TRAINER_CINDY_6: u32 = 123;
pub const TRAINER_MELISSA: u32 = 124;
pub const TRAINER_SHEILA: u32 = 125;
pub const TRAINER_SHIRLEY: u32 = 126;
pub const TRAINER_JESSICA_1: u32 = 127;
pub const TRAINER_CONNIE: u32 = 128;
pub const TRAINER_BRIDGET: u32 = 129;
pub const TRAINER_OLIVIA: u32 = 130;
pub const TRAINER_TIFFANY: u32 = 131;
pub const TRAINER_JESSICA_2: u32 = 132;
pub const TRAINER_JESSICA_3: u32 = 133;
pub const TRAINER_JESSICA_4: u32 = 134;
pub const TRAINER_JESSICA_5: u32 = 135;
pub const TRAINER_WINSTON_1: u32 = 136;
pub const TRAINER_MOLLIE: u32 = 137;
pub const TRAINER_GARRET: u32 = 138;
pub const TRAINER_WINSTON_2: u32 = 139;
pub const TRAINER_WINSTON_3: u32 = 140;
pub const TRAINER_WINSTON_4: u32 = 141;
pub const TRAINER_WINSTON_5: u32 = 142;
pub const TRAINER_STEVE_1: u32 = 143;
pub const TRAINER_THALIA_1: u32 = 144;
pub const TRAINER_MARK: u32 = 145;
pub const TRAINER_GRUNT_MT_CHIMNEY_1: u32 = 146;
pub const TRAINER_STEVE_2: u32 = 147;
pub const TRAINER_STEVE_3: u32 = 148;
pub const TRAINER_STEVE_4: u32 = 149;
pub const TRAINER_STEVE_5: u32 = 150;
pub const TRAINER_LUIS: u32 = 151;
pub const TRAINER_DOMINIK: u32 = 152;
pub const TRAINER_DOUGLAS: u32 = 153;
pub const TRAINER_DARRIN: u32 = 154;
pub const TRAINER_TONY_1: u32 = 155;
pub const TRAINER_JEROME: u32 = 156;
pub const TRAINER_MATTHEW: u32 = 157;
pub const TRAINER_DAVID: u32 = 158;
pub const TRAINER_SPENCER: u32 = 159;
pub const TRAINER_ROLAND: u32 = 160;
pub const TRAINER_NOLEN: u32 = 161;
pub const TRAINER_STAN: u32 = 162;
pub const TRAINER_BARRY: u32 = 163;
pub const TRAINER_DEAN: u32 = 164;
pub const TRAINER_RODNEY: u32 = 165;
pub const TRAINER_RICHARD: u32 = 166;
pub const TRAINER_HERMAN: u32 = 167;
pub const TRAINER_SANTIAGO: u32 = 168;
pub const TRAINER_GILBERT: u32 = 169;
pub const TRAINER_FRANKLIN: u32 = 170;
pub const TRAINER_KEVIN: u32 = 171;
pub const TRAINER_JACK: u32 = 172;
pub const TRAINER_DUDLEY: u32 = 173;
pub const TRAINER_CHAD: u32 = 174;
pub const TRAINER_TONY_2: u32 = 175;
pub const TRAINER_TONY_3: u32 = 176;
pub const TRAINER_TONY_4: u32 = 177;
pub const TRAINER_TONY_5: u32 = 178;
pub const TRAINER_TAKAO: u32 = 179;
pub const TRAINER_HITOSHI: u32 = 180;
pub const TRAINER_KIYO: u32 = 181;
pub const TRAINER_KOICHI: u32 = 182;
pub const TRAINER_NOB_1: u32 = 183;
pub const TRAINER_NOB_2: u32 = 184;
pub const TRAINER_NOB_3: u32 = 185;
pub const TRAINER_NOB_4: u32 = 186;
pub const TRAINER_NOB_5: u32 = 187;
pub const TRAINER_YUJI: u32 = 188;
pub const TRAINER_DAISUKE: u32 = 189;
pub const TRAINER_ATSUSHI: u32 = 190;
pub const TRAINER_KIRK: u32 = 191;
pub const TRAINER_GRUNT_AQUA_HIDEOUT_7: u32 = 192;
pub const TRAINER_GRUNT_AQUA_HIDEOUT_8: u32 = 193;
pub const TRAINER_SHAWN: u32 = 194;
pub const TRAINER_FERNANDO_1: u32 = 195;
pub const TRAINER_DALTON_1: u32 = 196;
pub const TRAINER_DALTON_2: u32 = 197;
pub const TRAINER_DALTON_3: u32 = 198;
pub const TRAINER_DALTON_4: u32 = 199;
pub const TRAINER_DALTON_5: u32 = 200;
pub const TRAINER_COLE: u32 = 201;
pub const TRAINER_JEFF: u32 = 202;
pub const TRAINER_AXLE: u32 = 203;
pub const TRAINER_JACE: u32 = 204;
pub const TRAINER_KEEGAN: u32 = 205;
pub const TRAINER_BERNIE_1: u32 = 206;
pub const TRAINER_BERNIE_2: u32 = 207;
pub const TRAINER_BERNIE_3: u32 = 208;
pub const TRAINER_BERNIE_4: u32 = 209;
pub const TRAINER_BERNIE_5: u32 = 210;
pub const TRAINER_DREW: u32 = 211;
pub const TRAINER_BEAU: u32 = 212;
pub const TRAINER_LARRY: u32 = 213;
pub const TRAINER_SHANE: u32 = 214;
pub const TRAINER_JUSTIN: u32 = 215;
pub const TRAINER_ETHAN_1: u32 = 216;
pub const TRAINER_AUTUMN: u32 = 217;
pub const TRAINER_TRAVIS: u32 = 218;
pub const TRAINER_ETHAN_2: u32 = 219;
pub const TRAINER_ETHAN_3: u32 = 220;
pub const TRAINER_ETHAN_4: u32 = 221;
pub const TRAINER_ETHAN_5: u32 = 222;
pub const TRAINER_BRENT: u32 = 223;
pub const TRAINER_DONALD: u32 = 224;
pub const TRAINER_TAYLOR: u32 = 225;
pub const TRAINER_JEFFREY_1: u32 = 226;
pub const TRAINER_DEREK: u32 = 227;
pub const TRAINER_JEFFREY_2: u32 = 228;
pub const TRAINER_JEFFREY_3: u32 = 229;
pub const TRAINER_JEFFREY_4: u32 = 230;
pub const TRAINER_JEFFREY_5: u32 = 231;
pub const TRAINER_EDWARD: u32 = 232;
pub const TRAINER_PRESTON: u32 = 233;
pub const TRAINER_VIRGIL: u32 = 234;
pub const TRAINER_BLAKE: u32 = 235;
pub const TRAINER_WILLIAM: u32 = 236;
pub const TRAINER_JOSHUA: u32 = 237;
pub const TRAINER_CAMERON_1: u32 = 238;
pub const TRAINER_CAMERON_2: u32 = 239;
pub const TRAINER_CAMERON_3: u32 = 240;
pub const TRAINER_CAMERON_4: u32 = 241;
pub const TRAINER_CAMERON_5: u32 = 242;
pub const TRAINER_JACLYN: u32 = 243;
pub const TRAINER_HANNAH: u32 = 244;
pub const TRAINER_SAMANTHA: u32 = 245;
pub const TRAINER_MAURA: u32 = 246;
pub const TRAINER_KAYLA: u32 = 247;
pub const TRAINER_ALEXIS: u32 = 248;
pub const TRAINER_JACKI_1: u32 = 249;
pub const TRAINER_JACKI_2: u32 = 250;
pub const TRAINER_JACKI_3: u32 = 251;
pub const TRAINER_JACKI_4: u32 = 252;
pub const TRAINER_JACKI_5: u32 = 253;
pub const TRAINER_WALTER_1: u32 = 254;
pub const TRAINER_MICAH: u32 = 255;
pub const TRAINER_THOMAS: u32 = 256;
pub const TRAINER_WALTER_2: u32 = 257;
pub const TRAINER_WALTER_3: u32 = 258;
pub const TRAINER_WALTER_4: u32 = 259;
pub const TRAINER_WALTER_5: u32 = 260;
pub const TRAINER_SIDNEY: u32 = 261;
pub const TRAINER_E4_JIMEN_01: u32 = 261;
pub const TRAINER_PHOEBE: u32 = 262;
pub const TRAINER_E4_HAGANE_01: u32 = 262;
pub const TRAINER_GLACIA: u32 = 263;
pub const TRAINER_E4_HIKOU_01: u32 = 263;
pub const TRAINER_DRAKE: u32 = 264;
pub const TRAINER_E4_DRAGON_01: u32 = 264;
pub const TRAINER_ROXANNE_1: u32 = 265;
pub const TRAINER_BRAWLY_1: u32 = 266;
pub const TRAINER_WATTSON_1: u32 = 267;
pub const TRAINER_FLANNERY_1: u32 = 268;
pub const TRAINER_NORMAN_1: u32 = 269;
pub const TRAINER_WINONA_1: u32 = 270;
pub const TRAINER_TATE_AND_LIZA_1: u32 = 271;
pub const TRAINER_JUAN_1: u32 = 272;
pub const TRAINER_GYM_MUSHI_LEADER_01: u32 = 265;
pub const TRAINER_GYM_KUSA_LEADER_01: u32 = 266;
pub const TRAINER_GYM_DENKI_LEADER_01: u32 = 267;
pub const TRAINER_GYM_MIZU_LEADER_01: u32 = 268;
pub const TRAINER_GYM_NORMAL_LEADER_01: u32 = 269;
pub const TRAINER_GYM_GHOST_LEADER_01: u32 = 270;
pub const TRAINER_GYM_ESPER_LEADER_01: u32 = 271;
pub const TRAINER_GYM_KOORI_LEADER_01: u32 = 272;
pub const TRAINER_JERRY_1: u32 = 273;
pub const TRAINER_TED: u32 = 274;
pub const TRAINER_PAUL: u32 = 275;
pub const TRAINER_JERRY_2: u32 = 276;
pub const TRAINER_JERRY_3: u32 = 277;
pub const TRAINER_JERRY_4: u32 = 278;
pub const TRAINER_JERRY_5: u32 = 279;
pub const TRAINER_KAREN_1: u32 = 280;
pub const TRAINER_GEORGIA: u32 = 281;
pub const TRAINER_KAREN_2: u32 = 282;
pub const TRAINER_KAREN_3: u32 = 283;
pub const TRAINER_KAREN_4: u32 = 284;
pub const TRAINER_KAREN_5: u32 = 285;
pub const TRAINER_KATE_AND_JOY: u32 = 286;
pub const TRAINER_ANNA_AND_MEG_1: u32 = 287;
pub const TRAINER_ANNA_AND_MEG_2: u32 = 288;
pub const TRAINER_ANNA_AND_MEG_3: u32 = 289;
pub const TRAINER_ANNA_AND_MEG_4: u32 = 290;
pub const TRAINER_ANNA_AND_MEG_5: u32 = 291;
pub const TRAINER_VICTOR: u32 = 292;
pub const TRAINER_MIGUEL_1: u32 = 293;
pub const TRAINER_COLTON: u32 = 294;
pub const TRAINER_MIGUEL_2: u32 = 295;
pub const TRAINER_MIGUEL_3: u32 = 296;
pub const TRAINER_MIGUEL_4: u32 = 297;
pub const TRAINER_MIGUEL_5: u32 = 298;
pub const TRAINER_VICTORIA: u32 = 299;
pub const TRAINER_VANESSA: u32 = 300;
pub const TRAINER_BETHANY: u32 = 301;
pub const TRAINER_ISABEL_1: u32 = 302;
pub const TRAINER_ISABEL_2: u32 = 303;
pub const TRAINER_ISABEL_3: u32 = 304;
pub const TRAINER_ISABEL_4: u32 = 305;
pub const TRAINER_ISABEL_5: u32 = 306;
pub const TRAINER_TIMOTHY_1: u32 = 307;
pub const TRAINER_TIMOTHY_2: u32 = 308;
pub const TRAINER_TIMOTHY_3: u32 = 309;
pub const TRAINER_TIMOTHY_4: u32 = 310;
pub const TRAINER_TIMOTHY_5: u32 = 311;
pub const TRAINER_VICKY: u32 = 312;
pub const TRAINER_SHELBY_1: u32 = 313;
pub const TRAINER_SHELBY_2: u32 = 314;
pub const TRAINER_SHELBY_3: u32 = 315;
pub const TRAINER_SHELBY_4: u32 = 316;
pub const TRAINER_SHELBY_5: u32 = 317;
pub const TRAINER_CALVIN_1: u32 = 318;
pub const TRAINER_BILLY: u32 = 319;
pub const TRAINER_JOSH: u32 = 320;
pub const TRAINER_TOMMY: u32 = 321;
pub const TRAINER_JOEY: u32 = 322;
pub const TRAINER_BEN: u32 = 323;
pub const TRAINER_QUINCY: u32 = 324;
pub const TRAINER_KATELYNN: u32 = 325;
pub const TRAINER_JAYLEN: u32 = 326;
pub const TRAINER_DILLON: u32 = 327;
pub const TRAINER_CALVIN_2: u32 = 328;
pub const TRAINER_CALVIN_3: u32 = 329;
pub const TRAINER_CALVIN_4: u32 = 330;
pub const TRAINER_CALVIN_5: u32 = 331;
pub const TRAINER_EDDIE: u32 = 332;
pub const TRAINER_ALLEN: u32 = 333;
pub const TRAINER_TIMMY: u32 = 334;
pub const TRAINER_WALLACE: u32 = 335;
pub const TRAINER_CHAIRPERSON_01: u32 = 335;
pub const TRAINER_ANDREW: u32 = 336;
pub const TRAINER_IVAN: u32 = 337;
pub const TRAINER_CLAUDE: u32 = 338;
pub const TRAINER_ELLIOT_1: u32 = 339;
pub const TRAINER_NED: u32 = 340;
pub const TRAINER_DALE: u32 = 341;
pub const TRAINER_NOLAN: u32 = 342;
pub const TRAINER_BARNY: u32 = 343;
pub const TRAINER_WADE: u32 = 344;
pub const TRAINER_CARTER: u32 = 345;
pub const TRAINER_ELLIOT_2: u32 = 346;
pub const TRAINER_ELLIOT_3: u32 = 347;
pub const TRAINER_ELLIOT_4: u32 = 348;
pub const TRAINER_ELLIOT_5: u32 = 349;
pub const TRAINER_RONALD: u32 = 350;
pub const TRAINER_JACOB: u32 = 351;
pub const TRAINER_ANTHONY: u32 = 352;
pub const TRAINER_BENJAMIN_1: u32 = 353;
pub const TRAINER_BENJAMIN_2: u32 = 354;
pub const TRAINER_BENJAMIN_3: u32 = 355;
pub const TRAINER_BENJAMIN_4: u32 = 356;
pub const TRAINER_BENJAMIN_5: u32 = 357;
pub const TRAINER_ABIGAIL_1: u32 = 358;
pub const TRAINER_JASMINE: u32 = 359;
pub const TRAINER_ABIGAIL_2: u32 = 360;
pub const TRAINER_ABIGAIL_3: u32 = 361;
pub const TRAINER_ABIGAIL_4: u32 = 362;
pub const TRAINER_ABIGAIL_5: u32 = 363;
pub const TRAINER_DYLAN_1: u32 = 364;
pub const TRAINER_DYLAN_2: u32 = 365;
pub const TRAINER_DYLAN_3: u32 = 366;
pub const TRAINER_DYLAN_4: u32 = 367;
pub const TRAINER_DYLAN_5: u32 = 368;
pub const TRAINER_MARIA_1: u32 = 369;
pub const TRAINER_MARIA_2: u32 = 370;
pub const TRAINER_MARIA_3: u32 = 371;
pub const TRAINER_MARIA_4: u32 = 372;
pub const TRAINER_MARIA_5: u32 = 373;
pub const TRAINER_CAMDEN: u32 = 374;
pub const TRAINER_DEMETRIUS: u32 = 375;
pub const TRAINER_ISAIAH_1: u32 = 376;
pub const TRAINER_PABLO_1: u32 = 377;
pub const TRAINER_CHASE: u32 = 378;
pub const TRAINER_ISAIAH_2: u32 = 379;
pub const TRAINER_ISAIAH_3: u32 = 380;
pub const TRAINER_ISAIAH_4: u32 = 381;
pub const TRAINER_ISAIAH_5: u32 = 382;
pub const TRAINER_ISOBEL: u32 = 383;
pub const TRAINER_DONNY: u32 = 384;
pub const TRAINER_TALIA: u32 = 385;
pub const TRAINER_KATELYN_1: u32 = 386;
pub const TRAINER_ALLISON: u32 = 387;
pub const TRAINER_KATELYN_2: u32 = 388;
pub const TRAINER_KATELYN_3: u32 = 389;
pub const TRAINER_KATELYN_4: u32 = 390;
pub const TRAINER_KATELYN_5: u32 = 391;
pub const TRAINER_NICOLAS_1: u32 = 392;
pub const TRAINER_NICOLAS_2: u32 = 393;
pub const TRAINER_NICOLAS_3: u32 = 394;
pub const TRAINER_NICOLAS_4: u32 = 395;
pub const TRAINER_NICOLAS_5: u32 = 396;
pub const TRAINER_AARON: u32 = 397;
pub const TRAINER_PERRY: u32 = 398;
pub const TRAINER_HUGH: u32 = 399;
pub const TRAINER_PHIL: u32 = 400;
pub const TRAINER_JARED: u32 = 401;
pub const TRAINER_HUMBERTO: u32 = 402;
pub const TRAINER_PRESLEY: u32 = 403;
pub const TRAINER_EDWARDO: u32 = 404;
pub const TRAINER_COLIN: u32 = 405;
pub const TRAINER_ROBERT_1: u32 = 406;
pub const TRAINER_BENNY: u32 = 407;
pub const TRAINER_CHESTER: u32 = 408;
pub const TRAINER_ROBERT_2: u32 = 409;
pub const TRAINER_ROBERT_3: u32 = 410;
pub const TRAINER_ROBERT_4: u32 = 411;
pub const TRAINER_ROBERT_5: u32 = 412;
pub const TRAINER_ALEX: u32 = 413;
pub const TRAINER_BECK: u32 = 414;
pub const TRAINER_YASU: u32 = 415;
pub const TRAINER_TAKASHI: u32 = 416;
pub const TRAINER_DIANNE: u32 = 417;
pub const TRAINER_JANI: u32 = 418;
pub const TRAINER_LAO_1: u32 = 419;
pub const TRAINER_LUNG: u32 = 420;
pub const TRAINER_LAO_2: u32 = 421;
pub const TRAINER_LAO_3: u32 = 422;
pub const TRAINER_LAO_4: u32 = 423;
pub const TRAINER_LAO_5: u32 = 424;
pub const TRAINER_JOCELYN: u32 = 425;
pub const TRAINER_LAURA: u32 = 426;
pub const TRAINER_CYNDY_1: u32 = 427;
pub const TRAINER_CORA: u32 = 428;
pub const TRAINER_PAULA: u32 = 429;
pub const TRAINER_CYNDY_2: u32 = 430;
pub const TRAINER_CYNDY_3: u32 = 431;
pub const TRAINER_CYNDY_4: u32 = 432;
pub const TRAINER_CYNDY_5: u32 = 433;
pub const TRAINER_MADELINE_1: u32 = 434;
pub const TRAINER_CLARISSA: u32 = 435;
pub const TRAINER_ANGELICA: u32 = 436;
pub const TRAINER_MADELINE_2: u32 = 437;
pub const TRAINER_MADELINE_3: u32 = 438;
pub const TRAINER_MADELINE_4: u32 = 439;
pub const TRAINER_MADELINE_5: u32 = 440;
pub const TRAINER_BEVERLY: u32 = 441;
pub const TRAINER_IMANI: u32 = 442;
pub const TRAINER_KYLA: u32 = 443;
pub const TRAINER_DENISE: u32 = 444;
pub const TRAINER_BETH: u32 = 445;
pub const TRAINER_TARA: u32 = 446;
pub const TRAINER_MISSY: u32 = 447;
pub const TRAINER_ALICE: u32 = 448;
pub const TRAINER_JENNY_1: u32 = 449;
pub const TRAINER_GRACE: u32 = 450;
pub const TRAINER_TANYA: u32 = 451;
pub const TRAINER_SHARON: u32 = 452;
pub const TRAINER_NIKKI: u32 = 453;
pub const TRAINER_BRENDA: u32 = 454;
pub const TRAINER_KATIE: u32 = 455;
pub const TRAINER_SUSIE: u32 = 456;
pub const TRAINER_KARA: u32 = 457;
pub const TRAINER_DANA: u32 = 458;
pub const TRAINER_SIENNA: u32 = 459;
pub const TRAINER_DEBRA: u32 = 460;
pub const TRAINER_LINDA: u32 = 461;
pub const TRAINER_KAYLEE: u32 = 462;
pub const TRAINER_LAUREL: u32 = 463;
pub const TRAINER_CARLEE: u32 = 464;
pub const TRAINER_JENNY_2: u32 = 465;
pub const TRAINER_JENNY_3: u32 = 466;
pub const TRAINER_JENNY_4: u32 = 467;
pub const TRAINER_JENNY_5: u32 = 468;
pub const TRAINER_HEIDI: u32 = 469;
pub const TRAINER_BECKY: u32 = 470;
pub const TRAINER_CAROL: u32 = 471;
pub const TRAINER_NANCY: u32 = 472;
pub const TRAINER_MARTHA: u32 = 473;
pub const TRAINER_DIANA_1: u32 = 474;
pub const TRAINER_CEDRIC: u32 = 475;
pub const TRAINER_IRENE: u32 = 476;
pub const TRAINER_DIANA_2: u32 = 477;
pub const TRAINER_DIANA_3: u32 = 478;
pub const TRAINER_DIANA_4: u32 = 479;
pub const TRAINER_DIANA_5: u32 = 480;
pub const TRAINER_AMY_AND_LIV_1: u32 = 481;
pub const TRAINER_AMY_AND_LIV_2: u32 = 482;
pub const TRAINER_GINA_AND_MIA_1: u32 = 483;
pub const TRAINER_MIU_AND_YUKI: u32 = 484;
pub const TRAINER_AMY_AND_LIV_3: u32 = 485;
pub const TRAINER_GINA_AND_MIA_2: u32 = 486;
pub const TRAINER_AMY_AND_LIV_4: u32 = 487;
pub const TRAINER_AMY_AND_LIV_5: u32 = 488;
pub const TRAINER_AMY_AND_LIV_6: u32 = 489;
pub const TRAINER_HUEY: u32 = 490;
pub const TRAINER_EDMOND: u32 = 491;
pub const TRAINER_ERNEST_1: u32 = 492;
pub const TRAINER_DWAYNE: u32 = 493;
pub const TRAINER_PHILLIP: u32 = 494;
pub const TRAINER_LEONARD: u32 = 495;
pub const TRAINER_DUNCAN: u32 = 496;
pub const TRAINER_ERNEST_2: u32 = 497;
pub const TRAINER_ERNEST_3: u32 = 498;
pub const TRAINER_ERNEST_4: u32 = 499;
pub const TRAINER_ERNEST_5: u32 = 500;
pub const TRAINER_ELI: u32 = 501;
pub const TRAINER_ANNIKA: u32 = 502;
pub const TRAINER_JAZMYN: u32 = 503;
pub const TRAINER_JONAS: u32 = 504;
pub const TRAINER_KAYLEY: u32 = 505;
pub const TRAINER_AURON: u32 = 506;
pub const TRAINER_KELVIN: u32 = 507;
pub const TRAINER_MARLEY: u32 = 508;
pub const TRAINER_REYNA: u32 = 509;
pub const TRAINER_HUDSON: u32 = 510;
pub const TRAINER_CONOR: u32 = 511;
pub const TRAINER_EDWIN_1: u32 = 512;
pub const TRAINER_HECTOR: u32 = 513;
pub const TRAINER_TABITHA_MOSSDEEP: u32 = 514;
pub const TRAINER_EDWIN_2: u32 = 515;
pub const TRAINER_EDWIN_3: u32 = 516;
pub const TRAINER_EDWIN_4: u32 = 517;
pub const TRAINER_EDWIN_5: u32 = 518;
pub const TRAINER_WALLY_VR_1: u32 = 519;
pub const TRAINER_BRENDAN_ROUTE_103_MUDKIP: u32 = 520;
pub const TRAINER_BRENDAN_ROUTE_110_MUDKIP: u32 = 521;
pub const TRAINER_BRENDAN_ROUTE_119_MUDKIP: u32 = 522;
pub const TRAINER_BRENDAN_ROUTE_103_TREECKO: u32 = 523;
pub const TRAINER_BRENDAN_ROUTE_110_TREECKO: u32 = 524;
pub const TRAINER_BRENDAN_ROUTE_119_TREECKO: u32 = 525;
pub const TRAINER_BRENDAN_ROUTE_103_TORCHIC: u32 = 526;
pub const TRAINER_BRENDAN_ROUTE_110_TORCHIC: u32 = 527;
pub const TRAINER_BRENDAN_ROUTE_119_TORCHIC: u32 = 528;
pub const TRAINER_MAY_ROUTE_103_MUDKIP: u32 = 529;
pub const TRAINER_MAY_ROUTE_110_MUDKIP: u32 = 530;
pub const TRAINER_MAY_ROUTE_119_MUDKIP: u32 = 531;
pub const TRAINER_MAY_ROUTE_103_TREECKO: u32 = 532;
pub const TRAINER_MAY_ROUTE_110_TREECKO: u32 = 533;
pub const TRAINER_MAY_ROUTE_119_TREECKO: u32 = 534;
pub const TRAINER_MAY_ROUTE_103_TORCHIC: u32 = 535;
pub const TRAINER_MAY_ROUTE_110_TORCHIC: u32 = 536;
pub const TRAINER_MAY_ROUTE_119_TORCHIC: u32 = 537;
pub const TRAINER_ISAAC_1: u32 = 538;
pub const TRAINER_DAVIS: u32 = 539;
pub const TRAINER_MITCHELL: u32 = 540;
pub const TRAINER_ISAAC_2: u32 = 541;
pub const TRAINER_ISAAC_3: u32 = 542;
pub const TRAINER_ISAAC_4: u32 = 543;
pub const TRAINER_ISAAC_5: u32 = 544;
pub const TRAINER_LYDIA_1: u32 = 545;
pub const TRAINER_HALLE: u32 = 546;
pub const TRAINER_GARRISON: u32 = 547;
pub const TRAINER_LYDIA_2: u32 = 548;
pub const TRAINER_LYDIA_3: u32 = 549;
pub const TRAINER_LYDIA_4: u32 = 550;
pub const TRAINER_LYDIA_5: u32 = 551;
pub const TRAINER_JACKSON_1: u32 = 552;
pub const TRAINER_LORENZO: u32 = 553;
pub const TRAINER_SEBASTIAN: u32 = 554;
pub const TRAINER_JACKSON_2: u32 = 555;
pub const TRAINER_JACKSON_3: u32 = 556;
pub const TRAINER_JACKSON_4: u32 = 557;
pub const TRAINER_JACKSON_5: u32 = 558;
pub const TRAINER_CATHERINE_1: u32 = 559;
pub const TRAINER_JENNA: u32 = 560;
pub const TRAINER_SOPHIA: u32 = 561;
pub const TRAINER_CATHERINE_2: u32 = 562;
pub const TRAINER_CATHERINE_3: u32 = 563;
pub const TRAINER_CATHERINE_4: u32 = 564;
pub const TRAINER_CATHERINE_5: u32 = 565;
pub const TRAINER_JULIO: u32 = 566;
pub const TRAINER_GRUNT_SEAFLOOR_CAVERN_5: u32 = 567;
pub const TRAINER_GRUNT_UNUSED: u32 = 568;
pub const TRAINER_GRUNT_MT_PYRE_4: u32 = 569;
pub const TRAINER_GRUNT_JAGGED_PASS: u32 = 570;
pub const TRAINER_MARC: u32 = 571;
pub const TRAINER_BRENDEN: u32 = 572;
pub const TRAINER_LILITH: u32 = 573;
pub const TRAINER_CRISTIAN: u32 = 574;
pub const TRAINER_SYLVIA: u32 = 575;
pub const TRAINER_LEONARDO: u32 = 576;
pub const TRAINER_ATHENA: u32 = 577;
pub const TRAINER_HARRISON: u32 = 578;
pub const TRAINER_GRUNT_MT_CHIMNEY_2: u32 = 579;
pub const TRAINER_CLARENCE: u32 = 580;
pub const TRAINER_TERRY: u32 = 581;
pub const TRAINER_NATE: u32 = 582;
pub const TRAINER_KATHLEEN: u32 = 583;
pub const TRAINER_CLIFFORD: u32 = 584;
pub const TRAINER_NICHOLAS: u32 = 585;
pub const TRAINER_GRUNT_SPACE_CENTER_3: u32 = 586;
pub const TRAINER_GRUNT_SPACE_CENTER_4: u32 = 587;
pub const TRAINER_GRUNT_SPACE_CENTER_5: u32 = 588;
pub const TRAINER_GRUNT_SPACE_CENTER_6: u32 = 589;
pub const TRAINER_GRUNT_SPACE_CENTER_7: u32 = 590;
pub const TRAINER_MACEY: u32 = 591;
pub const TRAINER_BRENDAN_RUSTBORO_TREECKO: u32 = 592;
pub const TRAINER_BRENDAN_RUSTBORO_MUDKIP: u32 = 593;
pub const TRAINER_PAXTON: u32 = 594;
pub const TRAINER_ISABELLA: u32 = 595;
pub const TRAINER_GRUNT_WEATHER_INST_5: u32 = 596;
pub const TRAINER_TABITHA_MT_CHIMNEY: u32 = 597;
pub const TRAINER_JONATHAN: u32 = 598;
pub const TRAINER_BRENDAN_RUSTBORO_TORCHIC: u32 = 599;
pub const TRAINER_MAY_RUSTBORO_MUDKIP: u32 = 600;
pub const TRAINER_MAXIE_MAGMA_HIDEOUT: u32 = 601;
pub const TRAINER_MAXIE_MT_CHIMNEY: u32 = 602;
pub const TRAINER_TIANA: u32 = 603;
pub const TRAINER_HALEY_1: u32 = 604;
pub const TRAINER_JANICE: u32 = 605;
pub const TRAINER_VIVI: u32 = 606;
pub const TRAINER_HALEY_2: u32 = 607;
pub const TRAINER_HALEY_3: u32 = 608;
pub const TRAINER_HALEY_4: u32 = 609;
pub const TRAINER_HALEY_5: u32 = 610;
pub const TRAINER_SALLY: u32 = 611;
pub const TRAINER_ROBIN: u32 = 612;
pub const TRAINER_ANDREA: u32 = 613;
pub const TRAINER_CRISSY: u32 = 614;
pub const TRAINER_RICK: u32 = 615;
pub const TRAINER_LYLE: u32 = 616;
pub const TRAINER_JOSE: u32 = 617;
pub const TRAINER_DOUG: u32 = 618;
pub const TRAINER_GREG: u32 = 619;
pub const TRAINER_KENT: u32 = 620;
pub const TRAINER_JAMES_1: u32 = 621;
pub const TRAINER_JAMES_2: u32 = 622;
pub const TRAINER_JAMES_3: u32 = 623;
pub const TRAINER_JAMES_4: u32 = 624;
pub const TRAINER_JAMES_5: u32 = 625;
pub const TRAINER_BRICE: u32 = 626;
pub const TRAINER_TRENT_1: u32 = 627;
pub const TRAINER_LENNY: u32 = 628;
pub const TRAINER_LUCAS_1: u32 = 629;
pub const TRAINER_ALAN: u32 = 630;
pub const TRAINER_CLARK: u32 = 631;
pub const TRAINER_ERIC: u32 = 632;
pub const TRAINER_LUCAS_2: u32 = 633;
pub const TRAINER_MIKE_1: u32 = 634;
pub const TRAINER_MIKE_2: u32 = 635;
pub const TRAINER_TRENT_2: u32 = 636;
pub const TRAINER_TRENT_3: u32 = 637;
pub const TRAINER_TRENT_4: u32 = 638;
pub const TRAINER_TRENT_5: u32 = 639;
pub const TRAINER_DEZ_AND_LUKE: u32 = 640;
pub const TRAINER_LEA_AND_JED: u32 = 641;
pub const TRAINER_KIRA_AND_DAN_1: u32 = 642;
pub const TRAINER_KIRA_AND_DAN_2: u32 = 643;
pub const TRAINER_KIRA_AND_DAN_3: u32 = 644;
pub const TRAINER_KIRA_AND_DAN_4: u32 = 645;
pub const TRAINER_KIRA_AND_DAN_5: u32 = 646;
pub const TRAINER_JOHANNA: u32 = 647;
pub const TRAINER_GERALD: u32 = 648;
pub const TRAINER_VIVIAN: u32 = 649;
pub const TRAINER_DANIELLE: u32 = 650;
pub const TRAINER_HIDEO: u32 = 651;
pub const TRAINER_KEIGO: u32 = 652;
pub const TRAINER_RILEY: u32 = 653;
pub const TRAINER_FLINT: u32 = 654;
pub const TRAINER_ASHLEY: u32 = 655;
pub const TRAINER_WALLY_MAUVILLE: u32 = 656;
pub const TRAINER_WALLY_VR_2: u32 = 657;
pub const TRAINER_WALLY_VR_3: u32 = 658;
pub const TRAINER_WALLY_VR_4: u32 = 659;
pub const TRAINER_WALLY_VR_5: u32 = 660;
pub const TRAINER_BRENDAN_LILYCOVE_MUDKIP: u32 = 661;
pub const TRAINER_BRENDAN_LILYCOVE_TREECKO: u32 = 662;
pub const TRAINER_BRENDAN_LILYCOVE_TORCHIC: u32 = 663;
pub const TRAINER_MAY_LILYCOVE_MUDKIP: u32 = 664;
pub const TRAINER_MAY_LILYCOVE_TREECKO: u32 = 665;
pub const TRAINER_MAY_LILYCOVE_TORCHIC: u32 = 666;
pub const TRAINER_JONAH: u32 = 667;
pub const TRAINER_HENRY: u32 = 668;
pub const TRAINER_ROGER: u32 = 669;
pub const TRAINER_ALEXA: u32 = 670;
pub const TRAINER_RUBEN: u32 = 671;
pub const TRAINER_KOJI_1: u32 = 672;
pub const TRAINER_WAYNE: u32 = 673;
pub const TRAINER_AIDAN: u32 = 674;
pub const TRAINER_REED: u32 = 675;
pub const TRAINER_TISHA: u32 = 676;
pub const TRAINER_TORI_AND_TIA: u32 = 677;
pub const TRAINER_KIM_AND_IRIS: u32 = 678;
pub const TRAINER_TYRA_AND_IVY: u32 = 679;
pub const TRAINER_MEL_AND_PAUL: u32 = 680;
pub const TRAINER_JOHN_AND_JAY_1: u32 = 681;
pub const TRAINER_JOHN_AND_JAY_2: u32 = 682;
pub const TRAINER_JOHN_AND_JAY_3: u32 = 683;
pub const TRAINER_JOHN_AND_JAY_4: u32 = 684;
pub const TRAINER_JOHN_AND_JAY_5: u32 = 685;
pub const TRAINER_RELI_AND_IAN: u32 = 686;
pub const TRAINER_LILA_AND_ROY_1: u32 = 687;
pub const TRAINER_LILA_AND_ROY_2: u32 = 688;
pub const TRAINER_LILA_AND_ROY_3: u32 = 689;
pub const TRAINER_LILA_AND_ROY_4: u32 = 690;
pub const TRAINER_LILA_AND_ROY_5: u32 = 691;
pub const TRAINER_LISA_AND_RAY: u32 = 692;
pub const TRAINER_CHRIS: u32 = 693;
pub const TRAINER_DAWSON: u32 = 694;
pub const TRAINER_SARAH: u32 = 695;
pub const TRAINER_DARIAN: u32 = 696;
pub const TRAINER_HAILEY: u32 = 697;
pub const TRAINER_CHANDLER: u32 = 698;
pub const TRAINER_KALEB: u32 = 699;
pub const TRAINER_JOSEPH: u32 = 700;
pub const TRAINER_ALYSSA: u32 = 701;
pub const TRAINER_MARCOS: u32 = 702;
pub const TRAINER_RHETT: u32 = 703;
pub const TRAINER_TYRON: u32 = 704;
pub const TRAINER_CELINA: u32 = 705;
pub const TRAINER_BIANCA: u32 = 706;
pub const TRAINER_HAYDEN: u32 = 707;
pub const TRAINER_SOPHIE: u32 = 708;
pub const TRAINER_COBY: u32 = 709;
pub const TRAINER_LAWRENCE: u32 = 710;
pub const TRAINER_WYATT: u32 = 711;
pub const TRAINER_ANGELINA: u32 = 712;
pub const TRAINER_KAI: u32 = 713;
pub const TRAINER_CHARLOTTE: u32 = 714;
pub const TRAINER_DEANDRE: u32 = 715;
pub const TRAINER_RIVAL_02_HONO: u32 = 716;
pub const TRAINER_SISTER_01_01: u32 = 717;
pub const TRAINER_BROTHER_01_01: u32 = 718;
pub const TRAINER_BROTHER_01_02: u32 = 719;
pub const TRAINER_DAN_AKU_BOSS_01: u32 = 720;
pub const TRAINER_RIVAL_04_HONO: u32 = 721;
pub const TRAINER_DAN_HONO_BOSS_01: u32 = 722;
pub const TRAINER_SISTER_01_02: u32 = 723;
pub const TRAINER_BROTHER_01_03: u32 = 724;
pub const TRAINER_DAN_DOKU_BOSS_01: u32 = 725;
pub const TRAINER_BROTHER_01_04: u32 = 726;
pub const TRAINER_RIVAL_05_HONO: u32 = 727;
pub const TRAINER_BROTHER_01_05: u32 = 728;
pub const TRAINER_SISTER_01_03: u32 = 729;
pub const TRAINER_DAN_FAIRY_BOSS_01: u32 = 730;
pub const TRAINER_DAN_KAKUTOU_BOSS_01: u32 = 731;
pub const TRAINER_PEPPER_01: u32 = 732;
pub const TRAINER_DARCY: u32 = 733;
pub const TRAINER_MAXIE_MOSSDEEP: u32 = 734;
pub const TRAINER_PETE: u32 = 735;
pub const TRAINER_ISABELLE: u32 = 736;
pub const TRAINER_ANDRES_1: u32 = 737;
pub const TRAINER_JOSUE: u32 = 738;
pub const TRAINER_CAMRON: u32 = 739;
pub const TRAINER_CORY_1: u32 = 740;
pub const TRAINER_CAROLINA: u32 = 741;
pub const TRAINER_ELIJAH: u32 = 742;
pub const TRAINER_CELIA: u32 = 743;
pub const TRAINER_BRYAN: u32 = 744;
pub const TRAINER_BRANDEN: u32 = 745;
pub const TRAINER_BRYANT: u32 = 746;
pub const TRAINER_SHAYLA: u32 = 747;
pub const TRAINER_KYRA: u32 = 748;
pub const TRAINER_JAIDEN: u32 = 749;
pub const TRAINER_ALIX: u32 = 750;
pub const TRAINER_HELENE: u32 = 751;
pub const TRAINER_MARLENE: u32 = 752;
pub const TRAINER_DEVAN: u32 = 753;
pub const TRAINER_JOHNSON: u32 = 754;
pub const TRAINER_MELINA: u32 = 755;
pub const TRAINER_BRANDI: u32 = 756;
pub const TRAINER_AISHA: u32 = 757;
pub const TRAINER_MAKAYLA: u32 = 758;
pub const TRAINER_FABIAN: u32 = 759;
pub const TRAINER_DAYTON: u32 = 760;
pub const TRAINER_RACHEL: u32 = 761;
pub const TRAINER_LEONEL: u32 = 762;
pub const TRAINER_CALLIE: u32 = 763;
pub const TRAINER_CALE: u32 = 764;
pub const TRAINER_MYLES: u32 = 765;
pub const TRAINER_PAT: u32 = 766;
pub const TRAINER_CRISTIN_1: u32 = 767;
pub const TRAINER_MAY_RUSTBORO_TREECKO: u32 = 768;
pub const TRAINER_MAY_RUSTBORO_TORCHIC: u32 = 769;
pub const TRAINER_ROXANNE_2: u32 = 770;
pub const TRAINER_ROXANNE_3: u32 = 771;
pub const TRAINER_ROXANNE_4: u32 = 772;
pub const TRAINER_ROXANNE_5: u32 = 773;
pub const TRAINER_BRAWLY_2: u32 = 774;
pub const TRAINER_BRAWLY_3: u32 = 775;
pub const TRAINER_BRAWLY_4: u32 = 776;
pub const TRAINER_BRAWLY_5: u32 = 777;
pub const TRAINER_WATTSON_2: u32 = 778;
pub const TRAINER_WATTSON_3: u32 = 779;
pub const TRAINER_WATTSON_4: u32 = 780;
pub const TRAINER_WATTSON_5: u32 = 781;
pub const TRAINER_FLANNERY_2: u32 = 782;
pub const TRAINER_FLANNERY_3: u32 = 783;
pub const TRAINER_FLANNERY_4: u32 = 784;
pub const TRAINER_FLANNERY_5: u32 = 785;
pub const TRAINER_NORMAN_2: u32 = 786;
pub const TRAINER_NORMAN_3: u32 = 787;
pub const TRAINER_NORMAN_4: u32 = 788;
pub const TRAINER_NORMAN_5: u32 = 789;
pub const TRAINER_WINONA_2: u32 = 790;
pub const TRAINER_WINONA_3: u32 = 791;
pub const TRAINER_WINONA_4: u32 = 792;
pub const TRAINER_WINONA_5: u32 = 793;
pub const TRAINER_TATE_AND_LIZA_2: u32 = 794;
pub const TRAINER_TATE_AND_LIZA_3: u32 = 795;
pub const TRAINER_TATE_AND_LIZA_4: u32 = 796;
pub const TRAINER_TATE_AND_LIZA_5: u32 = 797;
pub const TRAINER_JUAN_2: u32 = 798;
pub const TRAINER_JUAN_3: u32 = 799;
pub const TRAINER_JUAN_4: u32 = 800;
pub const TRAINER_JUAN_5: u32 = 801;
pub const TRAINER_ANGELO: u32 = 802;
pub const TRAINER_DARIUS: u32 = 803;
pub const TRAINER_STEVEN: u32 = 804;
pub const TRAINER_ANABEL: u32 = 805;
pub const TRAINER_TUCKER: u32 = 806;
pub const TRAINER_SPENSER: u32 = 807;
pub const TRAINER_GRETA: u32 = 808;
pub const TRAINER_NOLAND: u32 = 809;
pub const TRAINER_LUCY: u32 = 810;
pub const TRAINER_BRANDON: u32 = 811;
pub const TRAINER_ANDRES_2: u32 = 812;
pub const TRAINER_ANDRES_3: u32 = 813;
pub const TRAINER_ANDRES_4: u32 = 814;
pub const TRAINER_ANDRES_5: u32 = 815;
pub const TRAINER_CORY_2: u32 = 816;
pub const TRAINER_CORY_3: u32 = 817;
pub const TRAINER_CORY_4: u32 = 818;
pub const TRAINER_CORY_5: u32 = 819;
pub const TRAINER_PABLO_2: u32 = 820;
pub const TRAINER_PABLO_3: u32 = 821;
pub const TRAINER_PABLO_4: u32 = 822;
pub const TRAINER_PABLO_5: u32 = 823;
pub const TRAINER_KOJI_2: u32 = 824;
pub const TRAINER_KOJI_3: u32 = 825;
pub const TRAINER_KOJI_4: u32 = 826;
pub const TRAINER_KOJI_5: u32 = 827;
pub const TRAINER_CRISTIN_2: u32 = 828;
pub const TRAINER_CRISTIN_3: u32 = 829;
pub const TRAINER_CRISTIN_4: u32 = 830;
pub const TRAINER_CRISTIN_5: u32 = 831;
pub const TRAINER_FERNANDO_2: u32 = 832;
pub const TRAINER_FERNANDO_3: u32 = 833;
pub const TRAINER_FERNANDO_4: u32 = 834;
pub const TRAINER_FERNANDO_5: u32 = 835;
pub const TRAINER_SAWYER_2: u32 = 836;
pub const TRAINER_SAWYER_3: u32 = 837;
pub const TRAINER_SAWYER_4: u32 = 838;
pub const TRAINER_SAWYER_5: u32 = 839;
pub const TRAINER_GABRIELLE_2: u32 = 840;
pub const TRAINER_GABRIELLE_3: u32 = 841;
pub const TRAINER_GABRIELLE_4: u32 = 842;
pub const TRAINER_GABRIELLE_5: u32 = 843;
pub const TRAINER_THALIA_2: u32 = 844;
pub const TRAINER_THALIA_3: u32 = 845;
pub const TRAINER_THALIA_4: u32 = 846;
pub const TRAINER_THALIA_5: u32 = 847;
pub const TRAINER_MARIELA: u32 = 848;
pub const TRAINER_ALVARO: u32 = 849;
pub const TRAINER_EVERETT: u32 = 850;
pub const TRAINER_RED: u32 = 851;
pub const TRAINER_LEAF: u32 = 852;
pub const TRAINER_BRENDAN_PLACEHOLDER: u32 = 853;
pub const TRAINER_MAY_PLACEHOLDER: u32 = 854;
pub const TRAINER_OGERPON: u32 = 855;
pub const TRAINERS_COUNT: u32 = 856;
pub const MAX_TRAINERS_COUNT: u32 = 864;
pub const TEMP_FLAGS_START: u32 = 0;
pub const FLAG_TEMP_1: u32 = 1;
pub const FLAG_TEMP_2: u32 = 2;
pub const FLAG_TEMP_3: u32 = 3;
pub const FLAG_TEMP_4: u32 = 4;
pub const FLAG_TEMP_5: u32 = 5;
pub const FLAG_TEMP_6: u32 = 6;
pub const FLAG_TEMP_7: u32 = 7;
pub const FLAG_TEMP_8: u32 = 8;
pub const FLAG_TEMP_9: u32 = 9;
pub const FLAG_TEMP_A: u32 = 10;
pub const FLAG_TEMP_B: u32 = 11;
pub const FLAG_TEMP_C: u32 = 12;
pub const FLAG_TEMP_D: u32 = 13;
pub const FLAG_TEMP_E: u32 = 14;
pub const FLAG_TEMP_F: u32 = 15;
pub const FLAG_TEMP_10: u32 = 16;
pub const FLAG_TEMP_11: u32 = 17;
pub const FLAG_TEMP_12: u32 = 18;
pub const FLAG_TEMP_13: u32 = 19;
pub const FLAG_TEMP_14: u32 = 20;
pub const FLAG_TEMP_15: u32 = 21;
pub const FLAG_TEMP_16: u32 = 22;
pub const FLAG_TEMP_17: u32 = 23;
pub const FLAG_TEMP_18: u32 = 24;
pub const FLAG_TEMP_19: u32 = 25;
pub const FLAG_TEMP_1A: u32 = 26;
pub const FLAG_TEMP_1B: u32 = 27;
pub const FLAG_TEMP_1C: u32 = 28;
pub const FLAG_TEMP_1D: u32 = 29;
pub const FLAG_TEMP_1E: u32 = 30;
pub const FLAG_TEMP_1F: u32 = 31;
pub const TEMP_FLAGS_END: u32 = 31;
pub const NUM_TEMP_FLAGS: u32 = 32;
pub const FLAG_TERA_ORB_CHARGED: u32 = 32;
pub const FLAG_UNUSED_0x021: u32 = 33;
pub const FLAG_UNUSED_0x022: u32 = 34;
pub const FLAG_UNUSED_0x023: u32 = 35;
pub const FLAG_UNUSED_0x024: u32 = 36;
pub const FLAG_UNUSED_0x025: u32 = 37;
pub const FLAG_UNUSED_0x026: u32 = 38;
pub const FLAG_UNUSED_0x027: u32 = 39;
pub const FLAG_UNUSED_0x028: u32 = 40;
pub const FLAG_UNUSED_0x029: u32 = 41;
pub const FLAG_UNUSED_0x02A: u32 = 42;
pub const FLAG_UNUSED_0x02B: u32 = 43;
pub const FLAG_UNUSED_0x02C: u32 = 44;
pub const FLAG_UNUSED_0x02D: u32 = 45;
pub const FLAG_UNUSED_0x02E: u32 = 46;
pub const FLAG_UNUSED_0x02F: u32 = 47;
pub const FLAG_UNUSED_0x030: u32 = 48;
pub const FLAG_UNUSED_0x031: u32 = 49;
pub const FLAG_UNUSED_0x032: u32 = 50;
pub const FLAG_UNUSED_0x033: u32 = 51;
pub const FLAG_UNUSED_0x034: u32 = 52;
pub const FLAG_UNUSED_0x035: u32 = 53;
pub const FLAG_UNUSED_0x036: u32 = 54;
pub const FLAG_UNUSED_0x037: u32 = 55;
pub const FLAG_UNUSED_0x038: u32 = 56;
pub const FLAG_UNUSED_0x039: u32 = 57;
pub const FLAG_UNUSED_0x03A: u32 = 58;
pub const FLAG_UNUSED_0x03B: u32 = 59;
pub const FLAG_UNUSED_0x03C: u32 = 60;
pub const FLAG_UNUSED_0x03D: u32 = 61;
pub const FLAG_UNUSED_0x03E: u32 = 62;
pub const FLAG_UNUSED_0x03F: u32 = 63;
pub const FLAG_UNUSED_0x040: u32 = 64;
pub const FLAG_UNUSED_0x041: u32 = 65;
pub const FLAG_UNUSED_0x042: u32 = 66;
pub const FLAG_UNUSED_0x043: u32 = 67;
pub const FLAG_UNUSED_0x044: u32 = 68;
pub const FLAG_UNUSED_0x045: u32 = 69;
pub const FLAG_UNUSED_0x046: u32 = 70;
pub const FLAG_UNUSED_0x047: u32 = 71;
pub const FLAG_UNUSED_0x048: u32 = 72;
pub const FLAG_UNUSED_0x049: u32 = 73;
pub const FLAG_UNUSED_0x04A: u32 = 74;
pub const FLAG_UNUSED_0x04B: u32 = 75;
pub const FLAG_UNUSED_0x04C: u32 = 76;
pub const FLAG_UNUSED_0x04D: u32 = 77;
pub const FLAG_UNUSED_0x04E: u32 = 78;
pub const FLAG_UNUSED_0x04F: u32 = 79;
pub const FLAG_HIDE_SKY_PILLAR_TOP_RAYQUAZA_STILL: u32 = 80;
pub const FLAG_SET_WALL_CLOCK: u32 = 81;
pub const FLAG_RESCUED_BIRCH: u32 = 82;
pub const FLAG_LEGENDARIES_IN_SOOTOPOLIS: u32 = 83;
pub const FLAG_WATERFALL: u32 = 84;
pub const FLAG_UNUSED_0x055: u32 = 85;
pub const FLAG_HIDE_CONTEST_POKE_BALL: u32 = 86;
pub const FLAG_MET_RIVAL_MOM: u32 = 87;
pub const FLAG_BIRCH_AIDE_MET: u32 = 88;
pub const FLAG_DECLINED_BIKE: u32 = 89;
pub const FLAG_RECEIVED_BIKE: u32 = 90;
pub const FLAG_WATTSON_REMATCH_AVAILABLE: u32 = 91;
pub const FLAG_COLLECTED_ALL_SILVER_SYMBOLS: u32 = 92;
pub const FLAG_GOOD_LUCK_SAFARI_ZONE: u32 = 93;
pub const FLAG_RECEIVED_WAILMER_PAIL: u32 = 94;
pub const FLAG_RECEIVED_POKEBLOCK_CASE: u32 = 95;
pub const FLAG_RECEIVED_SECRET_POWER: u32 = 96;
pub const FLAG_MET_TEAM_AQUA_HARBOR: u32 = 97;
pub const FLAG_TV_EXPLAINED: u32 = 98;
pub const FLAG_MAUVILLE_GYM_BARRIERS_STATE: u32 = 99;
pub const FLAG_MOSSDEEP_GYM_SWITCH_1: u32 = 100;
pub const FLAG_MOSSDEEP_GYM_SWITCH_2: u32 = 101;
pub const FLAG_MOSSDEEP_GYM_SWITCH_3: u32 = 102;
pub const FLAG_MOSSDEEP_GYM_SWITCH_4: u32 = 103;
pub const FLAG_UNUSED_0x068: u32 = 104;
pub const FLAG_OCEANIC_MUSEUM_MET_REPORTER: u32 = 105;
pub const FLAG_RECEIVED_HM_STRENGTH: u32 = 106;
pub const FLAG_RECEIVED_HM_ROCK_SMASH: u32 = 107;
pub const FLAG_WHITEOUT_TO_LAVARIDGE: u32 = 108;
pub const FLAG_RECEIVED_HM_FLASH: u32 = 109;
pub const FLAG_RECEIVED_HM_FLY: u32 = 110;
pub const FLAG_GROUDON_AWAKENED_MAGMA_HIDEOUT: u32 = 111;
pub const FLAG_TEAM_AQUA_ESCAPED_IN_SUBMARINE: u32 = 112;
pub const FLAG_UNUSED_RS_LEGENDARY_BATTLE_DONE: u32 = 113;
pub const FLAG_SCOTT_CALL_BATTLE_FRONTIER: u32 = 114;
pub const FLAG_RECEIVED_METEORITE: u32 = 115;
pub const FLAG_ADVENTURE_STARTED: u32 = 116;
pub const FLAG_DEFEATED_MAGMA_SPACE_CENTER: u32 = 117;
pub const FLAG_MET_HIDDEN_POWER_GIVER: u32 = 118;
pub const FLAG_CANCEL_BATTLE_ROOM_CHALLENGE: u32 = 119;
pub const FLAG_LANDMARK_MIRAGE_TOWER: u32 = 120;
pub const FLAG_RECEIVED_TM_BRICK_BREAK: u32 = 121;
pub const FLAG_RECEIVED_HM_SURF: u32 = 122;
pub const FLAG_RECEIVED_HM_DIVE: u32 = 123;
pub const FLAG_REGISTER_RIVAL_POKENAV: u32 = 124;
pub const FLAG_DEFEATED_RIVAL_ROUTE_104: u32 = 125;
pub const FLAG_DEFEATED_WALLY_VICTORY_ROAD: u32 = 126;
pub const FLAG_MET_PRETTY_PETAL_SHOP_OWNER: u32 = 127;
pub const FLAG_ENABLE_ROXANNE_FIRST_CALL: u32 = 128;
pub const FLAG_KYOGRE_ESCAPED_SEAFLOOR_CAVERN: u32 = 129;
pub const FLAG_DEFEATED_RIVAL_ROUTE103: u32 = 130;
pub const FLAG_RECEIVED_DOLL_LANETTE: u32 = 131;
pub const FLAG_RECEIVED_POTION_OLDALE: u32 = 132;
pub const FLAG_RECEIVED_AMULET_COIN: u32 = 133;
pub const FLAG_PENDING_DAYCARE_EGG: u32 = 134;
pub const FLAG_THANKED_FOR_PLAYING_WITH_WALLY: u32 = 135;
pub const FLAG_ENABLE_FIRST_WALLY_POKENAV_CALL: u32 = 136;
pub const FLAG_RECEIVED_HM_CUT: u32 = 137;
pub const FLAG_SCOTT_CALL_FORTREE_GYM: u32 = 138;
pub const FLAG_DEFEATED_EVIL_TEAM_MT_CHIMNEY: u32 = 139;
pub const FLAG_RECEIVED_6_SODA_POP: u32 = 140;
pub const FLAG_DEFEATED_SEASHORE_HOUSE: u32 = 141;
pub const FLAG_DEVON_GOODS_STOLEN: u32 = 142;
pub const FLAG_RECOVERED_DEVON_GOODS: u32 = 143;
pub const FLAG_RETURNED_DEVON_GOODS: u32 = 144;
pub const FLAG_CAUGHT_LUGIA: u32 = 145;
pub const FLAG_CAUGHT_HO_OH: u32 = 146;
pub const FLAG_MR_BRINEY_SAILING_INTRO: u32 = 147;
pub const FLAG_DOCK_REJECTED_DEVON_GOODS: u32 = 148;
pub const FLAG_DELIVERED_DEVON_GOODS: u32 = 149;
pub const FLAG_RECEIVED_CONTEST_PASS: u32 = 150;
pub const FLAG_RECEIVED_CASTFORM: u32 = 151;
pub const FLAG_RECEIVED_SUPER_ROD: u32 = 152;
pub const FLAG_RUSTBORO_NPC_TRADE_COMPLETED: u32 = 153;
pub const FLAG_PACIFIDLOG_NPC_TRADE_COMPLETED: u32 = 154;
pub const FLAG_FORTREE_NPC_TRADE_COMPLETED: u32 = 155;
pub const FLAG_BATTLE_FRONTIER_TRADE_DONE: u32 = 156;
pub const FLAG_FORCE_MIRAGE_TOWER_VISIBLE: u32 = 157;
pub const FLAG_SOOTOPOLIS_ARCHIE_MAXIE_LEAVE: u32 = 158;
pub const FLAG_INTERACTED_WITH_DEVON_EMPLOYEE_GOODS_STOLEN: u32 = 159;
pub const FLAG_COOL_PAINTING_MADE: u32 = 160;
pub const FLAG_BEAUTY_PAINTING_MADE: u32 = 161;
pub const FLAG_CUTE_PAINTING_MADE: u32 = 162;
pub const FLAG_SMART_PAINTING_MADE: u32 = 163;
pub const FLAG_TOUGH_PAINTING_MADE: u32 = 164;
pub const FLAG_RECEIVED_TM_ROCK_TOMB: u32 = 165;
pub const FLAG_RECEIVED_TM_BULK_UP: u32 = 166;
pub const FLAG_RECEIVED_TM_SHOCK_WAVE: u32 = 167;
pub const FLAG_RECEIVED_TM_OVERHEAT: u32 = 168;
pub const FLAG_RECEIVED_TM_FACADE: u32 = 169;
pub const FLAG_RECEIVED_TM_AERIAL_ACE: u32 = 170;
pub const FLAG_RECEIVED_TM_CALM_MIND: u32 = 171;
pub const FLAG_RECEIVED_TM_WATER_PULSE: u32 = 172;
pub const FLAG_HIDE_SECRET_BASE_TRAINER: u32 = 173;
pub const FLAG_DECORATION_1: u32 = 174;
pub const FLAG_DECORATION_2: u32 = 175;
pub const FLAG_DECORATION_3: u32 = 176;
pub const FLAG_DECORATION_4: u32 = 177;
pub const FLAG_DECORATION_5: u32 = 178;
pub const FLAG_DECORATION_6: u32 = 179;
pub const FLAG_DECORATION_7: u32 = 180;
pub const FLAG_DECORATION_8: u32 = 181;
pub const FLAG_DECORATION_9: u32 = 182;
pub const FLAG_DECORATION_10: u32 = 183;
pub const FLAG_DECORATION_11: u32 = 184;
pub const FLAG_DECORATION_12: u32 = 185;
pub const FLAG_DECORATION_13: u32 = 186;
pub const FLAG_DECORATION_14: u32 = 187;
pub const FLAG_RECEIVED_POKENAV: u32 = 188;
pub const FLAG_DELIVERED_STEVEN_LETTER: u32 = 189;
pub const FLAG_DEFEATED_WALLY_MAUVILLE: u32 = 190;
pub const FLAG_DEFEATED_GRUNT_SPACE_CENTER_1F: u32 = 191;
pub const FLAG_RECEIVED_SUN_STONE_MOSSDEEP: u32 = 192;
pub const FLAG_WALLY_SPEECH: u32 = 193;
pub const FLAG_TRICK_HOUSE_PUZZLE_7_SWITCH_1: u32 = 194;
pub const FLAG_TRICK_HOUSE_PUZZLE_7_SWITCH_2: u32 = 195;
pub const FLAG_TRICK_HOUSE_PUZZLE_7_SWITCH_3: u32 = 196;
pub const FLAG_TRICK_HOUSE_PUZZLE_7_SWITCH_4: u32 = 197;
pub const FLAG_TRICK_HOUSE_PUZZLE_7_SWITCH_5: u32 = 198;
pub const FLAG_RUSTURF_TUNNEL_OPENED: u32 = 199;
pub const FLAG_RECEIVED_RED_SCARF: u32 = 200;
pub const FLAG_RECEIVED_BLUE_SCARF: u32 = 201;
pub const FLAG_RECEIVED_PINK_SCARF: u32 = 202;
pub const FLAG_RECEIVED_GREEN_SCARF: u32 = 203;
pub const FLAG_RECEIVED_YELLOW_SCARF: u32 = 204;
pub const FLAG_INTERACTED_WITH_STEVEN_SPACE_CENTER: u32 = 205;
pub const FLAG_ENCOUNTERED_LATIAS_OR_LATIOS: u32 = 206;
pub const FLAG_MET_ARCHIE_METEOR_FALLS: u32 = 207;
pub const FLAG_GOT_BASEMENT_KEY_FROM_WATTSON: u32 = 208;
pub const FLAG_GOT_TM_THUNDERBOLT_FROM_WATTSON: u32 = 209;
pub const FLAG_FAN_CLUB_STRENGTH_SHARED: u32 = 210;
pub const FLAG_DEFEATED_RIVAL_RUSTBORO: u32 = 211;
pub const FLAG_RECEIVED_RED_OR_BLUE_ORB: u32 = 212;
pub const FLAG_RECEIVED_PREMIER_BALL_RUSTBORO: u32 = 213;
pub const FLAG_ENABLE_WALLY_MATCH_CALL: u32 = 214;
pub const FLAG_ENABLE_SCOTT_MATCH_CALL: u32 = 215;
pub const FLAG_ENABLE_MOM_MATCH_CALL: u32 = 216;
pub const FLAG_MET_DIVING_TREASURE_HUNTER: u32 = 217;
pub const FLAG_MET_WAILMER_TRAINER: u32 = 218;
pub const FLAG_EVIL_LEADER_PLEASE_STOP: u32 = 219;
pub const FLAG_NEVER_SET_0x0DC: u32 = 220;
pub const FLAG_RECEIVED_GO_GOGGLES: u32 = 221;
pub const FLAG_WINGULL_SENT_ON_ERRAND: u32 = 222;
pub const FLAG_RECEIVED_MENTAL_HERB: u32 = 223;
pub const FLAG_WINGULL_DELIVERED_MAIL: u32 = 224;
pub const FLAG_RECEIVED_20_COINS: u32 = 225;
pub const FLAG_RECEIVED_STARTER_DOLL: u32 = 226;
pub const FLAG_RECEIVED_GOOD_ROD: u32 = 227;
pub const FLAG_REGI_DOORS_OPENED: u32 = 228;
pub const FLAG_RECEIVED_TM_RETURN: u32 = 229;
pub const FLAG_RECEIVED_TM_SLUDGE_BOMB: u32 = 230;
pub const FLAG_RECEIVED_TM_ROAR: u32 = 231;
pub const FLAG_RECEIVED_TM_GIGA_DRAIN: u32 = 232;
pub const FLAG_UNUSED_0x0E9: u32 = 233;
pub const FLAG_RECEIVED_TM_REST: u32 = 234;
pub const FLAG_RECEIVED_TM_ATTRACT: u32 = 235;
pub const FLAG_RECEIVED_GLASS_ORNAMENT: u32 = 236;
pub const FLAG_RECEIVED_SILVER_SHIELD: u32 = 237;
pub const FLAG_RECEIVED_GOLD_SHIELD: u32 = 238;
pub const FLAG_USED_STORAGE_KEY: u32 = 239;
pub const FLAG_USED_ROOM_1_KEY: u32 = 240;
pub const FLAG_USED_ROOM_2_KEY: u32 = 241;
pub const FLAG_USED_ROOM_4_KEY: u32 = 242;
pub const FLAG_USED_ROOM_6_KEY: u32 = 243;
pub const FLAG_MET_PROF_COZMO: u32 = 244;
pub const FLAG_RECEIVED_WAILMER_DOLL: u32 = 245;
pub const FLAG_RECEIVED_CHESTO_BERRY_ROUTE_104: u32 = 246;
pub const FLAG_DEFEATED_SS_TIDAL_TRAINERS: u32 = 247;
pub const FLAG_RECEIVED_SPELON_BERRY: u32 = 248;
pub const FLAG_RECEIVED_PAMTRE_BERRY: u32 = 249;
pub const FLAG_RECEIVED_WATMEL_BERRY: u32 = 250;
pub const FLAG_RECEIVED_DURIN_BERRY: u32 = 251;
pub const FLAG_RECEIVED_BELUE_BERRY: u32 = 252;
pub const FLAG_ENABLE_RIVAL_MATCH_CALL: u32 = 253;
pub const FLAG_RECEIVED_CHARCOAL: u32 = 254;
pub const FLAG_LATIOS_OR_LATIAS_ROAMING: u32 = 255;
pub const FLAG_RECEIVED_REPEAT_BALL: u32 = 256;
pub const FLAG_RECEIVED_OLD_ROD: u32 = 257;
pub const FLAG_RECEIVED_COIN_CASE: u32 = 258;
pub const FLAG_RETURNED_RED_OR_BLUE_ORB: u32 = 259;
pub const FLAG_RECEIVED_TM_SNATCH: u32 = 260;
pub const FLAG_RECEIVED_TM_DIG: u32 = 261;
pub const FLAG_RECEIVED_TM_BULLET_SEED: u32 = 262;
pub const FLAG_ENTERED_ELITE_FOUR: u32 = 263;
pub const FLAG_RECEIVED_TM_HIDDEN_POWER: u32 = 264;
pub const FLAG_RECEIVED_TM_TORMENT: u32 = 265;
pub const FLAG_RECEIVED_LAVARIDGE_EGG: u32 = 266;
pub const FLAG_RECEIVED_REVIVED_FOSSIL_MON: u32 = 267;
pub const FLAG_SECRET_BASE_REGISTRY_ENABLED: u32 = 268;
pub const FLAG_RECEIVED_TM_THIEF: u32 = 269;
pub const FLAG_CONTEST_SKETCH_CREATED: u32 = 270;
pub const FLAG_EVIL_TEAM_ESCAPED_STERN_SPOKE: u32 = 271;
pub const FLAG_RECEIVED_EXP_SHARE: u32 = 272;
pub const FLAG_POKERUS_EXPLAINED: u32 = 273;
pub const FLAG_RECEIVED_RUNNING_SHOES: u32 = 274;
pub const FLAG_RECEIVED_QUICK_CLAW: u32 = 275;
pub const FLAG_RECEIVED_KINGS_ROCK: u32 = 276;
pub const FLAG_RECEIVED_MACHO_BRACE: u32 = 277;
pub const FLAG_RECEIVED_SOOTHE_BELL: u32 = 278;
pub const FLAG_RECEIVED_WHITE_HERB: u32 = 279;
pub const FLAG_RECEIVED_SOFT_SAND: u32 = 280;
pub const FLAG_ENABLE_PROF_BIRCH_MATCH_CALL: u32 = 281;
pub const FLAG_RECEIVED_CLEANSE_TAG: u32 = 282;
pub const FLAG_RECEIVED_FOCUS_BAND: u32 = 283;
pub const FLAG_DECLINED_WALLY_BATTLE_MAUVILLE: u32 = 284;
pub const FLAG_RECEIVED_DEVON_SCOPE: u32 = 285;
pub const FLAG_DECLINED_RIVAL_BATTLE_LILYCOVE: u32 = 286;
pub const FLAG_MET_DEVON_EMPLOYEE: u32 = 287;
pub const FLAG_MET_RIVAL_RUSTBORO: u32 = 288;
pub const FLAG_RECEIVED_SILK_SCARF: u32 = 289;
pub const FLAG_NOT_READY_FOR_BATTLE_ROUTE_120: u32 = 290;
pub const FLAG_RECEIVED_SS_TICKET: u32 = 291;
pub const FLAG_MET_RIVAL_LILYCOVE: u32 = 292;
pub const FLAG_MET_RIVAL_IN_HOUSE_AFTER_LILYCOVE: u32 = 293;
pub const FLAG_EXCHANGED_SCANNER: u32 = 294;
pub const FLAG_KECLEON_FLED_FORTREE: u32 = 295;
pub const FLAG_PETALBURG_MART_EXPANDED_ITEMS: u32 = 296;
pub const FLAG_RECEIVED_MIRACLE_SEED: u32 = 297;
pub const FLAG_RECEIVED_BELDUM: u32 = 298;
pub const FLAG_RECEIVED_FANCLUB_TM_THIS_WEEK: u32 = 299;
pub const FLAG_MET_FANCLUB_YOUNGER_BROTHER: u32 = 300;
pub const FLAG_RIVAL_LEFT_FOR_ROUTE103: u32 = 301;
pub const FLAG_OMIT_DIVE_FROM_STEVEN_LETTER: u32 = 302;
pub const FLAG_HAS_MATCH_CALL: u32 = 303;
pub const FLAG_ADDED_MATCH_CALL_TO_POKENAV: u32 = 304;
pub const FLAG_REGISTERED_STEVEN_POKENAV: u32 = 305;
pub const FLAG_ENABLE_NORMAN_MATCH_CALL: u32 = 306;
pub const FLAG_STEVEN_GUIDES_TO_CAVE_OF_ORIGIN: u32 = 307;
pub const FLAG_MET_ARCHIE_SOOTOPOLIS: u32 = 308;
pub const FLAG_MET_MAXIE_SOOTOPOLIS: u32 = 309;
pub const FLAG_MET_SCOTT_RUSTBORO: u32 = 310;
pub const FLAG_WALLACE_GOES_TO_SKY_PILLAR: u32 = 311;
pub const FLAG_RECEIVED_HM_WATERFALL: u32 = 312;
pub const FLAG_BEAT_MAGMA_GRUNT_JAGGED_PASS: u32 = 313;
pub const FLAG_RECEIVED_AURORA_TICKET: u32 = 314;
pub const FLAG_RECEIVED_MYSTIC_TICKET: u32 = 315;
pub const FLAG_RECEIVED_OLD_SEA_MAP: u32 = 316;
pub const FLAG_WONDER_CARD_UNUSED_1: u32 = 317;
pub const FLAG_WONDER_CARD_UNUSED_2: u32 = 318;
pub const FLAG_WONDER_CARD_UNUSED_3: u32 = 319;
pub const FLAG_WONDER_CARD_UNUSED_4: u32 = 320;
pub const FLAG_WONDER_CARD_UNUSED_5: u32 = 321;
pub const FLAG_WONDER_CARD_UNUSED_6: u32 = 322;
pub const FLAG_WONDER_CARD_UNUSED_7: u32 = 323;
pub const FLAG_WONDER_CARD_UNUSED_8: u32 = 324;
pub const FLAG_WONDER_CARD_UNUSED_9: u32 = 325;
pub const FLAG_WONDER_CARD_UNUSED_10: u32 = 326;
pub const FLAG_WONDER_CARD_UNUSED_11: u32 = 327;
pub const FLAG_WONDER_CARD_UNUSED_12: u32 = 328;
pub const FLAG_WONDER_CARD_UNUSED_13: u32 = 329;
pub const FLAG_WONDER_CARD_UNUSED_14: u32 = 330;
pub const FLAG_WONDER_CARD_UNUSED_15: u32 = 331;
pub const FLAG_WONDER_CARD_UNUSED_16: u32 = 332;
pub const FLAG_WONDER_CARD_UNUSED_17: u32 = 333;
pub const NUM_WONDER_CARD_FLAGS: u32 = 20;
pub const FLAG_MIRAGE_TOWER_VISIBLE: u32 = 334;
pub const FLAG_CHOSE_ROOT_FOSSIL: u32 = 335;
pub const FLAG_CHOSE_CLAW_FOSSIL: u32 = 336;
pub const FLAG_RECEIVED_POWDER_JAR: u32 = 337;
pub const FLAG_CHOSEN_MULTI_BATTLE_NPC_PARTNER: u32 = 338;
pub const FLAG_MET_BATTLE_FRONTIER_BREEDER: u32 = 339;
pub const FLAG_MET_BATTLE_FRONTIER_MANIAC: u32 = 340;
pub const FLAG_ENTERED_CONTEST: u32 = 341;
pub const FLAG_MET_SLATEPORT_FANCLUB_CHAIRMAN: u32 = 342;
pub const FLAG_MET_BATTLE_FRONTIER_GAMBLER: u32 = 343;
pub const FLAG_ENABLE_MR_STONE_POKENAV: u32 = 344;
pub const FLAG_NURSE_MENTIONS_GOLD_CARD: u32 = 345;
pub const FLAG_MET_FRONTIER_BEAUTY_MOVE_TUTOR: u32 = 346;
pub const FLAG_MET_FRONTIER_SWIMMER_MOVE_TUTOR: u32 = 347;
pub const TRAINER_REGISTERED_FLAGS_START: u32 = 348;
pub const FLAG_UNUSED_0x1AA: u32 = 426;
pub const FLAG_UNUSED_0x1AB: u32 = 427;
pub const FLAG_DEFEATED_DEOXYS: u32 = 428;
pub const FLAG_BATTLED_DEOXYS: u32 = 429;
pub const FLAG_SHOWN_EON_TICKET: u32 = 430;
pub const FLAG_SHOWN_AURORA_TICKET: u32 = 431;
pub const FLAG_SHOWN_OLD_SEA_MAP: u32 = 432;
pub const FLAG_MOVE_TUTOR_TAUGHT_SWAGGER: u32 = 433;
pub const FLAG_MOVE_TUTOR_TAUGHT_ROLLOUT: u32 = 434;
pub const FLAG_MOVE_TUTOR_TAUGHT_FURY_CUTTER: u32 = 435;
pub const FLAG_MOVE_TUTOR_TAUGHT_MIMIC: u32 = 436;
pub const FLAG_MOVE_TUTOR_TAUGHT_METRONOME: u32 = 437;
pub const FLAG_MOVE_TUTOR_TAUGHT_SLEEP_TALK: u32 = 438;
pub const FLAG_MOVE_TUTOR_TAUGHT_SUBSTITUTE: u32 = 439;
pub const FLAG_MOVE_TUTOR_TAUGHT_DYNAMICPUNCH: u32 = 440;
pub const FLAG_MOVE_TUTOR_TAUGHT_DOUBLE_EDGE: u32 = 441;
pub const FLAG_MOVE_TUTOR_TAUGHT_EXPLOSION: u32 = 442;
pub const FLAG_DEFEATED_REGIROCK: u32 = 443;
pub const FLAG_DEFEATED_REGICE: u32 = 444;
pub const FLAG_DEFEATED_REGISTEEL: u32 = 445;
pub const FLAG_DEFEATED_KYOGRE: u32 = 446;
pub const FLAG_DEFEATED_GROUDON: u32 = 447;
pub const FLAG_DEFEATED_RAYQUAZA: u32 = 448;
pub const FLAG_DEFEATED_VOLTORB_1_NEW_MAUVILLE: u32 = 449;
pub const FLAG_DEFEATED_VOLTORB_2_NEW_MAUVILLE: u32 = 450;
pub const FLAG_DEFEATED_VOLTORB_3_NEW_MAUVILLE: u32 = 451;
pub const FLAG_DEFEATED_ELECTRODE_1_AQUA_HIDEOUT: u32 = 452;
pub const FLAG_DEFEATED_ELECTRODE_2_AQUA_HIDEOUT: u32 = 453;
pub const FLAG_DEFEATED_SUDOWOODO: u32 = 454;
pub const FLAG_DEFEATED_MEW: u32 = 455;
pub const FLAG_DEFEATED_LATIAS_OR_LATIOS: u32 = 456;
pub const FLAG_CAUGHT_LATIAS_OR_LATIOS: u32 = 457;
pub const FLAG_CAUGHT_MEW: u32 = 458;
pub const FLAG_MET_SCOTT_AFTER_OBTAINING_STONE_BADGE: u32 = 459;
pub const FLAG_MET_SCOTT_IN_VERDANTURF: u32 = 460;
pub const FLAG_MET_SCOTT_IN_FALLARBOR: u32 = 461;
pub const FLAG_MET_SCOTT_IN_LILYCOVE: u32 = 462;
pub const FLAG_MET_SCOTT_IN_EVERGRANDE: u32 = 463;
pub const FLAG_MET_SCOTT_ON_SS_TIDAL: u32 = 464;
pub const FLAG_SCOTT_GIVES_BATTLE_POINTS: u32 = 465;
pub const FLAG_COLLECTED_ALL_GOLD_SYMBOLS: u32 = 466;
pub const FLAG_ENABLE_ROXANNE_MATCH_CALL: u32 = 467;
pub const FLAG_ENABLE_BRAWLY_MATCH_CALL: u32 = 468;
pub const FLAG_ENABLE_WATTSON_MATCH_CALL: u32 = 469;
pub const FLAG_ENABLE_FLANNERY_MATCH_CALL: u32 = 470;
pub const FLAG_ENABLE_WINONA_MATCH_CALL: u32 = 471;
pub const FLAG_ENABLE_TATE_AND_LIZA_MATCH_CALL: u32 = 472;
pub const FLAG_ENABLE_JUAN_MATCH_CALL: u32 = 473;
pub const FLAG_UNUSED_0x1DA: u32 = 474;
pub const FLAG_SHOWN_MYSTIC_TICKET: u32 = 475;
pub const FLAG_DEFEATED_HO_OH: u32 = 476;
pub const FLAG_DEFEATED_LUGIA: u32 = 477;
pub const FLAG_UNUSED_0x1DE: u32 = 478;
pub const FLAG_UNUSED_0x1DF: u32 = 479;
pub const FLAG_UNUSED_0x1E0: u32 = 480;
pub const FLAG_UNUSED_0x1E1: u32 = 481;
pub const FLAG_UNUSED_0x1E2: u32 = 482;
pub const FLAG_UNUSED_0x1E3: u32 = 483;
pub const FLAG_MYSTERY_GIFT_DONE: u32 = 484;
pub const FLAG_MYSTERY_GIFT_1: u32 = 485;
pub const FLAG_MYSTERY_GIFT_2: u32 = 486;
pub const FLAG_MYSTERY_GIFT_3: u32 = 487;
pub const FLAG_MYSTERY_GIFT_4: u32 = 488;
pub const FLAG_MYSTERY_GIFT_5: u32 = 489;
pub const FLAG_MYSTERY_GIFT_6: u32 = 490;
pub const FLAG_MYSTERY_GIFT_7: u32 = 491;
pub const FLAG_MYSTERY_GIFT_8: u32 = 492;
pub const FLAG_MYSTERY_GIFT_9: u32 = 493;
pub const FLAG_MYSTERY_GIFT_10: u32 = 494;
pub const FLAG_MYSTERY_GIFT_11: u32 = 495;
pub const FLAG_MYSTERY_GIFT_12: u32 = 496;
pub const FLAG_MYSTERY_GIFT_13: u32 = 497;
pub const FLAG_MYSTERY_GIFT_14: u32 = 498;
pub const FLAG_MYSTERY_GIFT_15: u32 = 499;
pub const FLAG_HIDDEN_ITEMS_START: u32 = 500;
pub const FLAG_HIDDEN_ITEM_LAVARIDGE_TOWN_ICE_HEAL: u32 = 500;
pub const FLAG_HIDDEN_ITEM_TRICK_HOUSE_NUGGET: u32 = 501;
pub const FLAG_HIDDEN_ITEM_ROUTE_111_STARDUST: u32 = 502;
pub const FLAG_HIDDEN_ITEM_ROUTE_113_ETHER: u32 = 503;
pub const FLAG_HIDDEN_ITEM_ROUTE_114_CARBOS: u32 = 504;
pub const FLAG_HIDDEN_ITEM_ROUTE_119_CALCIUM: u32 = 505;
pub const FLAG_HIDDEN_ITEM_ROUTE_119_ULTRA_BALL: u32 = 506;
pub const FLAG_HIDDEN_ITEM_ROUTE_123_SUPER_REPEL: u32 = 507;
pub const FLAG_HIDDEN_ITEM_UNDERWATER_124_CARBOS: u32 = 508;
pub const FLAG_HIDDEN_ITEM_UNDERWATER_124_GREEN_SHARD: u32 = 509;
pub const FLAG_HIDDEN_ITEM_UNDERWATER_124_PEARL: u32 = 510;
pub const FLAG_HIDDEN_ITEM_UNDERWATER_124_BIG_PEARL: u32 = 511;
pub const FLAG_HIDDEN_ITEM_UNDERWATER_126_BLUE_SHARD: u32 = 512;
pub const FLAG_HIDDEN_ITEM_UNDERWATER_124_HEART_SCALE_1: u32 = 513;
pub const FLAG_HIDDEN_ITEM_UNDERWATER_126_HEART_SCALE: u32 = 514;
pub const FLAG_HIDDEN_ITEM_UNDERWATER_126_ULTRA_BALL: u32 = 515;
pub const FLAG_HIDDEN_ITEM_UNDERWATER_126_STARDUST: u32 = 516;
pub const FLAG_HIDDEN_ITEM_UNDERWATER_126_PEARL: u32 = 517;
pub const FLAG_HIDDEN_ITEM_UNDERWATER_126_YELLOW_SHARD: u32 = 518;
pub const FLAG_HIDDEN_ITEM_UNDERWATER_126_IRON: u32 = 519;
pub const FLAG_HIDDEN_ITEM_UNDERWATER_126_BIG_PEARL: u32 = 520;
pub const FLAG_HIDDEN_ITEM_UNDERWATER_127_STAR_PIECE: u32 = 521;
pub const FLAG_HIDDEN_ITEM_UNDERWATER_127_HP_UP: u32 = 522;
pub const FLAG_HIDDEN_ITEM_UNDERWATER_127_HEART_SCALE: u32 = 523;
pub const FLAG_HIDDEN_ITEM_UNDERWATER_127_RED_SHARD: u32 = 524;
pub const FLAG_HIDDEN_ITEM_UNDERWATER_128_PROTEIN: u32 = 525;
pub const FLAG_HIDDEN_ITEM_UNDERWATER_128_PEARL: u32 = 526;
pub const FLAG_HIDDEN_ITEM_LILYCOVE_CITY_HEART_SCALE: u32 = 527;
pub const FLAG_HIDDEN_ITEM_FALLARBOR_TOWN_NUGGET: u32 = 528;
pub const FLAG_HIDDEN_ITEM_MT_PYRE_EXTERIOR_ULTRA_BALL: u32 = 529;
pub const FLAG_HIDDEN_ITEM_ROUTE_113_TM_DOUBLE_TEAM: u32 = 530;
pub const FLAG_HIDDEN_ITEM_ABANDONED_SHIP_RM_1_KEY: u32 = 531;
pub const FLAG_HIDDEN_ITEM_ABANDONED_SHIP_RM_2_KEY: u32 = 532;
pub const FLAG_HIDDEN_ITEM_ABANDONED_SHIP_RM_4_KEY: u32 = 533;
pub const FLAG_HIDDEN_ITEM_ABANDONED_SHIP_RM_6_KEY: u32 = 534;
pub const FLAG_HIDDEN_ITEM_SS_TIDAL_LOWER_DECK_LEFTOVERS: u32 = 535;
pub const FLAG_HIDDEN_ITEM_UNDERWATER_124_CALCIUM: u32 = 536;
pub const FLAG_HIDDEN_ITEM_ROUTE_104_POTION: u32 = 537;
pub const FLAG_HIDDEN_ITEM_UNDERWATER_124_HEART_SCALE_2: u32 = 538;
pub const FLAG_HIDDEN_ITEM_ROUTE_121_HP_UP: u32 = 539;
pub const FLAG_HIDDEN_ITEM_ROUTE_121_NUGGET: u32 = 540;
pub const FLAG_HIDDEN_ITEM_ROUTE_123_REVIVE: u32 = 541;
pub const FLAG_HIDDEN_ITEM_ROUTE_114_REVIVE: u32 = 542;
pub const FLAG_HIDDEN_ITEM_LILYCOVE_CITY_PP_UP: u32 = 543;
pub const FLAG_HIDDEN_ITEM_ROUTE_104_SUPER_POTION: u32 = 544;
pub const FLAG_HIDDEN_ITEM_ROUTE_116_SUPER_POTION: u32 = 545;
pub const FLAG_HIDDEN_ITEM_ROUTE_106_STARDUST: u32 = 546;
pub const FLAG_HIDDEN_ITEM_ROUTE_106_HEART_SCALE: u32 = 547;
pub const FLAG_HIDDEN_ITEM_GRANITE_CAVE_B2F_EVERSTONE_1: u32 = 548;
pub const FLAG_HIDDEN_ITEM_GRANITE_CAVE_B2F_EVERSTONE_2: u32 = 549;
pub const FLAG_HIDDEN_ITEM_ROUTE_109_REVIVE: u32 = 550;
pub const FLAG_HIDDEN_ITEM_ROUTE_109_GREAT_BALL: u32 = 551;
pub const FLAG_HIDDEN_ITEM_ROUTE_109_HEART_SCALE_1: u32 = 552;
pub const FLAG_HIDDEN_ITEM_ROUTE_110_GREAT_BALL: u32 = 553;
pub const FLAG_HIDDEN_ITEM_ROUTE_110_REVIVE: u32 = 554;
pub const FLAG_HIDDEN_ITEM_ROUTE_110_FULL_HEAL: u32 = 555;
pub const FLAG_HIDDEN_ITEM_ROUTE_111_PROTEIN: u32 = 556;
pub const FLAG_HIDDEN_ITEM_ROUTE_111_RARE_CANDY: u32 = 557;
pub const FLAG_HIDDEN_ITEM_PETALBURG_WOODS_POTION: u32 = 558;
pub const FLAG_HIDDEN_ITEM_PETALBURG_WOODS_TINY_MUSHROOM_1: u32 = 559;
pub const FLAG_HIDDEN_ITEM_PETALBURG_WOODS_TINY_MUSHROOM_2: u32 = 560;
pub const FLAG_HIDDEN_ITEM_PETALBURG_WOODS_POKE_BALL: u32 = 561;
pub const FLAG_HIDDEN_ITEM_ROUTE_104_POKE_BALL: u32 = 562;
pub const FLAG_HIDDEN_ITEM_ROUTE_106_POKE_BALL: u32 = 563;
pub const FLAG_HIDDEN_ITEM_ROUTE_109_ETHER: u32 = 564;
pub const FLAG_HIDDEN_ITEM_ROUTE_110_POKE_BALL: u32 = 565;
pub const FLAG_HIDDEN_ITEM_ROUTE_118_HEART_SCALE: u32 = 566;
pub const FLAG_HIDDEN_ITEM_ROUTE_118_IRON: u32 = 567;
pub const FLAG_HIDDEN_ITEM_ROUTE_119_FULL_HEAL: u32 = 568;
pub const FLAG_HIDDEN_ITEM_ROUTE_120_RARE_CANDY_2: u32 = 569;
pub const FLAG_HIDDEN_ITEM_ROUTE_120_ZINC: u32 = 570;
pub const FLAG_HIDDEN_ITEM_ROUTE_120_RARE_CANDY_1: u32 = 571;
pub const FLAG_HIDDEN_ITEM_ROUTE_117_REPEL: u32 = 572;
pub const FLAG_HIDDEN_ITEM_ROUTE_121_FULL_HEAL: u32 = 573;
pub const FLAG_HIDDEN_ITEM_ROUTE_123_HYPER_POTION: u32 = 574;
pub const FLAG_HIDDEN_ITEM_LILYCOVE_CITY_POKE_BALL: u32 = 575;
pub const FLAG_HIDDEN_ITEM_JAGGED_PASS_GREAT_BALL: u32 = 576;
pub const FLAG_HIDDEN_ITEM_JAGGED_PASS_FULL_HEAL: u32 = 577;
pub const FLAG_HIDDEN_ITEM_MT_PYRE_EXTERIOR_MAX_ETHER: u32 = 578;
pub const FLAG_HIDDEN_ITEM_MT_PYRE_SUMMIT_ZINC: u32 = 579;
pub const FLAG_HIDDEN_ITEM_MT_PYRE_SUMMIT_RARE_CANDY: u32 = 580;
pub const FLAG_HIDDEN_ITEM_VICTORY_ROAD_1F_ULTRA_BALL: u32 = 581;
pub const FLAG_HIDDEN_ITEM_VICTORY_ROAD_B2F_ELIXIR: u32 = 582;
pub const FLAG_HIDDEN_ITEM_VICTORY_ROAD_B2F_MAX_REPEL: u32 = 583;
pub const FLAG_HIDDEN_ITEM_ROUTE_120_REVIVE: u32 = 584;
pub const FLAG_HIDDEN_ITEM_ROUTE_104_ANTIDOTE: u32 = 585;
pub const FLAG_HIDDEN_ITEM_ROUTE_108_RARE_CANDY: u32 = 586;
pub const FLAG_HIDDEN_ITEM_ROUTE_119_MAX_ETHER: u32 = 587;
pub const FLAG_HIDDEN_ITEM_ROUTE_104_HEART_SCALE: u32 = 588;
pub const FLAG_HIDDEN_ITEM_ROUTE_105_HEART_SCALE: u32 = 589;
pub const FLAG_HIDDEN_ITEM_ROUTE_109_HEART_SCALE_2: u32 = 590;
pub const FLAG_HIDDEN_ITEM_ROUTE_109_HEART_SCALE_3: u32 = 591;
pub const FLAG_HIDDEN_ITEM_ROUTE_128_HEART_SCALE_1: u32 = 592;
pub const FLAG_HIDDEN_ITEM_ROUTE_128_HEART_SCALE_2: u32 = 593;
pub const FLAG_HIDDEN_ITEM_ROUTE_128_HEART_SCALE_3: u32 = 594;
pub const FLAG_HIDDEN_ITEM_PETALBURG_CITY_RARE_CANDY: u32 = 595;
pub const FLAG_HIDDEN_ITEM_ROUTE_116_BLACK_GLASSES: u32 = 596;
pub const FLAG_HIDDEN_ITEM_ROUTE_115_HEART_SCALE: u32 = 597;
pub const FLAG_HIDDEN_ITEM_ROUTE_113_NUGGET: u32 = 598;
pub const FLAG_HIDDEN_ITEM_ROUTE_123_PP_UP: u32 = 599;
pub const FLAG_HIDDEN_ITEM_ROUTE_121_MAX_REVIVE: u32 = 600;
pub const FLAG_HIDDEN_ITEM_ARTISAN_CAVE_B1F_CALCIUM: u32 = 601;
pub const FLAG_HIDDEN_ITEM_ARTISAN_CAVE_B1F_ZINC: u32 = 602;
pub const FLAG_HIDDEN_ITEM_ARTISAN_CAVE_B1F_PROTEIN: u32 = 603;
pub const FLAG_HIDDEN_ITEM_ARTISAN_CAVE_B1F_IRON: u32 = 604;
pub const FLAG_HIDDEN_ITEM_SAFARI_ZONE_SOUTH_EAST_FULL_RESTORE: u32 = 605;
pub const FLAG_HIDDEN_ITEM_SAFARI_ZONE_NORTH_EAST_RARE_CANDY: u32 = 606;
pub const FLAG_HIDDEN_ITEM_SAFARI_ZONE_NORTH_EAST_ZINC: u32 = 607;
pub const FLAG_HIDDEN_ITEM_SAFARI_ZONE_SOUTH_EAST_PP_UP: u32 = 608;
pub const FLAG_HIDDEN_ITEM_NAVEL_ROCK_TOP_SACRED_ASH: u32 = 609;
pub const FLAG_HIDDEN_ITEM_ROUTE_123_RARE_CANDY: u32 = 610;
pub const FLAG_HIDDEN_ITEM_ROUTE_105_BIG_PEARL: u32 = 611;
pub const FLAG_TITAN_KLAWF: u32 = 612;
pub const FLAG_TITAN_BOMBIRDIER: u32 = 613;
pub const FLAG_TITAN_ORTHWORM: u32 = 614;
pub const FLAG_TITAN_TUSK_TREADS: u32 = 615;
pub const FLAG_TITAN_DONDOZO: u32 = 616;
pub const FLAG_TITAN_OKIDOGI: u32 = 617;
pub const FLAG_TITAN_MUNKIDORI: u32 = 618;
pub const FLAG_TITAN_FEZANDIPITI: u32 = 619;
pub const FLAG_TITAN_LOYAL_THREE: u32 = 620;
pub const FLAG_UNUSED_0x26D: u32 = 621;
pub const FLAG_UNUSED_0x26E: u32 = 622;
pub const FLAG_UNUSED_0x26F: u32 = 623;
pub const FLAG_UNUSED_0x270: u32 = 624;
pub const FLAG_UNUSED_0x271: u32 = 625;
pub const FLAG_UNUSED_0x272: u32 = 626;
pub const FLAG_UNUSED_0x273: u32 = 627;
pub const FLAG_UNUSED_0x274: u32 = 628;
pub const FLAG_UNUSED_0x275: u32 = 629;
pub const FLAG_UNUSED_0x276: u32 = 630;
pub const FLAG_UNUSED_0x277: u32 = 631;
pub const FLAG_UNUSED_0x278: u32 = 632;
pub const FLAG_UNUSED_0x279: u32 = 633;
pub const FLAG_UNUSED_0x27A: u32 = 634;
pub const FLAG_UNUSED_0x27B: u32 = 635;
pub const FLAG_UNUSED_0x27C: u32 = 636;
pub const FLAG_UNUSED_0x27D: u32 = 637;
pub const FLAG_UNUSED_0x27E: u32 = 638;
pub const FLAG_UNUSED_0x27F: u32 = 639;
pub const FLAG_UNUSED_0x280: u32 = 640;
pub const FLAG_UNUSED_0x281: u32 = 641;
pub const FLAG_UNUSED_0x282: u32 = 642;
pub const FLAG_UNUSED_0x283: u32 = 643;
pub const FLAG_UNUSED_0x284: u32 = 644;
pub const FLAG_UNUSED_0x285: u32 = 645;
pub const FLAG_UNUSED_0x286: u32 = 646;
pub const FLAG_UNUSED_0x287: u32 = 647;
pub const FLAG_UNUSED_0x288: u32 = 648;
pub const FLAG_UNUSED_0x289: u32 = 649;
pub const FLAG_UNUSED_0x28A: u32 = 650;
pub const FLAG_UNUSED_0x28B: u32 = 651;
pub const FLAG_UNUSED_0x28C: u32 = 652;
pub const FLAG_UNUSED_0x28D: u32 = 653;
pub const FLAG_UNUSED_0x28E: u32 = 654;
pub const FLAG_UNUSED_0x28F: u32 = 655;
pub const FLAG_UNUSED_0x290: u32 = 656;
pub const FLAG_UNUSED_0x291: u32 = 657;
pub const FLAG_UNUSED_0x292: u32 = 658;
pub const FLAG_UNUSED_0x293: u32 = 659;
pub const FLAG_UNUSED_0x294: u32 = 660;
pub const FLAG_UNUSED_0x295: u32 = 661;
pub const FLAG_UNUSED_0x296: u32 = 662;
pub const FLAG_UNUSED_0x297: u32 = 663;
pub const FLAG_UNUSED_0x298: u32 = 664;
pub const FLAG_UNUSED_0x299: u32 = 665;
pub const FLAG_UNUSED_0x29A: u32 = 666;
pub const FLAG_UNUSED_0x29B: u32 = 667;
pub const FLAG_UNUSED_0x29C: u32 = 668;
pub const FLAG_UNUSED_0x29D: u32 = 669;
pub const FLAG_UNUSED_0x29E: u32 = 670;
pub const FLAG_UNUSED_0x29F: u32 = 671;
pub const FLAG_UNUSED_0x2A0: u32 = 672;
pub const FLAG_UNUSED_0x2A1: u32 = 673;
pub const FLAG_UNUSED_0x2A2: u32 = 674;
pub const FLAG_UNUSED_0x2A3: u32 = 675;
pub const FLAG_UNUSED_0x2A4: u32 = 676;
pub const FLAG_UNUSED_0x2A5: u32 = 677;
pub const FLAG_UNUSED_0x2A6: u32 = 678;
pub const FLAG_UNUSED_0x2A7: u32 = 679;
pub const FLAG_UNUSED_0x2A8: u32 = 680;
pub const FLAG_UNUSED_0x2A9: u32 = 681;
pub const FLAG_UNUSED_0x2AA: u32 = 682;
pub const FLAG_UNUSED_0x2AB: u32 = 683;
pub const FLAG_UNUSED_0x2AC: u32 = 684;
pub const FLAG_UNUSED_0x2AD: u32 = 685;
pub const FLAG_UNUSED_0x2AE: u32 = 686;
pub const FLAG_UNUSED_0x2AF: u32 = 687;
pub const FLAG_UNUSED_0x2B0: u32 = 688;
pub const FLAG_UNUSED_0x2B1: u32 = 689;
pub const FLAG_UNUSED_0x2B2: u32 = 690;
pub const FLAG_UNUSED_0x2B3: u32 = 691;
pub const FLAG_UNUSED_0x2B4: u32 = 692;
pub const FLAG_UNUSED_0x2B5: u32 = 693;
pub const FLAG_UNUSED_0x2B6: u32 = 694;
pub const FLAG_UNUSED_0x2B7: u32 = 695;
pub const FLAG_UNUSED_0x2B8: u32 = 696;
pub const FLAG_UNUSED_0x2B9: u32 = 697;
pub const FLAG_UNUSED_0x2BA: u32 = 698;
pub const FLAG_UNUSED_0x2BB: u32 = 699;
pub const FLAG_HIDE_ROUTE_101_BIRCH_STARTERS_BAG: u32 = 700;
pub const FLAG_HIDE_APPRENTICE: u32 = 701;
pub const FLAG_HIDE_POKEMON_CENTER_2F_MYSTERY_GIFT_MAN: u32 = 702;
pub const FLAG_HIDE_UNION_ROOM_PLAYER_1: u32 = 703;
pub const FLAG_HIDE_UNION_ROOM_PLAYER_2: u32 = 704;
pub const FLAG_HIDE_UNION_ROOM_PLAYER_3: u32 = 705;
pub const FLAG_HIDE_UNION_ROOM_PLAYER_4: u32 = 706;
pub const FLAG_HIDE_UNION_ROOM_PLAYER_5: u32 = 707;
pub const FLAG_HIDE_UNION_ROOM_PLAYER_6: u32 = 708;
pub const FLAG_HIDE_UNION_ROOM_PLAYER_7: u32 = 709;
pub const FLAG_HIDE_UNION_ROOM_PLAYER_8: u32 = 710;
pub const FLAG_HIDE_BATTLE_TOWER_MULTI_BATTLE_PARTNER_1: u32 = 711;
pub const FLAG_HIDE_BATTLE_TOWER_MULTI_BATTLE_PARTNER_2: u32 = 712;
pub const FLAG_HIDE_BATTLE_TOWER_MULTI_BATTLE_PARTNER_3: u32 = 713;
pub const FLAG_HIDE_BATTLE_TOWER_MULTI_BATTLE_PARTNER_4: u32 = 714;
pub const FLAG_HIDE_BATTLE_TOWER_MULTI_BATTLE_PARTNER_5: u32 = 715;
pub const FLAG_HIDE_BATTLE_TOWER_MULTI_BATTLE_PARTNER_6: u32 = 716;
pub const FLAG_HIDE_SAFARI_ZONE_SOUTH_CONSTRUCTION_WORKERS: u32 = 717;
pub const FLAG_HIDE_MEW: u32 = 718;
pub const FLAG_HIDE_ROUTE_104_RIVAL: u32 = 719;
pub const FLAG_HIDE_ROUTE_101_BIRCH_ZIGZAGOON_BATTLE: u32 = 720;
pub const FLAG_HIDE_LITTLEROOT_TOWN_BIRCHS_LAB_BIRCH: u32 = 721;
pub const FLAG_HIDE_LITTLEROOT_TOWN_MAYS_HOUSE_RIVAL_BEDROOM: u32 = 722;
pub const FLAG_HIDE_ROUTE_103_RIVAL: u32 = 723;
pub const FLAG_HIDE_PETALBURG_WOODS_DEVON_EMPLOYEE: u32 = 724;
pub const FLAG_HIDE_PETALBURG_WOODS_AQUA_GRUNT: u32 = 725;
pub const FLAG_HIDE_PETALBURG_CITY_WALLY: u32 = 726;
pub const FLAG_HIDE_MOSSDEEP_CITY_STEVENS_HOUSE_INVISIBLE_NINJA_BOY: u32 = 727;
pub const FLAG_HIDE_PETALBURG_CITY_WALLYS_MOM: u32 = 728;
pub const FLAG_UNUSED_0x2D9: u32 = 729;
pub const FLAG_HIDE_LILYCOVE_FAN_CLUB_INTERVIEWER: u32 = 730;
pub const FLAG_HIDE_RUSTBORO_CITY_AQUA_GRUNT: u32 = 731;
pub const FLAG_HIDE_RUSTBORO_CITY_DEVON_EMPLOYEE_1: u32 = 732;
pub const FLAG_HIDE_SEAFLOOR_CAVERN_ROOM_9_KYOGRE_ASLEEP: u32 = 733;
pub const FLAG_HIDE_PLAYERS_HOUSE_DAD: u32 = 734;
pub const FLAG_HIDE_LITTLEROOT_TOWN_BRENDANS_HOUSE_RIVAL_SIBLING: u32 = 735;
pub const FLAG_HIDE_LITTLEROOT_TOWN_MAYS_HOUSE_RIVAL_SIBLING: u32 = 736;
pub const FLAG_HIDE_MOSSDEEP_CITY_SPACE_CENTER_MAGMA_NOTE: u32 = 737;
pub const FLAG_HIDE_ROUTE_104_MR_BRINEY: u32 = 738;
pub const FLAG_HIDE_BRINEYS_HOUSE_MR_BRINEY: u32 = 739;
pub const FLAG_HIDE_MR_BRINEY_DEWFORD_TOWN: u32 = 740;
pub const FLAG_HIDE_ROUTE_109_MR_BRINEY: u32 = 741;
pub const FLAG_HIDE_ROUTE_104_MR_BRINEY_BOAT: u32 = 742;
pub const FLAG_HIDE_MR_BRINEY_BOAT_DEWFORD_TOWN: u32 = 743;
pub const FLAG_HIDE_ROUTE_109_MR_BRINEY_BOAT: u32 = 744;
pub const FLAG_HIDE_LITTLEROOT_TOWN_BRENDANS_HOUSE_BRENDAN: u32 = 745;
pub const FLAG_HIDE_LITTLEROOT_TOWN_MAYS_HOUSE_MAY: u32 = 746;
pub const FLAG_HIDE_SAFARI_ZONE_SOUTH_EAST_EXPANSION: u32 = 747;
pub const FLAG_HIDE_LILYCOVE_HARBOR_EVENT_TICKET_TAKER: u32 = 748;
pub const FLAG_HIDE_SLATEPORT_CITY_SCOTT: u32 = 749;
pub const FLAG_HIDE_ROUTE_101_ZIGZAGOON: u32 = 750;
pub const FLAG_HIDE_VICTORY_ROAD_EXIT_WALLY: u32 = 751;
pub const FLAG_HIDE_LITTLEROOT_TOWN_MOM_OUTSIDE: u32 = 752;
pub const FLAG_HIDE_MOSSDEEP_CITY_SPACE_CENTER_1F_STEVEN: u32 = 753;
pub const FLAG_HIDE_LITTLEROOT_TOWN_PLAYERS_HOUSE_VIGOROTH_1: u32 = 754;
pub const FLAG_HIDE_LITTLEROOT_TOWN_PLAYERS_HOUSE_VIGOROTH_2: u32 = 755;
pub const FLAG_HIDE_MOSSDEEP_CITY_SPACE_CENTER_1F_TEAM_MAGMA: u32 = 756;
pub const FLAG_HIDE_LITTLEROOT_TOWN_PLAYERS_BEDROOM_MOM: u32 = 757;
pub const FLAG_HIDE_LITTLEROOT_TOWN_BRENDANS_HOUSE_MOM: u32 = 758;
pub const FLAG_HIDE_LITTLEROOT_TOWN_MAYS_HOUSE_MOM: u32 = 759;
pub const FLAG_HIDE_LITTLEROOT_TOWN_BRENDANS_HOUSE_RIVAL_BEDROOM: u32 = 760;
pub const FLAG_HIDE_LITTLEROOT_TOWN_BRENDANS_HOUSE_TRUCK: u32 = 761;
pub const FLAG_HIDE_LITTLEROOT_TOWN_MAYS_HOUSE_TRUCK: u32 = 762;
pub const FLAG_HIDE_DEOXYS: u32 = 763;
pub const FLAG_HIDE_BIRTH_ISLAND_DEOXYS_TRIANGLE: u32 = 764;
pub const FLAG_HIDE_MAUVILLE_CITY_SCOTT: u32 = 765;
pub const FLAG_HIDE_VERDANTURF_TOWN_SCOTT: u32 = 766;
pub const FLAG_HIDE_FALLARBOR_TOWN_BATTLE_TENT_SCOTT: u32 = 767;
pub const FLAG_HIDE_ROUTE_111_VICTOR_WINSTRATE: u32 = 768;
pub const FLAG_HIDE_ROUTE_111_VICTORIA_WINSTRATE: u32 = 769;
pub const FLAG_HIDE_ROUTE_111_VIVI_WINSTRATE: u32 = 770;
pub const FLAG_HIDE_ROUTE_111_VICKY_WINSTRATE: u32 = 771;
pub const FLAG_HIDE_PETALBURG_GYM_NORMAN: u32 = 772;
pub const FLAG_HIDE_SKY_PILLAR_TOP_RAYQUAZA: u32 = 773;
pub const FLAG_HIDE_LILYCOVE_CONTEST_HALL_CONTEST_ATTENDANT_1: u32 = 774;
pub const FLAG_HIDE_LILYCOVE_MUSEUM_CURATOR: u32 = 775;
pub const FLAG_HIDE_LILYCOVE_MUSEUM_PATRON_1: u32 = 776;
pub const FLAG_HIDE_LILYCOVE_MUSEUM_PATRON_2: u32 = 777;
pub const FLAG_HIDE_LILYCOVE_MUSEUM_PATRON_3: u32 = 778;
pub const FLAG_HIDE_LILYCOVE_MUSEUM_PATRON_4: u32 = 779;
pub const FLAG_HIDE_LILYCOVE_MUSEUM_TOURISTS: u32 = 780;
pub const FLAG_HIDE_PETALBURG_GYM_GREETER: u32 = 781;
pub const FLAG_HIDE_MARINE_CAVE_KYOGRE: u32 = 782;
pub const FLAG_HIDE_TERRA_CAVE_GROUDON: u32 = 783;
pub const FLAG_HIDE_LITTLEROOT_TOWN_BRENDANS_HOUSE_RIVAL_MOM: u32 = 784;
pub const FLAG_HIDE_LITTLEROOT_TOWN_MAYS_HOUSE_RIVAL_MOM: u32 = 785;
pub const FLAG_HIDE_ROUTE_119_SCOTT: u32 = 786;
pub const FLAG_HIDE_LILYCOVE_MOTEL_SCOTT: u32 = 787;
pub const FLAG_HIDE_MOSSDEEP_CITY_SCOTT: u32 = 788;
pub const FLAG_HIDE_FANCLUB_OLD_LADY: u32 = 789;
pub const FLAG_HIDE_FANCLUB_BOY: u32 = 790;
pub const FLAG_HIDE_FANCLUB_LITTLE_BOY: u32 = 791;
pub const FLAG_HIDE_FANCLUB_LADY: u32 = 792;
pub const FLAG_HIDE_EVER_GRANDE_POKEMON_CENTER_1F_SCOTT: u32 = 793;
pub const FLAG_HIDE_LITTLEROOT_TOWN_RIVAL: u32 = 794;
pub const FLAG_HIDE_LITTLEROOT_TOWN_BIRCH: u32 = 795;
pub const FLAG_HIDE_ROUTE_111_GABBY_AND_TY_1: u32 = 796;
pub const FLAG_HIDE_ROUTE_118_GABBY_AND_TY_1: u32 = 797;
pub const FLAG_HIDE_ROUTE_120_GABBY_AND_TY_1: u32 = 798;
pub const FLAG_HIDE_ROUTE_111_GABBY_AND_TY_3: u32 = 799;
pub const FLAG_HIDE_LUGIA: u32 = 800;
pub const FLAG_HIDE_HO_OH: u32 = 801;
pub const FLAG_HIDE_LILYCOVE_CONTEST_HALL_REPORTER: u32 = 802;
pub const FLAG_HIDE_SLATEPORT_CITY_CONTEST_REPORTER: u32 = 803;
pub const FLAG_HIDE_MAUVILLE_CITY_WALLY: u32 = 804;
pub const FLAG_HIDE_MAUVILLE_CITY_WALLYS_UNCLE: u32 = 805;
pub const FLAG_HIDE_VERDANTURF_TOWN_WANDAS_HOUSE_WALLY: u32 = 806;
pub const FLAG_HIDE_RUSTURF_TUNNEL_WANDAS_BOYFRIEND: u32 = 807;
pub const FLAG_HIDE_VERDANTURF_TOWN_WANDAS_HOUSE_WANDAS_BOYFRIEND: u32 = 808;
pub const FLAG_HIDE_VERDANTURF_TOWN_WANDAS_HOUSE_WALLYS_UNCLE: u32 = 809;
pub const FLAG_HIDE_SS_TIDAL_CORRIDOR_SCOTT: u32 = 810;
pub const FLAG_HIDE_LITTLEROOT_TOWN_BIRCHS_LAB_POKEBALL_CYNDAQUIL: u32 = 811;
pub const FLAG_HIDE_LITTLEROOT_TOWN_BIRCHS_LAB_POKEBALL_TOTODILE: u32 = 812;
pub const FLAG_HIDE_ROUTE_116_DROPPED_GLASSES_MAN: u32 = 813;
pub const FLAG_HIDE_RUSTBORO_CITY_RIVAL: u32 = 814;
pub const FLAG_HIDE_LITTLEROOT_TOWN_BRENDANS_HOUSE_2F_SWABLU_DOLL: u32 = 815;
pub const FLAG_HIDE_SOOTOPOLIS_CITY_WALLACE: u32 = 816;
pub const FLAG_HIDE_LITTLEROOT_TOWN_BRENDANS_HOUSE_2F_POKE_BALL: u32 = 817;
pub const FLAG_HIDE_LITTLEROOT_TOWN_MAYS_HOUSE_2F_POKE_BALL: u32 = 818;
pub const FLAG_HIDE_ROUTE_112_TEAM_MAGMA: u32 = 819;
pub const FLAG_HIDE_CAVE_OF_ORIGIN_B1F_WALLACE: u32 = 820;
pub const FLAG_HIDE_AQUA_HIDEOUT_1F_GRUNT_1_BLOCKING_ENTRANCE: u32 = 821;
pub const FLAG_HIDE_AQUA_HIDEOUT_1F_GRUNT_2_BLOCKING_ENTRANCE: u32 = 822;
pub const FLAG_HIDE_MOSSDEEP_CITY_TEAM_MAGMA: u32 = 823;
pub const FLAG_HIDE_PETALBURG_GYM_RIVAL_FIGHT: u32 = 824;
pub const FLAG_HIDE_LEGEND_MON_CAVE_OF_ORIGIN: u32 = 825;
pub const FLAG_HIDE_SOOTOPOLIS_CITY_ARCHIE: u32 = 826;
pub const FLAG_HIDE_SOOTOPOLIS_CITY_MAXIE: u32 = 827;
pub const FLAG_HIDE_SEAFLOOR_CAVERN_ROOM_9_ARCHIE: u32 = 828;
pub const FLAG_HIDE_SEAFLOOR_CAVERN_ROOM_9_MAXIE: u32 = 829;
pub const FLAG_HIDE_PETALBURG_CITY_WALLYS_DAD: u32 = 830;
pub const FLAG_HIDE_SEAFLOOR_CAVERN_ROOM_9_MAGMA_GRUNTS: u32 = 831;
pub const FLAG_HIDE_LILYCOVE_CONTEST_HALL_BLEND_MASTER: u32 = 832;
pub const FLAG_HIDE_GRANITE_CAVE_STEVEN: u32 = 833;
pub const FLAG_HIDE_ROUTE_128_STEVEN: u32 = 834;
pub const FLAG_HIDE_SLATEPORT_CITY_GABBY_AND_TY: u32 = 835;
pub const FLAG_HIDE_BATTLE_FRONTIER_RECEPTION_GATE_SCOTT: u32 = 836;
pub const FLAG_HIDE_ROUTE_110_BIRCH: u32 = 837;
pub const FLAG_HIDE_LITTLEROOT_TOWN_BIRCHS_LAB_POKEBALL_CHIKORITA: u32 = 838;
pub const FLAG_HIDE_SOOTOPOLIS_CITY_MAN_1: u32 = 839;
pub const FLAG_HIDE_SLATEPORT_CITY_CAPTAIN_STERN: u32 = 840;
pub const FLAG_HIDE_SLATEPORT_CITY_HARBOR_CAPTAIN_STERN: u32 = 841;
pub const FLAG_HIDE_BATTLE_FRONTIER_SUDOWOODO: u32 = 842;
pub const FLAG_HIDE_ROUTE_111_ROCK_SMASH_TIP_GUY: u32 = 843;
pub const FLAG_HIDE_RUSTBORO_CITY_SCIENTIST: u32 = 844;
pub const FLAG_HIDE_SLATEPORT_CITY_HARBOR_AQUA_GRUNT: u32 = 845;
pub const FLAG_HIDE_SLATEPORT_CITY_HARBOR_ARCHIE: u32 = 846;
pub const FLAG_HIDE_JAGGED_PASS_MAGMA_GUARD: u32 = 847;
pub const FLAG_HIDE_SLATEPORT_CITY_HARBOR_SUBMARINE_SHADOW: u32 = 848;
pub const FLAG_HIDE_LITTLEROOT_TOWN_MAYS_HOUSE_2F_PICHU_DOLL: u32 = 849;
pub const FLAG_HIDE_MAGMA_HIDEOUT_4F_GROUDON_ASLEEP: u32 = 850;
pub const FLAG_HIDE_ROUTE_119_RIVAL: u32 = 851;
pub const FLAG_HIDE_LILYCOVE_CITY_AQUA_GRUNTS: u32 = 852;
pub const FLAG_HIDE_MAGMA_HIDEOUT_4F_GROUDON: u32 = 853;
pub const FLAG_HIDE_SOOTOPOLIS_CITY_RESIDENTS: u32 = 854;
pub const FLAG_HIDE_SKY_PILLAR_WALLACE: u32 = 855;
pub const FLAG_HIDE_MT_PYRE_SUMMIT_MAXIE: u32 = 856;
pub const FLAG_HIDE_MAGMA_HIDEOUT_GRUNTS: u32 = 857;
pub const FLAG_HIDE_VICTORY_ROAD_ENTRANCE_WALLY: u32 = 858;
pub const FLAG_HIDE_SEAFLOOR_CAVERN_ROOM_9_KYOGRE: u32 = 859;
pub const FLAG_HIDE_SLATEPORT_CITY_HARBOR_SS_TIDAL: u32 = 860;
pub const FLAG_HIDE_LILYCOVE_HARBOR_SSTIDAL: u32 = 861;
pub const FLAG_HIDE_MOSSDEEP_CITY_SPACE_CENTER_2F_TEAM_MAGMA: u32 = 862;
pub const FLAG_HIDE_MOSSDEEP_CITY_SPACE_CENTER_2F_STEVEN: u32 = 863;
pub const FLAG_HIDE_BATTLE_TOWER_MULTI_BATTLE_PARTNER_ALT_1: u32 = 864;
pub const FLAG_HIDE_BATTLE_TOWER_MULTI_BATTLE_PARTNER_ALT_2: u32 = 865;
pub const FLAG_HIDE_PETALBURG_GYM_WALLY: u32 = 866;
pub const FLAG_UNKNOWN_0x363: u32 = 867;
pub const FLAG_HIDE_LITTLEROOT_TOWN_FAT_MAN: u32 = 868;
pub const FLAG_HIDE_SLATEPORT_CITY_STERNS_SHIPYARD_MR_BRINEY: u32 = 869;
pub const FLAG_HIDE_LANETTES_HOUSE_LANETTE: u32 = 870;
pub const FLAG_HIDE_FALLARBOR_POKEMON_CENTER_LANETTE: u32 = 871;
pub const FLAG_HIDE_TRICK_HOUSE_ENTRANCE_MAN: u32 = 872;
pub const FLAG_HIDE_LILYCOVE_CONTEST_HALL_BLEND_MASTER_REPLACEMENT: u32 = 873;
pub const FLAG_HIDE_DESERT_UNDERPASS_FOSSIL: u32 = 874;
pub const FLAG_HIDE_ROUTE_111_PLAYER_DESCENT: u32 = 875;
pub const FLAG_HIDE_ROUTE_111_DESERT_FOSSIL: u32 = 876;
pub const FLAG_HIDE_MT_CHIMNEY_TRAINERS: u32 = 877;
pub const FLAG_HIDE_RUSTURF_TUNNEL_AQUA_GRUNT: u32 = 878;
pub const FLAG_HIDE_RUSTURF_TUNNEL_BRINEY: u32 = 879;
pub const FLAG_HIDE_RUSTURF_TUNNEL_PEEKO: u32 = 880;
pub const FLAG_HIDE_BRINEYS_HOUSE_PEEKO: u32 = 881;
pub const FLAG_HIDE_SLATEPORT_CITY_TEAM_AQUA: u32 = 882;
pub const FLAG_HIDE_SLATEPORT_CITY_OCEANIC_MUSEUM_AQUA_GRUNTS: u32 = 883;
pub const FLAG_HIDE_SLATEPORT_CITY_OCEANIC_MUSEUM_2F_AQUA_GRUNT_1: u32 = 884;
pub const FLAG_HIDE_SLATEPORT_CITY_OCEANIC_MUSEUM_2F_AQUA_GRUNT_2: u32 = 885;
pub const FLAG_HIDE_SLATEPORT_CITY_OCEANIC_MUSEUM_2F_ARCHIE: u32 = 886;
pub const FLAG_HIDE_SLATEPORT_CITY_OCEANIC_MUSEUM_2F_CAPTAIN_STERN: u32 = 887;
pub const FLAG_HIDE_BATTLE_TOWER_OPPONENT: u32 = 888;
pub const FLAG_HIDE_LITTLEROOT_TOWN_BIRCHS_LAB_RIVAL: u32 = 889;
pub const FLAG_HIDE_ROUTE_119_TEAM_AQUA: u32 = 890;
pub const FLAG_HIDE_ROUTE_116_MR_BRINEY: u32 = 891;
pub const FLAG_HIDE_WEATHER_INSTITUTE_1F_WORKERS: u32 = 892;
pub const FLAG_HIDE_WEATHER_INSTITUTE_2F_WORKERS: u32 = 893;
pub const FLAG_HIDE_ROUTE_116_WANDAS_BOYFRIEND: u32 = 894;
pub const FLAG_HIDE_LILYCOVE_CONTEST_HALL_CONTEST_ATTENDANT_2: u32 = 895;
pub const FLAG_HIDE_LITTLEROOT_TOWN_BIRCHS_LAB_UNKNOWN_0x380: u32 = 896;
pub const FLAG_HIDE_ROUTE_101_BIRCH: u32 = 897;
pub const FLAG_HIDE_ROUTE_103_BIRCH: u32 = 898;
pub const FLAG_HIDE_TRICK_HOUSE_END_MAN: u32 = 899;
pub const FLAG_HIDE_ROUTE_110_TEAM_AQUA: u32 = 900;
pub const FLAG_HIDE_ROUTE_118_GABBY_AND_TY_2: u32 = 901;
pub const FLAG_HIDE_ROUTE_120_GABBY_AND_TY_2: u32 = 902;
pub const FLAG_HIDE_ROUTE_111_GABBY_AND_TY_2: u32 = 903;
pub const FLAG_HIDE_ROUTE_118_GABBY_AND_TY_3: u32 = 904;
pub const FLAG_HIDE_SLATEPORT_CITY_HARBOR_PATRONS: u32 = 905;
pub const FLAG_HIDE_ROUTE_104_WHITE_HERB_FLORIST: u32 = 906;
pub const FLAG_HIDE_FALLARBOR_AZURILL: u32 = 907;
pub const FLAG_HIDE_LILYCOVE_HARBOR_FERRY_ATTENDANT: u32 = 908;
pub const FLAG_HIDE_LILYCOVE_HARBOR_FERRY_SAILOR: u32 = 909;
pub const FLAG_HIDE_SOUTHERN_ISLAND_EON_STONE: u32 = 910;
pub const FLAG_HIDE_SOUTHERN_ISLAND_UNCHOSEN_EON_DUO_MON: u32 = 911;
pub const FLAG_HIDE_MAUVILLE_CITY_WATTSON: u32 = 912;
pub const FLAG_HIDE_MAUVILLE_GYM_WATTSON: u32 = 913;
pub const FLAG_HIDE_ROUTE_121_TEAM_AQUA_GRUNTS: u32 = 914;
pub const FLAG_UNKNOWN_0x393: u32 = 915;
pub const FLAG_HIDE_MT_PYRE_SUMMIT_ARCHIE: u32 = 916;
pub const FLAG_HIDE_MT_PYRE_SUMMIT_TEAM_AQUA: u32 = 917;
pub const FLAG_HIDE_BATTLE_TOWER_REPORTER: u32 = 918;
pub const FLAG_HIDE_ROUTE_110_RIVAL: u32 = 919;
pub const FLAG_HIDE_CHAMPIONS_ROOM_RIVAL: u32 = 920;
pub const FLAG_HIDE_CHAMPIONS_ROOM_BIRCH: u32 = 921;
pub const FLAG_HIDE_ROUTE_110_RIVAL_ON_BIKE: u32 = 922;
pub const FLAG_HIDE_ROUTE_119_RIVAL_ON_BIKE: u32 = 923;
pub const FLAG_HIDE_AQUA_HIDEOUT_GRUNTS: u32 = 924;
pub const FLAG_HIDE_LILYCOVE_MOTEL_GAME_DESIGNERS: u32 = 925;
pub const FLAG_HIDE_MT_CHIMNEY_TEAM_AQUA: u32 = 926;
pub const FLAG_HIDE_MT_CHIMNEY_TEAM_MAGMA: u32 = 927;
pub const FLAG_HIDE_FALLARBOR_HOUSE_PROF_COZMO: u32 = 928;
pub const FLAG_HIDE_LAVARIDGE_TOWN_RIVAL: u32 = 929;
pub const FLAG_HIDE_LAVARIDGE_TOWN_RIVAL_ON_BIKE: u32 = 930;
pub const FLAG_HIDE_RUSTURF_TUNNEL_ROCK_1: u32 = 931;
pub const FLAG_HIDE_RUSTURF_TUNNEL_ROCK_2: u32 = 932;
pub const FLAG_HIDE_FORTREE_CITY_HOUSE_4_WINGULL: u32 = 933;
pub const FLAG_HIDE_MOSSDEEP_CITY_HOUSE_2_WINGULL: u32 = 934;
pub const FLAG_HIDE_REGIROCK: u32 = 935;
pub const FLAG_HIDE_REGICE: u32 = 936;
pub const FLAG_HIDE_REGISTEEL: u32 = 937;
pub const FLAG_HIDE_METEOR_FALLS_TEAM_AQUA: u32 = 938;
pub const FLAG_HIDE_METEOR_FALLS_TEAM_MAGMA: u32 = 939;
pub const FLAG_HIDE_DEWFORD_HALL_SLUDGE_BOMB_MAN: u32 = 940;
pub const FLAG_HIDE_SEAFLOOR_CAVERN_ENTRANCE_AQUA_GRUNT: u32 = 941;
pub const FLAG_HIDE_METEOR_FALLS_1F_1R_COZMO: u32 = 942;
pub const FLAG_HIDE_AQUA_HIDEOUT_B2F_SUBMARINE_SHADOW: u32 = 943;
pub const FLAG_HIDE_ROUTE_128_ARCHIE: u32 = 944;
pub const FLAG_HIDE_ROUTE_128_MAXIE: u32 = 945;
pub const FLAG_HIDE_SEAFLOOR_CAVERN_AQUA_GRUNTS: u32 = 946;
pub const FLAG_HIDE_ROUTE_116_DEVON_EMPLOYEE: u32 = 947;
pub const FLAG_HIDE_SLATEPORT_CITY_TM_SALESMAN: u32 = 948;
pub const FLAG_HIDE_RUSTBORO_CITY_DEVON_CORP_3F_EMPLOYEE: u32 = 949;
pub const FLAG_HIDE_SS_TIDAL_CORRIDOR_MR_BRINEY: u32 = 950;
pub const FLAG_HIDE_SS_TIDAL_ROOMS_SNATCH_GIVER: u32 = 951;
pub const FLAG_RECEIVED_SHOAL_SALT_1: u32 = 952;
pub const FLAG_RECEIVED_SHOAL_SALT_2: u32 = 953;
pub const FLAG_RECEIVED_SHOAL_SALT_3: u32 = 954;
pub const FLAG_RECEIVED_SHOAL_SALT_4: u32 = 955;
pub const FLAG_RECEIVED_SHOAL_SHELL_1: u32 = 956;
pub const FLAG_RECEIVED_SHOAL_SHELL_2: u32 = 957;
pub const FLAG_RECEIVED_SHOAL_SHELL_3: u32 = 958;
pub const FLAG_RECEIVED_SHOAL_SHELL_4: u32 = 959;
pub const FLAG_HIDE_ROUTE_111_SECRET_POWER_MAN: u32 = 960;
pub const FLAG_HIDE_SLATEPORT_MUSEUM_POPULATION: u32 = 961;
pub const FLAG_HIDE_LILYCOVE_DEPARTMENT_STORE_ROOFTOP_SALE_WOMAN: u32 = 962;
pub const FLAG_HIDE_MIRAGE_TOWER_ROOT_FOSSIL: u32 = 963;
pub const FLAG_HIDE_MIRAGE_TOWER_CLAW_FOSSIL: u32 = 964;
pub const FLAG_HIDE_SLATEPORT_CITY_OCEANIC_MUSEUM_FAMILIAR_AQUA_GRUNT: u32 = 965;
pub const FLAG_HIDE_ROUTE_118_STEVEN: u32 = 966;
pub const FLAG_HIDE_MOSSDEEP_CITY_STEVENS_HOUSE_STEVEN: u32 = 967;
pub const FLAG_HIDE_MOSSDEEP_CITY_STEVENS_HOUSE_BELDUM_POKEBALL: u32 = 968;
pub const FLAG_HIDE_FORTREE_CITY_KECLEON: u32 = 969;
pub const FLAG_HIDE_ROUTE_120_KECLEON_BRIDGE: u32 = 970;
pub const FLAG_HIDE_LILYCOVE_CITY_RIVAL: u32 = 971;
pub const FLAG_HIDE_ROUTE_120_STEVEN: u32 = 972;
pub const FLAG_HIDE_SOOTOPOLIS_CITY_STEVEN: u32 = 973;
pub const FLAG_HIDE_NEW_MAUVILLE_VOLTORB_1: u32 = 974;
pub const FLAG_HIDE_NEW_MAUVILLE_VOLTORB_2: u32 = 975;
pub const FLAG_HIDE_NEW_MAUVILLE_VOLTORB_3: u32 = 976;
pub const FLAG_HIDE_AQUA_HIDEOUT_B1F_ELECTRODE_1: u32 = 977;
pub const FLAG_HIDE_AQUA_HIDEOUT_B1F_ELECTRODE_2: u32 = 978;
pub const FLAG_HIDE_OLDALE_TOWN_RIVAL: u32 = 979;
pub const FLAG_HIDE_UNDERWATER_SEA_FLOOR_CAVERN_STOLEN_SUBMARINE: u32 = 980;
pub const FLAG_HIDE_ROUTE_120_KECLEON_BRIDGE_SHADOW: u32 = 981;
pub const FLAG_HIDE_ROUTE_120_KECLEON_1: u32 = 982;
pub const FLAG_HIDE_RUSTURF_TUNNEL_WANDA: u32 = 983;
pub const FLAG_HIDE_VERDANTURF_TOWN_WANDAS_HOUSE_WANDA: u32 = 984;
pub const FLAG_HIDE_ROUTE_120_KECLEON_2: u32 = 985;
pub const FLAG_HIDE_ROUTE_120_KECLEON_3: u32 = 986;
pub const FLAG_HIDE_ROUTE_120_KECLEON_4: u32 = 987;
pub const FLAG_HIDE_ROUTE_120_KECLEON_5: u32 = 988;
pub const FLAG_HIDE_ROUTE_119_KECLEON_1: u32 = 989;
pub const FLAG_HIDE_ROUTE_119_KECLEON_2: u32 = 990;
pub const FLAG_HIDE_ROUTE_101_BOY: u32 = 991;
pub const FLAG_HIDE_WEATHER_INSTITUTE_2F_AQUA_GRUNT_M: u32 = 992;
pub const FLAG_HIDE_LILYCOVE_POKEMON_CENTER_CONTEST_LADY_MON: u32 = 993;
pub const FLAG_HIDE_MT_CHIMNEY_LAVA_COOKIE_LADY: u32 = 994;
pub const FLAG_HIDE_PETALBURG_CITY_SCOTT: u32 = 995;
pub const FLAG_HIDE_SOOTOPOLIS_CITY_RAYQUAZA: u32 = 996;
pub const FLAG_HIDE_SOOTOPOLIS_CITY_KYOGRE: u32 = 997;
pub const FLAG_HIDE_SOOTOPOLIS_CITY_GROUDON: u32 = 998;
pub const FLAG_HIDE_RUSTBORO_CITY_POKEMON_SCHOOL_SCOTT: u32 = 999;
pub const FLAG_ITEM_ROUTE_102_POTION: u32 = 1000;
pub const FLAG_ITEM_ROUTE_116_X_SPECIAL: u32 = 1001;
pub const FLAG_ITEM_ROUTE_104_PP_UP: u32 = 1002;
pub const FLAG_ITEM_ROUTE_105_IRON: u32 = 1003;
pub const FLAG_ITEM_ROUTE_106_PROTEIN: u32 = 1004;
pub const FLAG_ITEM_ROUTE_109_PP_UP: u32 = 1005;
pub const FLAG_ITEM_ROUTE_110_RARE_CANDY: u32 = 1006;
pub const FLAG_ITEM_ROUTE_110_DIRE_HIT: u32 = 1007;
pub const FLAG_ITEM_ROUTE_111_TM_SANDSTORM: u32 = 1008;
pub const FLAG_ITEM_ROUTE_111_STARDUST: u32 = 1009;
pub const FLAG_ITEM_ROUTE_111_HP_UP: u32 = 1010;
pub const FLAG_ITEM_ROUTE_112_NUGGET: u32 = 1011;
pub const FLAG_ITEM_ROUTE_113_MAX_ETHER: u32 = 1012;
pub const FLAG_ITEM_ROUTE_113_SUPER_REPEL: u32 = 1013;
pub const FLAG_ITEM_ROUTE_114_RARE_CANDY: u32 = 1014;
pub const FLAG_ITEM_ROUTE_114_PROTEIN: u32 = 1015;
pub const FLAG_ITEM_ROUTE_115_SUPER_POTION: u32 = 1016;
pub const FLAG_ITEM_ROUTE_115_TM_FOCUS_PUNCH: u32 = 1017;
pub const FLAG_ITEM_ROUTE_115_IRON: u32 = 1018;
pub const FLAG_ITEM_ROUTE_116_ETHER: u32 = 1019;
pub const FLAG_ITEM_ROUTE_116_REPEL: u32 = 1020;
pub const FLAG_ITEM_ROUTE_116_HP_UP: u32 = 1021;
pub const FLAG_ITEM_ROUTE_117_GREAT_BALL: u32 = 1022;
pub const FLAG_ITEM_ROUTE_117_REVIVE: u32 = 1023;
pub const FLAG_ITEM_ROUTE_119_SUPER_REPEL: u32 = 1024;
pub const FLAG_ITEM_ROUTE_119_ZINC: u32 = 1025;
pub const FLAG_ITEM_ROUTE_119_ELIXIR_1: u32 = 1026;
pub const FLAG_ITEM_ROUTE_119_LEAF_STONE: u32 = 1027;
pub const FLAG_ITEM_ROUTE_119_RARE_CANDY: u32 = 1028;
pub const FLAG_ITEM_ROUTE_119_HYPER_POTION_1: u32 = 1029;
pub const FLAG_ITEM_ROUTE_120_NUGGET: u32 = 1030;
pub const FLAG_ITEM_ROUTE_120_FULL_HEAL: u32 = 1031;
pub const FLAG_ITEM_ROUTE_123_CALCIUM: u32 = 1032;
pub const FLAG_ITEM_ROUTE_123_RARE_CANDY: u32 = 1033;
pub const FLAG_ITEM_ROUTE_127_ZINC: u32 = 1034;
pub const FLAG_ITEM_ROUTE_127_CARBOS: u32 = 1035;
pub const FLAG_ITEM_ROUTE_132_RARE_CANDY: u32 = 1036;
pub const FLAG_ITEM_ROUTE_133_BIG_PEARL: u32 = 1037;
pub const FLAG_ITEM_ROUTE_133_STAR_PIECE: u32 = 1038;
pub const FLAG_ITEM_PETALBURG_CITY_MAX_REVIVE: u32 = 1039;
pub const FLAG_ITEM_PETALBURG_CITY_ETHER: u32 = 1040;
pub const FLAG_ITEM_RUSTBORO_CITY_X_DEFEND: u32 = 1041;
pub const FLAG_ITEM_LILYCOVE_CITY_MAX_REPEL: u32 = 1042;
pub const FLAG_ITEM_MOSSDEEP_CITY_NET_BALL: u32 = 1043;
pub const FLAG_ITEM_METEOR_FALLS_1F_1R_TM_IRON_TAIL: u32 = 1044;
pub const FLAG_ITEM_METEOR_FALLS_1F_1R_FULL_HEAL: u32 = 1045;
pub const FLAG_ITEM_METEOR_FALLS_1F_1R_MOON_STONE: u32 = 1046;
pub const FLAG_ITEM_METEOR_FALLS_1F_1R_PP_UP: u32 = 1047;
pub const FLAG_ITEM_RUSTURF_TUNNEL_POKE_BALL: u32 = 1048;
pub const FLAG_ITEM_RUSTURF_TUNNEL_MAX_ETHER: u32 = 1049;
pub const FLAG_ITEM_GRANITE_CAVE_1F_ESCAPE_ROPE: u32 = 1050;
pub const FLAG_ITEM_GRANITE_CAVE_B1F_POKE_BALL: u32 = 1051;
pub const FLAG_ITEM_MT_PYRE_5F_LAX_INCENSE: u32 = 1052;
pub const FLAG_ITEM_GRANITE_CAVE_B2F_REPEL: u32 = 1053;
pub const FLAG_ITEM_GRANITE_CAVE_B2F_RARE_CANDY: u32 = 1054;
pub const FLAG_ITEM_PETALBURG_WOODS_X_ATTACK: u32 = 1055;
pub const FLAG_ITEM_PETALBURG_WOODS_GREAT_BALL: u32 = 1056;
pub const FLAG_ITEM_ROUTE_104_POKE_BALL: u32 = 1057;
pub const FLAG_ITEM_PETALBURG_WOODS_ETHER: u32 = 1058;
pub const FLAG_ITEM_MAGMA_HIDEOUT_3F_3R_ECAPE_ROPE: u32 = 1059;
pub const FLAG_ITEM_TRICK_HOUSE_PUZZLE_1_ORANGE_MAIL: u32 = 1060;
pub const FLAG_ITEM_TRICK_HOUSE_PUZZLE_2_HARBOR_MAIL: u32 = 1061;
pub const FLAG_ITEM_TRICK_HOUSE_PUZZLE_2_WAVE_MAIL: u32 = 1062;
pub const FLAG_ITEM_TRICK_HOUSE_PUZZLE_3_SHADOW_MAIL: u32 = 1063;
pub const FLAG_ITEM_TRICK_HOUSE_PUZZLE_3_WOOD_MAIL: u32 = 1064;
pub const FLAG_ITEM_TRICK_HOUSE_PUZZLE_4_MECH_MAIL: u32 = 1065;
pub const FLAG_ITEM_ROUTE_124_YELLOW_SHARD: u32 = 1066;
pub const FLAG_ITEM_TRICK_HOUSE_PUZZLE_6_GLITTER_MAIL: u32 = 1067;
pub const FLAG_ITEM_TRICK_HOUSE_PUZZLE_7_TROPIC_MAIL: u32 = 1068;
pub const FLAG_ITEM_TRICK_HOUSE_PUZZLE_8_BEAD_MAIL: u32 = 1069;
pub const FLAG_ITEM_JAGGED_PASS_BURN_HEAL: u32 = 1070;
pub const FLAG_ITEM_AQUA_HIDEOUT_B1F_MAX_ELIXIR: u32 = 1071;
pub const FLAG_ITEM_AQUA_HIDEOUT_B2F_NEST_BALL: u32 = 1072;
pub const FLAG_ITEM_MT_PYRE_EXTERIOR_MAX_POTION: u32 = 1073;
pub const FLAG_ITEM_MT_PYRE_EXTERIOR_TM_SKILL_SWAP: u32 = 1074;
pub const FLAG_ITEM_NEW_MAUVILLE_ULTRA_BALL: u32 = 1075;
pub const FLAG_ITEM_NEW_MAUVILLE_ESCAPE_ROPE: u32 = 1076;
pub const FLAG_ITEM_ABANDONED_SHIP_HIDDEN_FLOOR_ROOM_6_LUXURY_BALL: u32 = 1077;
pub const FLAG_ITEM_ABANDONED_SHIP_HIDDEN_FLOOR_ROOM_2_SCANNER: u32 = 1078;
pub const FLAG_ITEM_SCORCHED_SLAB_TM_SUNNY_DAY: u32 = 1079;
pub const FLAG_ITEM_METEOR_FALLS_B1F_2R_TM_DRAGON_CLAW: u32 = 1080;
pub const FLAG_ITEM_SHOAL_CAVE_ENTRANCE_BIG_PEARL: u32 = 1081;
pub const FLAG_ITEM_SHOAL_CAVE_INNER_ROOM_RARE_CANDY: u32 = 1082;
pub const FLAG_ITEM_SHOAL_CAVE_STAIRS_ROOM_ICE_HEAL: u32 = 1083;
pub const FLAG_ITEM_VICTORY_ROAD_1F_MAX_ELIXIR: u32 = 1084;
pub const FLAG_ITEM_VICTORY_ROAD_1F_PP_UP: u32 = 1085;
pub const FLAG_ITEM_VICTORY_ROAD_B1F_TM_PSYCHIC: u32 = 1086;
pub const FLAG_ITEM_VICTORY_ROAD_B1F_FULL_RESTORE: u32 = 1087;
pub const FLAG_ITEM_VICTORY_ROAD_B2F_FULL_HEAL: u32 = 1088;
pub const FLAG_ITEM_MT_PYRE_6F_TM_SHADOW_BALL: u32 = 1089;
pub const FLAG_ITEM_SEAFLOOR_CAVERN_ROOM_9_TM_EARTHQUAKE: u32 = 1090;
pub const FLAG_ITEM_FIERY_PATH_TM_TOXIC: u32 = 1091;
pub const FLAG_ITEM_ROUTE_124_RED_SHARD: u32 = 1092;
pub const FLAG_ITEM_ROUTE_124_BLUE_SHARD: u32 = 1093;
pub const FLAG_ITEM_SAFARI_ZONE_NORTH_WEST_TM_SOLAR_BEAM: u32 = 1094;
pub const FLAG_ITEM_ABANDONED_SHIP_ROOMS_1F_HARBOR_MAIL: u32 = 1095;
pub const FLAG_ITEM_ABANDONED_SHIP_ROOMS_B1F_ESCAPE_ROPE: u32 = 1096;
pub const FLAG_ITEM_ABANDONED_SHIP_ROOMS_2_B1F_DIVE_BALL: u32 = 1097;
pub const FLAG_ITEM_ABANDONED_SHIP_ROOMS_B1F_TM_ICE_BEAM: u32 = 1098;
pub const FLAG_ITEM_ABANDONED_SHIP_ROOMS_2_1F_REVIVE: u32 = 1099;
pub const FLAG_ITEM_ABANDONED_SHIP_CAPTAINS_OFFICE_STORAGE_KEY: u32 = 1100;
pub const FLAG_ITEM_ABANDONED_SHIP_HIDDEN_FLOOR_ROOM_3_WATER_STONE: u32 = 1101;
pub const FLAG_ITEM_ABANDONED_SHIP_HIDDEN_FLOOR_ROOM_1_TM_RAIN_DANCE: u32 = 1102;
pub const FLAG_ITEM_ROUTE_121_CARBOS: u32 = 1103;
pub const FLAG_ITEM_ROUTE_123_ULTRA_BALL: u32 = 1104;
pub const FLAG_ITEM_ROUTE_126_GREEN_SHARD: u32 = 1105;
pub const FLAG_ITEM_ROUTE_119_HYPER_POTION_2: u32 = 1106;
pub const FLAG_ITEM_ROUTE_120_HYPER_POTION: u32 = 1107;
pub const FLAG_ITEM_ROUTE_120_NEST_BALL: u32 = 1108;
pub const FLAG_ITEM_ROUTE_123_ELIXIR: u32 = 1109;
pub const FLAG_ITEM_NEW_MAUVILLE_THUNDER_STONE: u32 = 1110;
pub const FLAG_ITEM_FIERY_PATH_FIRE_STONE: u32 = 1111;
pub const FLAG_ITEM_SHOAL_CAVE_ICE_ROOM_TM_HAIL: u32 = 1112;
pub const FLAG_ITEM_SHOAL_CAVE_ICE_ROOM_NEVER_MELT_ICE: u32 = 1113;
pub const FLAG_ITEM_ROUTE_103_GUARD_SPEC: u32 = 1114;
pub const FLAG_ITEM_ROUTE_104_X_ACCURACY: u32 = 1115;
pub const FLAG_ITEM_MAUVILLE_CITY_X_SPEED: u32 = 1116;
pub const FLAG_ITEM_PETALBURG_WOODS_PARALYZE_HEAL: u32 = 1117;
pub const FLAG_ITEM_ROUTE_115_GREAT_BALL: u32 = 1118;
pub const FLAG_ITEM_SAFARI_ZONE_NORTH_CALCIUM: u32 = 1119;
pub const FLAG_ITEM_MT_PYRE_3F_SUPER_REPEL: u32 = 1120;
pub const FLAG_ITEM_ROUTE_118_HYPER_POTION: u32 = 1121;
pub const FLAG_ITEM_NEW_MAUVILLE_FULL_HEAL: u32 = 1122;
pub const FLAG_ITEM_NEW_MAUVILLE_PARALYZE_HEAL: u32 = 1123;
pub const FLAG_ITEM_AQUA_HIDEOUT_B1F_MASTER_BALL: u32 = 1124;
pub const FLAG_ITEM_OLD_MAGMA_HIDEOUT_B1F_MASTER_BALL: u32 = 1125;
pub const FLAG_ITEM_OLD_MAGMA_HIDEOUT_B1F_MAX_ELIXIR: u32 = 1126;
pub const FLAG_ITEM_OLD_MAGMA_HIDEOUT_B2F_NEST_BALL: u32 = 1127;
pub const FLAG_UNUSED_0x468: u32 = 1128;
pub const FLAG_ITEM_MT_PYRE_2F_ULTRA_BALL: u32 = 1129;
pub const FLAG_ITEM_MT_PYRE_4F_SEA_INCENSE: u32 = 1130;
pub const FLAG_ITEM_SAFARI_ZONE_SOUTH_WEST_MAX_REVIVE: u32 = 1131;
pub const FLAG_ITEM_AQUA_HIDEOUT_B1F_NUGGET: u32 = 1132;
pub const FLAG_ITEM_MOSSDEEP_STEVENS_HOUSE_HM08: u32 = 1133;
pub const FLAG_ITEM_ROUTE_119_NUGGET: u32 = 1134;
pub const FLAG_ITEM_ROUTE_104_POTION: u32 = 1135;
pub const FLAG_UNUSED_0x470: u32 = 1136;
pub const FLAG_ITEM_ROUTE_103_PP_UP: u32 = 1137;
pub const FLAG_UNUSED_0x472: u32 = 1138;
pub const FLAG_ITEM_ROUTE_108_STAR_PIECE: u32 = 1139;
pub const FLAG_ITEM_ROUTE_109_POTION: u32 = 1140;
pub const FLAG_ITEM_ROUTE_110_ELIXIR: u32 = 1141;
pub const FLAG_ITEM_ROUTE_111_ELIXIR: u32 = 1142;
pub const FLAG_ITEM_ROUTE_113_HYPER_POTION: u32 = 1143;
pub const FLAG_ITEM_ROUTE_115_HEAL_POWDER: u32 = 1144;
pub const FLAG_UNUSED_0x479: u32 = 1145;
pub const FLAG_ITEM_ROUTE_116_POTION: u32 = 1146;
pub const FLAG_ITEM_ROUTE_119_ELIXIR_2: u32 = 1147;
pub const FLAG_ITEM_ROUTE_120_REVIVE: u32 = 1148;
pub const FLAG_ITEM_ROUTE_121_REVIVE: u32 = 1149;
pub const FLAG_ITEM_ROUTE_121_ZINC: u32 = 1150;
pub const FLAG_ITEM_MAGMA_HIDEOUT_1F_RARE_CANDY: u32 = 1151;
pub const FLAG_ITEM_ROUTE_123_PP_UP: u32 = 1152;
pub const FLAG_ITEM_ROUTE_123_REVIVAL_HERB: u32 = 1153;
pub const FLAG_ITEM_ROUTE_125_BIG_PEARL: u32 = 1154;
pub const FLAG_ITEM_ROUTE_127_RARE_CANDY: u32 = 1155;
pub const FLAG_ITEM_ROUTE_132_PROTEIN: u32 = 1156;
pub const FLAG_ITEM_ROUTE_133_MAX_REVIVE: u32 = 1157;
pub const FLAG_ITEM_ROUTE_134_CARBOS: u32 = 1158;
pub const FLAG_ITEM_ROUTE_134_STAR_PIECE: u32 = 1159;
pub const FLAG_ITEM_ROUTE_114_ENERGY_POWDER: u32 = 1160;
pub const FLAG_ITEM_ROUTE_115_PP_UP: u32 = 1161;
pub const FLAG_ITEM_ARTISAN_CAVE_B1F_HP_UP: u32 = 1162;
pub const FLAG_ITEM_ARTISAN_CAVE_1F_CARBOS: u32 = 1163;
pub const FLAG_ITEM_MAGMA_HIDEOUT_2F_2R_MAX_ELIXIR: u32 = 1164;
pub const FLAG_ITEM_MAGMA_HIDEOUT_2F_2R_FULL_RESTORE: u32 = 1165;
pub const FLAG_ITEM_MAGMA_HIDEOUT_3F_1R_NUGGET: u32 = 1166;
pub const FLAG_ITEM_MAGMA_HIDEOUT_3F_2R_PP_MAX: u32 = 1167;
pub const FLAG_ITEM_MAGMA_HIDEOUT_4F_MAX_REVIVE: u32 = 1168;
pub const FLAG_ITEM_SAFARI_ZONE_NORTH_EAST_NUGGET: u32 = 1169;
pub const FLAG_ITEM_SAFARI_ZONE_SOUTH_EAST_BIG_PEARL: u32 = 1170;
pub const FLAG_UNUSED_0x493: u32 = 1171;
pub const FLAG_UNUSED_0x494: u32 = 1172;
pub const FLAG_UNUSED_0x495: u32 = 1173;
pub const FLAG_UNUSED_0x496: u32 = 1174;
pub const FLAG_UNUSED_0x497: u32 = 1175;
pub const FLAG_UNUSED_0x498: u32 = 1176;
pub const FLAG_UNUSED_0x499: u32 = 1177;
pub const FLAG_UNUSED_0x49A: u32 = 1178;
pub const FLAG_UNUSED_0x49B: u32 = 1179;
pub const FLAG_UNUSED_0x49C: u32 = 1180;
pub const FLAG_UNUSED_0x49D: u32 = 1181;
pub const FLAG_UNUSED_0x49E: u32 = 1182;
pub const FLAG_UNUSED_0x49F: u32 = 1183;
pub const FLAG_UNUSED_0x4A0: u32 = 1184;
pub const FLAG_UNUSED_0x4A1: u32 = 1185;
pub const FLAG_UNUSED_0x4A2: u32 = 1186;
pub const FLAG_UNUSED_0x4A3: u32 = 1187;
pub const FLAG_UNUSED_0x4A4: u32 = 1188;
pub const FLAG_UNUSED_0x4A5: u32 = 1189;
pub const FLAG_UNUSED_0x4A6: u32 = 1190;
pub const FLAG_UNUSED_0x4A7: u32 = 1191;
pub const FLAG_UNUSED_0x4A8: u32 = 1192;
pub const FLAG_UNUSED_0x4A9: u32 = 1193;
pub const FLAG_UNUSED_0x4AA: u32 = 1194;
pub const FLAG_UNUSED_0x4AB: u32 = 1195;
pub const FLAG_UNUSED_0x4AC: u32 = 1196;
pub const FLAG_UNUSED_0x4AD: u32 = 1197;
pub const FLAG_UNUSED_0x4AE: u32 = 1198;
pub const FLAG_UNUSED_0x4AF: u32 = 1199;
pub const FLAG_UNUSED_0x4B0: u32 = 1200;
pub const FLAG_UNUSED_0x4B1: u32 = 1201;
pub const FLAG_UNUSED_0x4B2: u32 = 1202;
pub const FLAG_UNUSED_0x4B3: u32 = 1203;
pub const FLAG_UNUSED_0x4B4: u32 = 1204;
pub const FLAG_UNUSED_0x4B5: u32 = 1205;
pub const FLAG_UNUSED_0x4B6: u32 = 1206;
pub const FLAG_UNUSED_0x4B7: u32 = 1207;
pub const FLAG_UNUSED_0x4B8: u32 = 1208;
pub const FLAG_UNUSED_0x4B9: u32 = 1209;
pub const FLAG_UNUSED_0x4BA: u32 = 1210;
pub const FLAG_UNUSED_0x4BB: u32 = 1211;
pub const FLAG_UNUSED_0x4BC: u32 = 1212;
pub const FLAG_UNUSED_0x4BD: u32 = 1213;
pub const FLAG_UNUSED_0x4BE: u32 = 1214;
pub const FLAG_UNUSED_0x4BF: u32 = 1215;
pub const FLAG_UNUSED_0x4C0: u32 = 1216;
pub const FLAG_UNUSED_0x4C1: u32 = 1217;
pub const FLAG_UNUSED_0x4C2: u32 = 1218;
pub const FLAG_UNUSED_0x4C3: u32 = 1219;
pub const FLAG_UNUSED_0x4C4: u32 = 1220;
pub const FLAG_UNUSED_0x4C5: u32 = 1221;
pub const FLAG_UNUSED_0x4C6: u32 = 1222;
pub const FLAG_UNUSED_0x4C7: u32 = 1223;
pub const FLAG_UNUSED_0x4C8: u32 = 1224;
pub const FLAG_UNUSED_0x4C9: u32 = 1225;
pub const FLAG_UNUSED_0x4CA: u32 = 1226;
pub const FLAG_UNUSED_0x4CB: u32 = 1227;
pub const FLAG_UNUSED_0x4CC: u32 = 1228;
pub const FLAG_UNUSED_0x4CD: u32 = 1229;
pub const FLAG_UNUSED_0x4CE: u32 = 1230;
pub const FLAG_UNUSED_0x4CF: u32 = 1231;
pub const FLAG_UNUSED_0x4D0: u32 = 1232;
pub const FLAG_UNUSED_0x4D1: u32 = 1233;
pub const FLAG_UNUSED_0x4D2: u32 = 1234;
pub const FLAG_UNUSED_0x4D3: u32 = 1235;
pub const FLAG_UNUSED_0x4D4: u32 = 1236;
pub const FLAG_UNUSED_0x4D5: u32 = 1237;
pub const FLAG_UNUSED_0x4D6: u32 = 1238;
pub const FLAG_UNUSED_0x4D7: u32 = 1239;
pub const FLAG_UNUSED_0x4D8: u32 = 1240;
pub const FLAG_UNUSED_0x4D9: u32 = 1241;
pub const FLAG_UNUSED_0x4DA: u32 = 1242;
pub const FLAG_UNUSED_0x4DB: u32 = 1243;
pub const FLAG_UNUSED_0x4DC: u32 = 1244;
pub const FLAG_UNUSED_0x4DD: u32 = 1245;
pub const FLAG_UNUSED_0x4DE: u32 = 1246;
pub const FLAG_UNUSED_0x4DF: u32 = 1247;
pub const FLAG_UNUSED_0x4E0: u32 = 1248;
pub const FLAG_UNUSED_0x4E1: u32 = 1249;
pub const FLAG_UNUSED_0x4E2: u32 = 1250;
pub const FLAG_UNUSED_0x4E3: u32 = 1251;
pub const FLAG_UNUSED_0x4E4: u32 = 1252;
pub const FLAG_UNUSED_0x4E5: u32 = 1253;
pub const FLAG_UNUSED_0x4E6: u32 = 1254;
pub const FLAG_UNUSED_0x4E7: u32 = 1255;
pub const FLAG_UNUSED_0x4E8: u32 = 1256;
pub const FLAG_UNUSED_0x4E9: u32 = 1257;
pub const FLAG_UNUSED_0x4EA: u32 = 1258;
pub const FLAG_UNUSED_0x4EB: u32 = 1259;
pub const FLAG_UNUSED_0x4EC: u32 = 1260;
pub const FLAG_UNUSED_0x4ED: u32 = 1261;
pub const FLAG_UNUSED_0x4EE: u32 = 1262;
pub const FLAG_UNUSED_0x4EF: u32 = 1263;
pub const FLAG_DEFEATED_RUSTBORO_GYM: u32 = 1264;
pub const FLAG_DEFEATED_DEWFORD_GYM: u32 = 1265;
pub const FLAG_DEFEATED_MAUVILLE_GYM: u32 = 1266;
pub const FLAG_DEFEATED_LAVARIDGE_GYM: u32 = 1267;
pub const FLAG_DEFEATED_PETALBURG_GYM: u32 = 1268;
pub const FLAG_DEFEATED_FORTREE_GYM: u32 = 1269;
pub const FLAG_DEFEATED_MOSSDEEP_GYM: u32 = 1270;
pub const FLAG_DEFEATED_SOOTOPOLIS_GYM: u32 = 1271;
pub const FLAG_DEFEATED_METEOR_FALLS_STEVEN: u32 = 1272;
pub const FLAG_UNUSED_0x4F9: u32 = 1273;
pub const FLAG_UNUSED_0x4FA: u32 = 1274;
pub const FLAG_DEFEATED_ELITE_4_SIDNEY: u32 = 1275;
pub const FLAG_DEFEATED_ELITE_4_PHOEBE: u32 = 1276;
pub const FLAG_DEFEATED_ELITE_4_GLACIA: u32 = 1277;
pub const FLAG_DEFEATED_ELITE_4_DRAKE: u32 = 1278;
pub const FLAG_UNUSED_0x4FF: u32 = 1279;
pub const TRAINER_FLAGS_START: u32 = 1280;
pub const TRAINER_FLAGS_END: u32 = 2143;
pub const SYSTEM_FLAGS: u32 = 2144;
pub const FLAG_SYS_POKEMON_GET: u32 = 2144;
pub const FLAG_SYS_POKEDEX_GET: u32 = 2145;
pub const FLAG_SYS_POKENAV_GET: u32 = 2146;
pub const FLAG_UNUSED_0x863: u32 = 2147;
pub const FLAG_SYS_GAME_CLEAR: u32 = 2148;
pub const FLAG_SYS_CHAT_USED: u32 = 2149;
pub const FLAG_UNLOCKED_TRENDY_SAYINGS: u32 = 2150;
pub const FLAG_BADGE01_GET: u32 = 2151;
pub const FLAG_BADGE02_GET: u32 = 2152;
pub const FLAG_BADGE03_GET: u32 = 2153;
pub const FLAG_BADGE04_GET: u32 = 2154;
pub const FLAG_BADGE05_GET: u32 = 2155;
pub const FLAG_BADGE06_GET: u32 = 2156;
pub const FLAG_BADGE07_GET: u32 = 2157;
pub const FLAG_BADGE08_GET: u32 = 2158;
pub const NUM_BADGES: u32 = 8;
pub const FLAG_VISITED_LITTLEROOT_TOWN: u32 = 2159;
pub const FLAG_VISITED_OLDALE_TOWN: u32 = 2160;
pub const FLAG_VISITED_DEWFORD_TOWN: u32 = 2161;
pub const FLAG_VISITED_LAVARIDGE_TOWN: u32 = 2162;
pub const FLAG_VISITED_FALLARBOR_TOWN: u32 = 2163;
pub const FLAG_VISITED_VERDANTURF_TOWN: u32 = 2164;
pub const FLAG_VISITED_PACIFIDLOG_TOWN: u32 = 2165;
pub const FLAG_VISITED_PETALBURG_CITY: u32 = 2166;
pub const FLAG_VISITED_SLATEPORT_CITY: u32 = 2167;
pub const FLAG_VISITED_MAUVILLE_CITY: u32 = 2168;
pub const FLAG_VISITED_RUSTBORO_CITY: u32 = 2169;
pub const FLAG_VISITED_FORTREE_CITY: u32 = 2170;
pub const FLAG_VISITED_LILYCOVE_CITY: u32 = 2171;
pub const FLAG_VISITED_MOSSDEEP_CITY: u32 = 2172;
pub const FLAG_VISITED_SOOTOPOLIS_CITY: u32 = 2173;
pub const FLAG_VISITED_EVER_GRANDE_CITY: u32 = 2174;
pub const FLAG_IS_CHAMPION: u32 = 2175;
pub const FLAG_NURSE_UNION_ROOM_REMINDER: u32 = 2176;
pub const FLAG_UNUSED_0x881: u32 = 2177;
pub const FLAG_UNUSED_0x882: u32 = 2178;
pub const FLAG_UNUSED_0x883: u32 = 2179;
pub const FLAG_UNUSED_0x884: u32 = 2180;
pub const FLAG_UNUSED_0x885: u32 = 2181;
pub const FLAG_UNUSED_0x886: u32 = 2182;
pub const FLAG_UNUSED_0x887: u32 = 2183;
pub const FLAG_SYS_USE_FLASH: u32 = 2184;
pub const FLAG_SYS_USE_STRENGTH: u32 = 2185;
pub const FLAG_SYS_WEATHER_CTRL: u32 = 2186;
pub const FLAG_SYS_CYCLING_ROAD: u32 = 2187;
pub const FLAG_SYS_SAFARI_MODE: u32 = 2188;
pub const FLAG_SYS_CRUISE_MODE: u32 = 2189;
pub const FLAG_UNUSED_0x88E: u32 = 2190;
pub const FLAG_UNUSED_0x88F: u32 = 2191;
pub const FLAG_SYS_TV_HOME: u32 = 2192;
pub const FLAG_SYS_TV_WATCH: u32 = 2193;
pub const FLAG_SYS_TV_START: u32 = 2194;
pub const FLAG_SYS_CHANGED_DEWFORD_TREND: u32 = 2195;
pub const FLAG_SYS_MIX_RECORD: u32 = 2196;
pub const FLAG_SYS_CLOCK_SET: u32 = 2197;
pub const FLAG_SYS_NATIONAL_DEX: u32 = 2198;
pub const FLAG_SYS_CAVE_SHIP: u32 = 2199;
pub const FLAG_SYS_CAVE_WONDER: u32 = 2200;
pub const FLAG_SYS_CAVE_BATTLE: u32 = 2201;
pub const FLAG_SYS_SHOAL_TIDE: u32 = 2202;
pub const FLAG_SYS_RIBBON_GET: u32 = 2203;
pub const FLAG_LANDMARK_FLOWER_SHOP: u32 = 2204;
pub const FLAG_LANDMARK_MR_BRINEY_HOUSE: u32 = 2205;
pub const FLAG_LANDMARK_ABANDONED_SHIP: u32 = 2206;
pub const FLAG_LANDMARK_SEASHORE_HOUSE: u32 = 2207;
pub const FLAG_LANDMARK_NEW_MAUVILLE: u32 = 2208;
pub const FLAG_LANDMARK_OLD_LADY_REST_SHOP: u32 = 2209;
pub const FLAG_LANDMARK_TRICK_HOUSE: u32 = 2210;
pub const FLAG_LANDMARK_WINSTRATE_FAMILY: u32 = 2211;
pub const FLAG_LANDMARK_GLASS_WORKSHOP: u32 = 2212;
pub const FLAG_LANDMARK_LANETTES_HOUSE: u32 = 2213;
pub const FLAG_LANDMARK_POKEMON_DAYCARE: u32 = 2214;
pub const FLAG_LANDMARK_SEAFLOOR_CAVERN: u32 = 2215;
pub const FLAG_LANDMARK_BATTLE_FRONTIER: u32 = 2216;
pub const FLAG_LANDMARK_SOUTHERN_ISLAND: u32 = 2217;
pub const FLAG_LANDMARK_FIERY_PATH: u32 = 2218;
pub const FLAG_SYS_PC_LANETTE: u32 = 2219;
pub const FLAG_SYS_MYSTERY_EVENT_ENABLE: u32 = 2220;
pub const FLAG_SYS_ENC_UP_ITEM: u32 = 2221;
pub const FLAG_SYS_ENC_DOWN_ITEM: u32 = 2222;
pub const FLAG_SYS_BRAILLE_DIG: u32 = 2223;
pub const FLAG_SYS_REGIROCK_PUZZLE_COMPLETED: u32 = 2224;
pub const FLAG_SYS_BRAILLE_REGICE_COMPLETED: u32 = 2225;
pub const FLAG_SYS_REGISTEEL_PUZZLE_COMPLETED: u32 = 2226;
pub const FLAG_ENABLE_SHIP_SOUTHERN_ISLAND: u32 = 2227;
pub const FLAG_LANDMARK_POKEMON_LEAGUE: u32 = 2228;
pub const FLAG_LANDMARK_ISLAND_CAVE: u32 = 2229;
pub const FLAG_LANDMARK_DESERT_RUINS: u32 = 2230;
pub const FLAG_LANDMARK_FOSSIL_MANIACS_HOUSE: u32 = 2231;
pub const FLAG_LANDMARK_SCORCHED_SLAB: u32 = 2232;
pub const FLAG_LANDMARK_ANCIENT_TOMB: u32 = 2233;
pub const FLAG_LANDMARK_TUNNELERS_REST_HOUSE: u32 = 2234;
pub const FLAG_LANDMARK_HUNTERS_HOUSE: u32 = 2235;
pub const FLAG_LANDMARK_SEALED_CHAMBER: u32 = 2236;
pub const FLAG_SYS_TV_LATIAS_LATIOS: u32 = 2237;
pub const FLAG_LANDMARK_SKY_PILLAR: u32 = 2238;
pub const FLAG_SYS_SHOAL_ITEM: u32 = 2239;
pub const FLAG_SYS_B_DASH: u32 = 2240;
pub const FLAG_SYS_CTRL_OBJ_DELETE: u32 = 2241;
pub const FLAG_SYS_RESET_RTC_ENABLE: u32 = 2242;
pub const FLAG_LANDMARK_BERRY_MASTERS_HOUSE: u32 = 2243;
pub const FLAG_SYS_TOWER_SILVER: u32 = 2244;
pub const FLAG_SYS_TOWER_GOLD: u32 = 2245;
pub const FLAG_SYS_DOME_SILVER: u32 = 2246;
pub const FLAG_SYS_DOME_GOLD: u32 = 2247;
pub const FLAG_SYS_PALACE_SILVER: u32 = 2248;
pub const FLAG_SYS_PALACE_GOLD: u32 = 2249;
pub const FLAG_SYS_ARENA_SILVER: u32 = 2250;
pub const FLAG_SYS_ARENA_GOLD: u32 = 2251;
pub const FLAG_SYS_FACTORY_SILVER: u32 = 2252;
pub const FLAG_SYS_FACTORY_GOLD: u32 = 2253;
pub const FLAG_SYS_PIKE_SILVER: u32 = 2254;
pub const FLAG_SYS_PIKE_GOLD: u32 = 2255;
pub const FLAG_SYS_PYRAMID_SILVER: u32 = 2256;
pub const FLAG_SYS_PYRAMID_GOLD: u32 = 2257;
pub const FLAG_SYS_FRONTIER_PASS: u32 = 2258;
pub const FLAG_MAP_SCRIPT_CHECKED_DEOXYS: u32 = 2259;
pub const FLAG_DEOXYS_ROCK_COMPLETE: u32 = 2260;
pub const FLAG_ENABLE_SHIP_BIRTH_ISLAND: u32 = 2261;
pub const FLAG_ENABLE_SHIP_FARAWAY_ISLAND: u32 = 2262;
pub const FLAG_SHOWN_BOX_WAS_FULL_MESSAGE: u32 = 2263;
pub const FLAG_ARRIVED_ON_FARAWAY_ISLAND: u32 = 2264;
pub const FLAG_ARRIVED_AT_MARINE_CAVE_EMERGE_SPOT: u32 = 2265;
pub const FLAG_ARRIVED_AT_TERRA_CAVE_ENTRANCE: u32 = 2266;
pub const FLAG_SYS_MYSTERY_GIFT_ENABLE: u32 = 2267;
pub const FLAG_ENTERED_MIRAGE_TOWER: u32 = 2268;
pub const FLAG_LANDMARK_ALTERING_CAVE: u32 = 2269;
pub const FLAG_LANDMARK_DESERT_UNDERPASS: u32 = 2270;
pub const FLAG_LANDMARK_ARTISAN_CAVE: u32 = 2271;
pub const FLAG_ENABLE_SHIP_NAVEL_ROCK: u32 = 2272;
pub const FLAG_ARRIVED_AT_NAVEL_ROCK: u32 = 2273;
pub const FLAG_LANDMARK_TRAINER_HILL: u32 = 2274;
pub const FLAG_UNUSED_0x8E3: u32 = 2275;
pub const FLAG_RECEIVED_POKEDEX_FROM_BIRCH: u32 = 2276;
pub const FLAG_UNUSED_0x8E5: u32 = 2277;
pub const FLAG_UNUSED_0x8E6: u32 = 2278;
pub const FLAG_UNUSED_0x8E7: u32 = 2279;
pub const FLAG_UNUSED_0x8E8: u32 = 2280;
pub const FLAG_UNUSED_0x8E9: u32 = 2281;
pub const FLAG_UNUSED_0x8EA: u32 = 2282;
pub const FLAG_UNUSED_0x8EB: u32 = 2283;
pub const FLAG_UNUSED_0x8EC: u32 = 2284;
pub const FLAG_UNUSED_0x8ED: u32 = 2285;
pub const FLAG_UNUSED_0x8EE: u32 = 2286;
pub const FLAG_UNUSED_0x8EF: u32 = 2287;
pub const FLAG_UNUSED_0x8F0: u32 = 2288;
pub const FLAG_UNUSED_0x8F1: u32 = 2289;
pub const FLAG_UNUSED_0x8F2: u32 = 2290;
pub const FLAG_UNUSED_0x8F3: u32 = 2291;
pub const FLAG_UNUSED_0x8F4: u32 = 2292;
pub const FLAG_UNUSED_0x8F5: u32 = 2293;
pub const FLAG_UNUSED_0x8F6: u32 = 2294;
pub const FLAG_UNUSED_0x8F7: u32 = 2295;
pub const FLAG_UNUSED_0x8F8: u32 = 2296;
pub const FLAG_UNUSED_0x8F9: u32 = 2297;
pub const FLAG_UNUSED_0x8FA: u32 = 2298;
pub const FLAG_UNUSED_0x8FB: u32 = 2299;
pub const FLAG_UNUSED_0x8FC: u32 = 2300;
pub const FLAG_UNUSED_0x8FD: u32 = 2301;
pub const FLAG_UNUSED_0x8FE: u32 = 2302;
pub const FLAG_UNUSED_0x8FF: u32 = 2303;
pub const FLAG_UNUSED_0x900: u32 = 2304;
pub const FLAG_UNUSED_0x901: u32 = 2305;
pub const FLAG_UNUSED_0x902: u32 = 2306;
pub const FLAG_UNUSED_0x903: u32 = 2307;
pub const FLAG_UNUSED_0x904: u32 = 2308;
pub const FLAG_UNUSED_0x905: u32 = 2309;
pub const FLAG_UNUSED_0x906: u32 = 2310;
pub const FLAG_UNUSED_0x907: u32 = 2311;
pub const FLAG_UNUSED_0x908: u32 = 2312;
pub const FLAG_UNUSED_0x909: u32 = 2313;
pub const FLAG_UNUSED_0x90A: u32 = 2314;
pub const FLAG_UNUSED_0x90B: u32 = 2315;
pub const FLAG_UNUSED_0x90C: u32 = 2316;
pub const FLAG_UNUSED_0x90D: u32 = 2317;
pub const FLAG_UNUSED_0x90E: u32 = 2318;
pub const FLAG_UNUSED_0x90F: u32 = 2319;
pub const FLAG_UNUSED_0x910: u32 = 2320;
pub const FLAG_UNUSED_0x911: u32 = 2321;
pub const FLAG_UNUSED_0x912: u32 = 2322;
pub const FLAG_UNUSED_0x913: u32 = 2323;
pub const FLAG_UNUSED_0x914: u32 = 2324;
pub const FLAG_UNUSED_0x915: u32 = 2325;
pub const FLAG_UNUSED_0x916: u32 = 2326;
pub const FLAG_UNUSED_0x917: u32 = 2327;
pub const FLAG_UNUSED_0x918: u32 = 2328;
pub const FLAG_UNUSED_0x919: u32 = 2329;
pub const FLAG_UNUSED_0x91A: u32 = 2330;
pub const FLAG_UNUSED_0x91B: u32 = 2331;
pub const FLAG_UNUSED_0x91C: u32 = 2332;
pub const FLAG_UNUSED_0x91D: u32 = 2333;
pub const FLAG_UNUSED_0x91E: u32 = 2334;
pub const FLAG_UNUSED_0x91F: u32 = 2335;
pub const DAILY_FLAGS_START: u32 = 2336;
pub const FLAG_UNUSED_0x920: u32 = 2336;
pub const FLAG_DAILY_CONTEST_LOBBY_RECEIVED_BERRY: u32 = 2337;
pub const FLAG_DAILY_SECRET_BASE: u32 = 2338;
pub const FLAG_UNUSED_0x923: u32 = 2339;
pub const FLAG_UNUSED_0x924: u32 = 2340;
pub const FLAG_UNUSED_0x925: u32 = 2341;
pub const FLAG_UNUSED_0x926: u32 = 2342;
pub const FLAG_UNUSED_0x927: u32 = 2343;
pub const FLAG_UNUSED_0x928: u32 = 2344;
pub const FLAG_UNUSED_0x929: u32 = 2345;
pub const FLAG_DAILY_PICKED_LOTO_TICKET: u32 = 2346;
pub const FLAG_DAILY_ROUTE_114_RECEIVED_BERRY: u32 = 2347;
pub const FLAG_DAILY_ROUTE_111_RECEIVED_BERRY: u32 = 2348;
pub const FLAG_DAILY_BERRY_MASTER_RECEIVED_BERRY: u32 = 2349;
pub const FLAG_DAILY_ROUTE_120_RECEIVED_BERRY: u32 = 2350;
pub const FLAG_DAILY_LILYCOVE_RECEIVED_BERRY: u32 = 2351;
pub const FLAG_DAILY_FLOWER_SHOP_RECEIVED_BERRY: u32 = 2352;
pub const FLAG_DAILY_BERRY_MASTERS_WIFE: u32 = 2353;
pub const FLAG_DAILY_SOOTOPOLIS_RECEIVED_BERRY: u32 = 2354;
pub const FLAG_UNUSED_0x933: u32 = 2355;
pub const FLAG_DAILY_APPRENTICE_LEAVES: u32 = 2356;
pub const FLAG_UNUSED_0x935: u32 = 2357;
pub const FLAG_UNUSED_0x936: u32 = 2358;
pub const FLAG_UNUSED_0x937: u32 = 2359;
pub const FLAG_UNUSED_0x938: u32 = 2360;
pub const FLAG_UNUSED_0x939: u32 = 2361;
pub const FLAG_UNUSED_0x93A: u32 = 2362;
pub const FLAG_UNUSED_0x93B: u32 = 2363;
pub const FLAG_UNUSED_0x93C: u32 = 2364;
pub const FLAG_UNUSED_0x93D: u32 = 2365;
pub const FLAG_UNUSED_0x93E: u32 = 2366;
pub const FLAG_UNUSED_0x93F: u32 = 2367;
pub const FLAG_UNUSED_0x940: u32 = 2368;
pub const FLAG_UNUSED_0x941: u32 = 2369;
pub const FLAG_UNUSED_0x942: u32 = 2370;
pub const FLAG_UNUSED_0x943: u32 = 2371;
pub const FLAG_UNUSED_0x944: u32 = 2372;
pub const FLAG_UNUSED_0x945: u32 = 2373;
pub const FLAG_UNUSED_0x946: u32 = 2374;
pub const FLAG_UNUSED_0x947: u32 = 2375;
pub const FLAG_UNUSED_0x948: u32 = 2376;
pub const FLAG_UNUSED_0x949: u32 = 2377;
pub const FLAG_UNUSED_0x94A: u32 = 2378;
pub const FLAG_UNUSED_0x94B: u32 = 2379;
pub const FLAG_UNUSED_0x94C: u32 = 2380;
pub const FLAG_UNUSED_0x94D: u32 = 2381;
pub const FLAG_UNUSED_0x94E: u32 = 2382;
pub const FLAG_UNUSED_0x94F: u32 = 2383;
pub const FLAG_UNUSED_0x950: u32 = 2384;
pub const FLAG_UNUSED_0x951: u32 = 2385;
pub const FLAG_UNUSED_0x952: u32 = 2386;
pub const FLAG_UNUSED_0x953: u32 = 2387;
pub const FLAG_UNUSED_0x954: u32 = 2388;
pub const FLAG_UNUSED_0x955: u32 = 2389;
pub const FLAG_UNUSED_0x956: u32 = 2390;
pub const FLAG_UNUSED_0x957: u32 = 2391;
pub const FLAG_UNUSED_0x958: u32 = 2392;
pub const FLAG_UNUSED_0x959: u32 = 2393;
pub const FLAG_UNUSED_0x95A: u32 = 2394;
pub const FLAG_UNUSED_0x95B: u32 = 2395;
pub const FLAG_UNUSED_0x95C: u32 = 2396;
pub const FLAG_UNUSED_0x95D: u32 = 2397;
pub const FLAG_UNUSED_0x95E: u32 = 2398;
pub const FLAG_UNUSED_0x95F: u32 = 2399;
pub const DAILY_FLAGS_END: u32 = 2399;
pub const NUM_DAILY_FLAGS: u32 = 64;
pub const FLAGS_COUNT: u32 = 2400;
pub const SPECIAL_FLAGS_START: u32 = 16384;
pub const FLAG_HIDE_MAP_NAME_POPUP: u32 = 16384;
pub const FLAG_DONT_TRANSITION_MUSIC: u32 = 16385;
pub const FLAG_ENABLE_MULTI_CORRIDOR_DOOR: u32 = 16386;
pub const FLAG_SPECIAL_FLAG_UNUSED_0x4003: u32 = 16387;
pub const FLAG_STORING_ITEMS_IN_PYRAMID_BAG: u32 = 16388;
pub const FLAG_SAFE_FOLLOWER_MOVEMENT: u32 = 16389;
pub const SPECIAL_FLAGS_END: u32 = 16511;
pub const NUM_SPECIAL_FLAGS: u32 = 128;
pub const FLAG_TEMP_SKIP_GABBY_INTERVIEW: u32 = 1;
pub const FLAG_TEMP_REGICE_PUZZLE_STARTED: u32 = 2;
pub const FLAG_TEMP_REGICE_PUZZLE_FAILED: u32 = 3;
pub const FLAG_TEMP_HIDE_FOLLOWER: u32 = 14;
pub const FLAG_TEMP_HIDE_MIRAGE_ISLAND_BERRY_TREE: u32 = 17;
pub const VARS_START: u32 = 16384;
pub const TEMP_VARS_START: u32 = 16384;
pub const VAR_TEMP_0: u32 = 16384;
pub const VAR_TEMP_1: u32 = 16385;
pub const VAR_TEMP_2: u32 = 16386;
pub const VAR_TEMP_3: u32 = 16387;
pub const VAR_TEMP_4: u32 = 16388;
pub const VAR_TEMP_5: u32 = 16389;
pub const VAR_TEMP_6: u32 = 16390;
pub const VAR_TEMP_7: u32 = 16391;
pub const VAR_TEMP_8: u32 = 16392;
pub const VAR_TEMP_9: u32 = 16393;
pub const VAR_TEMP_A: u32 = 16394;
pub const VAR_TEMP_B: u32 = 16395;
pub const VAR_TEMP_C: u32 = 16396;
pub const VAR_TEMP_D: u32 = 16397;
pub const VAR_TEMP_E: u32 = 16398;
pub const VAR_TEMP_F: u32 = 16399;
pub const TEMP_VARS_END: u32 = 16399;
pub const NUM_TEMP_VARS: u32 = 16;
pub const VAR_OBJ_GFX_ID_0: u32 = 16400;
pub const VAR_OBJ_GFX_ID_1: u32 = 16401;
pub const VAR_OBJ_GFX_ID_2: u32 = 16402;
pub const VAR_OBJ_GFX_ID_3: u32 = 16403;
pub const VAR_OBJ_GFX_ID_4: u32 = 16404;
pub const VAR_OBJ_GFX_ID_5: u32 = 16405;
pub const VAR_OBJ_GFX_ID_6: u32 = 16406;
pub const VAR_OBJ_GFX_ID_7: u32 = 16407;
pub const VAR_OBJ_GFX_ID_8: u32 = 16408;
pub const VAR_OBJ_GFX_ID_9: u32 = 16409;
pub const VAR_OBJ_GFX_ID_A: u32 = 16410;
pub const VAR_OBJ_GFX_ID_B: u32 = 16411;
pub const VAR_OBJ_GFX_ID_C: u32 = 16412;
pub const VAR_OBJ_GFX_ID_D: u32 = 16413;
pub const VAR_OBJ_GFX_ID_E: u32 = 16414;
pub const VAR_OBJ_GFX_ID_F: u32 = 16415;
pub const VAR_RECYCLE_GOODS: u32 = 16416;
pub const VAR_REPEL_STEP_COUNT: u32 = 16417;
pub const VAR_ICE_STEP_COUNT: u32 = 16418;
pub const VAR_STARTER_MON: u32 = 16419;
pub const VAR_MIRAGE_RND_H: u32 = 16420;
pub const VAR_MIRAGE_RND_L: u32 = 16421;
pub const VAR_SECRET_BASE_MAP: u32 = 16422;
pub const VAR_CYCLING_ROAD_RECORD_COLLISIONS: u32 = 16423;
pub const VAR_CYCLING_ROAD_RECORD_TIME_L: u32 = 16424;
pub const VAR_CYCLING_ROAD_RECORD_TIME_H: u32 = 16425;
pub const VAR_FRIENDSHIP_STEP_COUNTER: u32 = 16426;
pub const VAR_POISON_STEP_COUNTER: u32 = 16427;
pub const VAR_RESET_RTC_ENABLE: u32 = 16428;
pub const VAR_ENIGMA_BERRY_AVAILABLE: u32 = 16429;
pub const VAR_WONDER_NEWS_STEP_COUNTER: u32 = 16430;
pub const VAR_FRONTIER_MANIAC_FACILITY: u32 = 16431;
pub const VAR_FRONTIER_GAMBLER_CHALLENGE: u32 = 16432;
pub const VAR_FRONTIER_GAMBLER_SET_CHALLENGE: u32 = 16433;
pub const VAR_FRONTIER_GAMBLER_AMOUNT_BET: u32 = 16434;
pub const VAR_FRONTIER_GAMBLER_STATE: u32 = 16435;
pub const VAR_DEOXYS_ROCK_STEP_COUNT: u32 = 16436;
pub const VAR_DEOXYS_ROCK_LEVEL: u32 = 16437;
pub const VAR_PC_BOX_TO_SEND_MON: u32 = 16438;
pub const VAR_ABNORMAL_WEATHER_LOCATION: u32 = 16439;
pub const VAR_ABNORMAL_WEATHER_STEP_COUNTER: u32 = 16440;
pub const VAR_SHOULD_END_ABNORMAL_WEATHER: u32 = 16441;
pub const VAR_FARAWAY_ISLAND_STEP_COUNTER: u32 = 16442;
pub const VAR_REGICE_STEPS_1: u32 = 16443;
pub const VAR_REGICE_STEPS_2: u32 = 16444;
pub const VAR_REGICE_STEPS_3: u32 = 16445;
pub const VAR_ALTERING_CAVE_WILD_SET: u32 = 16446;
pub const VAR_DISTRIBUTE_EON_TICKET: u32 = 16447;
pub const VAR_DAYS: u32 = 16448;
pub const VAR_FANCLUB_FAN_COUNTER: u32 = 16449;
pub const VAR_FANCLUB_LOSE_FAN_TIMER: u32 = 16450;
pub const VAR_DEPT_STORE_FLOOR: u32 = 16451;
pub const VAR_TRICK_HOUSE_LEVEL: u32 = 16452;
pub const VAR_POKELOT_PRIZE_ITEM: u32 = 16453;
pub const VAR_NATIONAL_DEX: u32 = 16454;
pub const VAR_SEEDOT_SIZE_RECORD: u32 = 16455;
pub const VAR_ASH_GATHER_COUNT: u32 = 16456;
pub const VAR_BIRCH_STATE: u32 = 16457;
pub const VAR_CRUISE_STEP_COUNT: u32 = 16458;
pub const VAR_POKELOT_RND1: u32 = 16459;
pub const VAR_POKELOT_RND2: u32 = 16460;
pub const VAR_POKELOT_PRIZE_PLACE: u32 = 16461;
pub const VAR_UNUSED_0x404E: u32 = 16462;
pub const VAR_LOTAD_SIZE_RECORD: u32 = 16463;
pub const VAR_LITTLEROOT_TOWN_STATE: u32 = 16464;
pub const VAR_OLDALE_TOWN_STATE: u32 = 16465;
pub const VAR_DEWFORD_TOWN_STATE: u32 = 16466;
pub const VAR_LAVARIDGE_TOWN_STATE: u32 = 16467;
pub const VAR_CURRENT_SECRET_BASE: u32 = 16468;
pub const VAR_VERDANTURF_TOWN_STATE: u32 = 16469;
pub const VAR_PACIFIDLOG_TOWN_STATE: u32 = 16470;
pub const VAR_PETALBURG_CITY_STATE: u32 = 16471;
pub const VAR_SLATEPORT_CITY_STATE: u32 = 16472;
pub const VAR_MAUVILLE_CITY_STATE: u32 = 16473;
pub const VAR_RUSTBORO_CITY_STATE: u32 = 16474;
pub const VAR_FORTREE_CITY_STATE: u32 = 16475;
pub const VAR_LILYCOVE_CITY_STATE: u32 = 16476;
pub const VAR_MOSSDEEP_CITY_STATE: u32 = 16477;
pub const VAR_SOOTOPOLIS_CITY_STATE: u32 = 16478;
pub const VAR_EVER_GRANDE_CITY_STATE: u32 = 16479;
pub const VAR_ROUTE101_STATE: u32 = 16480;
pub const VAR_ROUTE102_STATE: u32 = 16481;
pub const VAR_ROUTE103_STATE: u32 = 16482;
pub const VAR_ROUTE104_STATE: u32 = 16483;
pub const VAR_ROUTE105_STATE: u32 = 16484;
pub const VAR_ROUTE106_STATE: u32 = 16485;
pub const VAR_ROUTE107_STATE: u32 = 16486;
pub const VAR_ROUTE108_STATE: u32 = 16487;
pub const VAR_ROUTE109_STATE: u32 = 16488;
pub const VAR_ROUTE110_STATE: u32 = 16489;
pub const VAR_ROUTE111_STATE: u32 = 16490;
pub const VAR_ROUTE112_STATE: u32 = 16491;
pub const VAR_ROUTE113_STATE: u32 = 16492;
pub const VAR_ROUTE114_STATE: u32 = 16493;
pub const VAR_ROUTE115_STATE: u32 = 16494;
pub const VAR_ROUTE116_STATE: u32 = 16495;
pub const VAR_ROUTE117_STATE: u32 = 16496;
pub const VAR_ROUTE118_STATE: u32 = 16497;
pub const VAR_ROUTE119_STATE: u32 = 16498;
pub const VAR_ROUTE120_STATE: u32 = 16499;
pub const VAR_ROUTE121_STATE: u32 = 16500;
pub const VAR_ROUTE122_STATE: u32 = 16501;
pub const VAR_ROUTE123_STATE: u32 = 16502;
pub const VAR_ROUTE124_STATE: u32 = 16503;
pub const VAR_ROUTE125_STATE: u32 = 16504;
pub const VAR_ROUTE126_STATE: u32 = 16505;
pub const VAR_ROUTE127_STATE: u32 = 16506;
pub const VAR_ROUTE128_STATE: u32 = 16507;
pub const VAR_ROUTE129_STATE: u32 = 16508;
pub const VAR_ROUTE130_STATE: u32 = 16509;
pub const VAR_ROUTE131_STATE: u32 = 16510;
pub const VAR_ROUTE132_STATE: u32 = 16511;
pub const VAR_ROUTE133_STATE: u32 = 16512;
pub const VAR_ROUTE134_STATE: u32 = 16513;
pub const VAR_LITTLEROOT_HOUSES_STATE_MAY: u32 = 16514;
pub const VAR_UNUSED_0x4083: u32 = 16515;
pub const VAR_BIRCH_LAB_STATE: u32 = 16516;
pub const VAR_PETALBURG_GYM_STATE: u32 = 16517;
pub const VAR_CONTEST_HALL_STATE: u32 = 16518;
pub const VAR_CABLE_CLUB_STATE: u32 = 16519;
pub const VAR_CONTEST_TYPE: u32 = 16520;
pub const VAR_SECRET_BASE_INITIALIZED: u32 = 16521;
pub const VAR_CONTEST_PRIZE_PICKUP: u32 = 16522;
pub const VAR_UNUSED_0x408B: u32 = 16523;
pub const VAR_LITTLEROOT_HOUSES_STATE_BRENDAN: u32 = 16524;
pub const VAR_LITTLEROOT_RIVAL_STATE: u32 = 16525;
pub const VAR_BOARD_BRINEY_BOAT_STATE: u32 = 16526;
pub const VAR_DEVON_CORP_3F_STATE: u32 = 16527;
pub const VAR_BRINEY_HOUSE_STATE: u32 = 16528;
pub const VAR_UNUSED_0x4091: u32 = 16529;
pub const VAR_LITTLEROOT_INTRO_STATE: u32 = 16530;
pub const VAR_MAUVILLE_GYM_STATE: u32 = 16531;
pub const VAR_LILYCOVE_MUSEUM_2F_STATE: u32 = 16532;
pub const VAR_LILYCOVE_FAN_CLUB_STATE: u32 = 16533;
pub const VAR_BRINEY_LOCATION: u32 = 16534;
pub const VAR_INIT_SECRET_BASE: u32 = 16535;
pub const VAR_PETALBURG_WOODS_STATE: u32 = 16536;
pub const VAR_LILYCOVE_CONTEST_LOBBY_STATE: u32 = 16537;
pub const VAR_RUSTURF_TUNNEL_STATE: u32 = 16538;
pub const VAR_UNUSED_0x409B: u32 = 16539;
pub const VAR_ELITE_4_STATE: u32 = 16540;
pub const VAR_UNUSED_0x409D: u32 = 16541;
pub const VAR_MOSSDEEP_SPACE_CENTER_STAIR_GUARD_STATE: u32 = 16542;
pub const VAR_MOSSDEEP_SPACE_CENTER_STATE: u32 = 16543;
pub const VAR_SLATEPORT_HARBOR_STATE: u32 = 16544;
pub const VAR_UNUSED_0x40A1: u32 = 16545;
pub const VAR_SEAFLOOR_CAVERN_STATE: u32 = 16546;
pub const VAR_CABLE_CAR_STATION_STATE: u32 = 16547;
pub const VAR_SAFARI_ZONE_STATE: u32 = 16548;
pub const VAR_TRICK_HOUSE_BEING_WATCHED_STATE: u32 = 16549;
pub const VAR_TRICK_HOUSE_FOUND_TRICK_MASTER: u32 = 16550;
pub const VAR_TRICK_HOUSE_ENTRANCE_STATE: u32 = 16551;
pub const VAR_UNUSED_0x40A8: u32 = 16552;
pub const VAR_CYCLING_CHALLENGE_STATE: u32 = 16553;
pub const VAR_SLATEPORT_MUSEUM_1F_STATE: u32 = 16554;
pub const VAR_TRICK_HOUSE_PUZZLE_1_STATE: u32 = 16555;
pub const VAR_TRICK_HOUSE_PUZZLE_2_STATE: u32 = 16556;
pub const VAR_TRICK_HOUSE_PUZZLE_3_STATE: u32 = 16557;
pub const VAR_TRICK_HOUSE_PUZZLE_4_STATE: u32 = 16558;
pub const VAR_TRICK_HOUSE_PUZZLE_5_STATE: u32 = 16559;
pub const VAR_TRICK_HOUSE_PUZZLE_6_STATE: u32 = 16560;
pub const VAR_TRICK_HOUSE_PUZZLE_7_STATE: u32 = 16561;
pub const VAR_TRICK_HOUSE_PUZZLE_8_STATE: u32 = 16562;
pub const VAR_WEATHER_INSTITUTE_STATE: u32 = 16563;
pub const VAR_SS_TIDAL_STATE: u32 = 16564;
pub const VAR_TRICK_HOUSE_ENTER_FROM_CORRIDOR: u32 = 16565;
pub const VAR_TRICK_HOUSE_PUZZLE_7_STATE_2: u32 = 16566;
pub const VAR_SLATEPORT_FAN_CLUB_STATE: u32 = 16567;
pub const VAR_UNUSED_0x40B8: u32 = 16568;
pub const VAR_MT_PYRE_STATE: u32 = 16569;
pub const VAR_NEW_MAUVILLE_STATE: u32 = 16570;
pub const VAR_UNUSED_0x40BB: u32 = 16571;
pub const VAR_BRAVO_TRAINER_BATTLE_TOWER_ON: u32 = 16572;
pub const VAR_JAGGED_PASS_ASH_WEATHER: u32 = 16573;
pub const VAR_GLASS_WORKSHOP_STATE: u32 = 16574;
pub const VAR_METEOR_FALLS_STATE: u32 = 16575;
pub const VAR_SOOTOPOLIS_MYSTERY_EVENTS_STATE: u32 = 16576;
pub const VAR_TRICK_HOUSE_PRIZE_PICKUP: u32 = 16577;
pub const VAR_PACIFIDLOG_TM_RECEIVED_DAY: u32 = 16578;
pub const VAR_VICTORY_ROAD_1F_STATE: u32 = 16579;
pub const VAR_FOSSIL_RESURRECTION_STATE: u32 = 16580;
pub const VAR_WHICH_FOSSIL_REVIVED: u32 = 16581;
pub const VAR_STEVENS_HOUSE_STATE: u32 = 16582;
pub const VAR_OLDALE_RIVAL_STATE: u32 = 16583;
pub const VAR_JAGGED_PASS_STATE: u32 = 16584;
pub const VAR_SCOTT_PETALBURG_ENCOUNTER: u32 = 16585;
pub const VAR_SKY_PILLAR_STATE: u32 = 16586;
pub const VAR_MIRAGE_TOWER_STATE: u32 = 16587;
pub const VAR_FOSSIL_MANIAC_STATE: u32 = 16588;
pub const VAR_CABLE_CLUB_TUTORIAL_STATE: u32 = 16589;
pub const VAR_FRONTIER_BATTLE_MODE: u32 = 16590;
pub const VAR_FRONTIER_FACILITY: u32 = 16591;
pub const VAR_HAS_ENTERED_BATTLE_FRONTIER: u32 = 16592;
pub const VAR_SCOTT_STATE: u32 = 16593;
pub const VAR_SLATEPORT_OUTSIDE_MUSEUM_STATE: u32 = 16594;
pub const VAR_DEX_UPGRADE_JOHTO_STARTER_STATE: u32 = 16595;
pub const VAR_SS_TIDAL_SCOTT_STATE: u32 = 16596;
pub const VAR_ROAMER_POKEMON: u32 = 16597;
pub const VAR_TRAINER_HILL_IS_ACTIVE: u32 = 16598;
pub const VAR_SKY_PILLAR_RAYQUAZA_CRY_DONE: u32 = 16599;
pub const VAR_SOOTOPOLIS_WALLACE_STATE: u32 = 16600;
pub const VAR_HAS_TALKED_TO_SEAFLOOR_CAVERN_ENTRANCE_GRUNT: u32 = 16601;
pub const VAR_REGISTER_BIRCH_STATE: u32 = 16602;
pub const VAR_UNUSED_0x40DB: u32 = 16603;
pub const VAR_UNUSED_0x40DC: u32 = 16604;
pub const VAR_GIFT_PICHU_SLOT: u32 = 16605;
pub const VAR_GIFT_UNUSED_1: u32 = 16606;
pub const VAR_GIFT_UNUSED_2: u32 = 16607;
pub const VAR_GIFT_UNUSED_3: u32 = 16608;
pub const VAR_GIFT_UNUSED_4: u32 = 16609;
pub const VAR_GIFT_UNUSED_5: u32 = 16610;
pub const VAR_GIFT_UNUSED_6: u32 = 16611;
pub const VAR_GIFT_UNUSED_7: u32 = 16612;
pub const VAR_UNUSED_0x40E5: u32 = 16613;
pub const VAR_DAILY_SLOTS: u32 = 16614;
pub const VAR_DAILY_WILDS: u32 = 16615;
pub const VAR_DAILY_BLENDER: u32 = 16616;
pub const VAR_DAILY_PLANTED_BERRIES: u32 = 16617;
pub const VAR_DAILY_PICKED_BERRIES: u32 = 16618;
pub const VAR_DAILY_ROULETTE: u32 = 16619;
pub const VAR_SECRET_BASE_STEP_COUNTER: u32 = 16620;
pub const VAR_SECRET_BASE_LAST_ITEM_USED: u32 = 16621;
pub const VAR_SECRET_BASE_LOW_TV_FLAGS: u32 = 16622;
pub const VAR_SECRET_BASE_HIGH_TV_FLAGS: u32 = 16623;
pub const VAR_SECRET_BASE_IS_NOT_LOCAL: u32 = 16624;
pub const VAR_DAILY_BP: u32 = 16625;
pub const VAR_WALLY_CALL_STEP_COUNTER: u32 = 16626;
pub const VAR_SCOTT_FORTREE_CALL_STEP_COUNTER: u32 = 16627;
pub const VAR_ROXANNE_CALL_STEP_COUNTER: u32 = 16628;
pub const VAR_SCOTT_BF_CALL_STEP_COUNTER: u32 = 16629;
pub const VAR_RIVAL_RAYQUAZA_CALL_STEP_COUNTER: u32 = 16630;
pub const VAR_LEVEL_CAP: u32 = 16631;
pub const VAR_BATTLE_SPEED: u32 = 16632;
pub const VAR_UNUSED_0x40F9: u32 = 16633;
pub const VAR_UNUSED_0x40FA: u32 = 16634;
pub const VAR_UNUSED_0x40FB: u32 = 16635;
pub const VAR_UNUSED_0x40FC: u32 = 16636;
pub const VAR_UNUSED_0x40FD: u32 = 16637;
pub const VAR_UNUSED_0x40FE: u32 = 16638;
pub const VAR_UNUSED_0x40FF: u32 = 16639;
pub const VARS_END: u32 = 16639;
pub const VARS_COUNT: u32 = 256;
pub const SPECIAL_VARS_START: u32 = 32768;
pub const VAR_0x8000: u32 = 32768;
pub const VAR_0x8001: u32 = 32769;
pub const VAR_0x8002: u32 = 32770;
pub const VAR_0x8003: u32 = 32771;
pub const VAR_0x8004: u32 = 32772;
pub const VAR_0x8005: u32 = 32773;
pub const VAR_0x8006: u32 = 32774;
pub const VAR_0x8007: u32 = 32775;
pub const VAR_0x8008: u32 = 32776;
pub const VAR_0x8009: u32 = 32777;
pub const VAR_0x800A: u32 = 32778;
pub const VAR_0x800B: u32 = 32779;
pub const VAR_FACING: u32 = 32780;
pub const VAR_RESULT: u32 = 32781;
pub const VAR_ITEM_ID: u32 = 32782;
pub const VAR_LAST_TALKED: u32 = 32783;
pub const VAR_CONTEST_RANK: u32 = 32784;
pub const VAR_CONTEST_CATEGORY: u32 = 32785;
pub const VAR_MON_BOX_ID: u32 = 32786;
pub const VAR_MON_BOX_POS: u32 = 32787;
pub const VAR_UNUSED_0x8014: u32 = 32788;
pub const VAR_TRAINER_BATTLE_OPPONENT_A: u32 = 32789;
pub const SPECIAL_VARS_END: u32 = 32789;
pub const TRIGGER_RUN_IMMEDIATELY: u32 = 0;
pub const VAR_TEMP_CHALLENGE_STATUS: u32 = 16384;
pub const VAR_TEMP_MIXED_RECORDS: u32 = 16384;
pub const VAR_TEMP_RECORD_MIX_GIFT_ITEM: u32 = 16385;
pub const VAR_TEMP_PLAYING_PYRAMID_MUSIC: u32 = 16398;
pub const VAR_TEMP_FRONTIER_TUTOR_SELECTION: u32 = 16397;
pub const VAR_TEMP_FRONTIER_TUTOR_ID: u32 = 16398;
pub const VAR_TEMP_TRANSFERRED_SPECIES: u32 = 16385;
pub const SPECIES_NONE: u32 = 0;
pub const SPECIES_BULBASAUR: u32 = 1;
pub const SPECIES_IVYSAUR: u32 = 2;
pub const SPECIES_VENUSAUR: u32 = 3;
pub const SPECIES_CHARMANDER: u32 = 4;
pub const SPECIES_CHARMELEON: u32 = 5;
pub const SPECIES_CHARIZARD: u32 = 6;
pub const SPECIES_SQUIRTLE: u32 = 7;
pub const SPECIES_WARTORTLE: u32 = 8;
pub const SPECIES_BLASTOISE: u32 = 9;
pub const SPECIES_CATERPIE: u32 = 10;
pub const SPECIES_METAPOD: u32 = 11;
pub const SPECIES_BUTTERFREE: u32 = 12;
pub const SPECIES_WEEDLE: u32 = 13;
pub const SPECIES_KAKUNA: u32 = 14;
pub const SPECIES_BEEDRILL: u32 = 15;
pub const SPECIES_PIDGEY: u32 = 16;
pub const SPECIES_PIDGEOTTO: u32 = 17;
pub const SPECIES_PIDGEOT: u32 = 18;
pub const SPECIES_RATTATA: u32 = 19;
pub const SPECIES_RATICATE: u32 = 20;
pub const SPECIES_SPEAROW: u32 = 21;
pub const SPECIES_FEAROW: u32 = 22;
pub const SPECIES_EKANS: u32 = 23;
pub const SPECIES_ARBOK: u32 = 24;
pub const SPECIES_PIKACHU: u32 = 25;
pub const SPECIES_RAICHU: u32 = 26;
pub const SPECIES_SANDSHREW: u32 = 27;
pub const SPECIES_SANDSLASH: u32 = 28;
pub const SPECIES_NIDORAN_F: u32 = 29;
pub const SPECIES_NIDORINA: u32 = 30;
pub const SPECIES_NIDOQUEEN: u32 = 31;
pub const SPECIES_NIDORAN_M: u32 = 32;
pub const SPECIES_NIDORINO: u32 = 33;
pub const SPECIES_NIDOKING: u32 = 34;
pub const SPECIES_CLEFAIRY: u32 = 35;
pub const SPECIES_CLEFABLE: u32 = 36;
pub const SPECIES_VULPIX: u32 = 37;
pub const SPECIES_NINETALES: u32 = 38;
pub const SPECIES_JIGGLYPUFF: u32 = 39;
pub const SPECIES_WIGGLYTUFF: u32 = 40;
pub const SPECIES_ZUBAT: u32 = 41;
pub const SPECIES_GOLBAT: u32 = 42;
pub const SPECIES_ODDISH: u32 = 43;
pub const SPECIES_GLOOM: u32 = 44;
pub const SPECIES_VILEPLUME: u32 = 45;
pub const SPECIES_PARAS: u32 = 46;
pub const SPECIES_PARASECT: u32 = 47;
pub const SPECIES_VENONAT: u32 = 48;
pub const SPECIES_VENOMOTH: u32 = 49;
pub const SPECIES_DIGLETT: u32 = 50;
pub const SPECIES_DUGTRIO: u32 = 51;
pub const SPECIES_MEOWTH: u32 = 52;
pub const SPECIES_PERSIAN: u32 = 53;
pub const SPECIES_PSYDUCK: u32 = 54;
pub const SPECIES_GOLDUCK: u32 = 55;
pub const SPECIES_MANKEY: u32 = 56;
pub const SPECIES_PRIMEAPE: u32 = 57;
pub const SPECIES_GROWLITHE: u32 = 58;
pub const SPECIES_ARCANINE: u32 = 59;
pub const SPECIES_POLIWAG: u32 = 60;
pub const SPECIES_POLIWHIRL: u32 = 61;
pub const SPECIES_POLIWRATH: u32 = 62;
pub const SPECIES_ABRA: u32 = 63;
pub const SPECIES_KADABRA: u32 = 64;
pub const SPECIES_ALAKAZAM: u32 = 65;
pub const SPECIES_MACHOP: u32 = 66;
pub const SPECIES_MACHOKE: u32 = 67;
pub const SPECIES_MACHAMP: u32 = 68;
pub const SPECIES_BELLSPROUT: u32 = 69;
pub const SPECIES_WEEPINBELL: u32 = 70;
pub const SPECIES_VICTREEBEL: u32 = 71;
pub const SPECIES_TENTACOOL: u32 = 72;
pub const SPECIES_TENTACRUEL: u32 = 73;
pub const SPECIES_GEODUDE: u32 = 74;
pub const SPECIES_GRAVELER: u32 = 75;
pub const SPECIES_GOLEM: u32 = 76;
pub const SPECIES_PONYTA: u32 = 77;
pub const SPECIES_RAPIDASH: u32 = 78;
pub const SPECIES_SLOWPOKE: u32 = 79;
pub const SPECIES_SLOWBRO: u32 = 80;
pub const SPECIES_MAGNEMITE: u32 = 81;
pub const SPECIES_MAGNETON: u32 = 82;
pub const SPECIES_FARFETCHD: u32 = 83;
pub const SPECIES_DODUO: u32 = 84;
pub const SPECIES_DODRIO: u32 = 85;
pub const SPECIES_SEEL: u32 = 86;
pub const SPECIES_DEWGONG: u32 = 87;
pub const SPECIES_GRIMER: u32 = 88;
pub const SPECIES_MUK: u32 = 89;
pub const SPECIES_SHELLDER: u32 = 90;
pub const SPECIES_CLOYSTER: u32 = 91;
pub const SPECIES_GASTLY: u32 = 92;
pub const SPECIES_HAUNTER: u32 = 93;
pub const SPECIES_GENGAR: u32 = 94;
pub const SPECIES_ONIX: u32 = 95;
pub const SPECIES_DROWZEE: u32 = 96;
pub const SPECIES_HYPNO: u32 = 97;
pub const SPECIES_KRABBY: u32 = 98;
pub const SPECIES_KINGLER: u32 = 99;
pub const SPECIES_VOLTORB: u32 = 100;
pub const SPECIES_ELECTRODE: u32 = 101;
pub const SPECIES_EXEGGCUTE: u32 = 102;
pub const SPECIES_EXEGGUTOR: u32 = 103;
pub const SPECIES_CUBONE: u32 = 104;
pub const SPECIES_MAROWAK: u32 = 105;
pub const SPECIES_HITMONLEE: u32 = 106;
pub const SPECIES_HITMONCHAN: u32 = 107;
pub const SPECIES_LICKITUNG: u32 = 108;
pub const SPECIES_KOFFING: u32 = 109;
pub const SPECIES_WEEZING: u32 = 110;
pub const SPECIES_RHYHORN: u32 = 111;
pub const SPECIES_RHYDON: u32 = 112;
pub const SPECIES_CHANSEY: u32 = 113;
pub const SPECIES_TANGELA: u32 = 114;
pub const SPECIES_KANGASKHAN: u32 = 115;
pub const SPECIES_HORSEA: u32 = 116;
pub const SPECIES_SEADRA: u32 = 117;
pub const SPECIES_GOLDEEN: u32 = 118;
pub const SPECIES_SEAKING: u32 = 119;
pub const SPECIES_STARYU: u32 = 120;
pub const SPECIES_STARMIE: u32 = 121;
pub const SPECIES_MR_MIME: u32 = 122;
pub const SPECIES_SCYTHER: u32 = 123;
pub const SPECIES_JYNX: u32 = 124;
pub const SPECIES_ELECTABUZZ: u32 = 125;
pub const SPECIES_MAGMAR: u32 = 126;
pub const SPECIES_PINSIR: u32 = 127;
pub const SPECIES_TAUROS: u32 = 128;
pub const SPECIES_MAGIKARP: u32 = 129;
pub const SPECIES_GYARADOS: u32 = 130;
pub const SPECIES_LAPRAS: u32 = 131;
pub const SPECIES_DITTO: u32 = 132;
pub const SPECIES_EEVEE: u32 = 133;
pub const SPECIES_VAPOREON: u32 = 134;
pub const SPECIES_JOLTEON: u32 = 135;
pub const SPECIES_FLAREON: u32 = 136;
pub const SPECIES_PORYGON: u32 = 137;
pub const SPECIES_OMANYTE: u32 = 138;
pub const SPECIES_OMASTAR: u32 = 139;
pub const SPECIES_KABUTO: u32 = 140;
pub const SPECIES_KABUTOPS: u32 = 141;
pub const SPECIES_AERODACTYL: u32 = 142;
pub const SPECIES_SNORLAX: u32 = 143;
pub const SPECIES_ARTICUNO: u32 = 144;
pub const SPECIES_ZAPDOS: u32 = 145;
pub const SPECIES_MOLTRES: u32 = 146;
pub const SPECIES_DRATINI: u32 = 147;
pub const SPECIES_DRAGONAIR: u32 = 148;
pub const SPECIES_DRAGONITE: u32 = 149;
pub const SPECIES_MEWTWO: u32 = 150;
pub const SPECIES_MEW: u32 = 151;
pub const SPECIES_CHIKORITA: u32 = 152;
pub const SPECIES_BAYLEEF: u32 = 153;
pub const SPECIES_MEGANIUM: u32 = 154;
pub const SPECIES_CYNDAQUIL: u32 = 155;
pub const SPECIES_QUILAVA: u32 = 156;
pub const SPECIES_TYPHLOSION: u32 = 157;
pub const SPECIES_TOTODILE: u32 = 158;
pub const SPECIES_CROCONAW: u32 = 159;
pub const SPECIES_FERALIGATR: u32 = 160;
pub const SPECIES_SENTRET: u32 = 161;
pub const SPECIES_FURRET: u32 = 162;
pub const SPECIES_HOOTHOOT: u32 = 163;
pub const SPECIES_NOCTOWL: u32 = 164;
pub const SPECIES_LEDYBA: u32 = 165;
pub const SPECIES_LEDIAN: u32 = 166;
pub const SPECIES_SPINARAK: u32 = 167;
pub const SPECIES_ARIADOS: u32 = 168;
pub const SPECIES_CROBAT: u32 = 169;
pub const SPECIES_CHINCHOU: u32 = 170;
pub const SPECIES_LANTURN: u32 = 171;
pub const SPECIES_PICHU: u32 = 172;
pub const SPECIES_CLEFFA: u32 = 173;
pub const SPECIES_IGGLYBUFF: u32 = 174;
pub const SPECIES_TOGEPI: u32 = 175;
pub const SPECIES_TOGETIC: u32 = 176;
pub const SPECIES_NATU: u32 = 177;
pub const SPECIES_XATU: u32 = 178;
pub const SPECIES_MAREEP: u32 = 179;
pub const SPECIES_FLAAFFY: u32 = 180;
pub const SPECIES_AMPHAROS: u32 = 181;
pub const SPECIES_BELLOSSOM: u32 = 182;
pub const SPECIES_MARILL: u32 = 183;
pub const SPECIES_AZUMARILL: u32 = 184;
pub const SPECIES_SUDOWOODO: u32 = 185;
pub const SPECIES_POLITOED: u32 = 186;
pub const SPECIES_HOPPIP: u32 = 187;
pub const SPECIES_SKIPLOOM: u32 = 188;
pub const SPECIES_JUMPLUFF: u32 = 189;
pub const SPECIES_AIPOM: u32 = 190;
pub const SPECIES_SUNKERN: u32 = 191;
pub const SPECIES_SUNFLORA: u32 = 192;
pub const SPECIES_YANMA: u32 = 193;
pub const SPECIES_WOOPER: u32 = 194;
pub const SPECIES_QUAGSIRE: u32 = 195;
pub const SPECIES_ESPEON: u32 = 196;
pub const SPECIES_UMBREON: u32 = 197;
pub const SPECIES_MURKROW: u32 = 198;
pub const SPECIES_SLOWKING: u32 = 199;
pub const SPECIES_MISDREAVUS: u32 = 200;
pub const SPECIES_UNOWN: u32 = 201;
pub const SPECIES_WOBBUFFET: u32 = 202;
pub const SPECIES_GIRAFARIG: u32 = 203;
pub const SPECIES_PINECO: u32 = 204;
pub const SPECIES_FORRETRESS: u32 = 205;
pub const SPECIES_DUNSPARCE: u32 = 206;
pub const SPECIES_GLIGAR: u32 = 207;
pub const SPECIES_STEELIX: u32 = 208;
pub const SPECIES_SNUBBULL: u32 = 209;
pub const SPECIES_GRANBULL: u32 = 210;
pub const SPECIES_QWILFISH: u32 = 211;
pub const SPECIES_SCIZOR: u32 = 212;
pub const SPECIES_SHUCKLE: u32 = 213;
pub const SPECIES_HERACROSS: u32 = 214;
pub const SPECIES_SNEASEL: u32 = 215;
pub const SPECIES_TEDDIURSA: u32 = 216;
pub const SPECIES_URSARING: u32 = 217;
pub const SPECIES_SLUGMA: u32 = 218;
pub const SPECIES_MAGCARGO: u32 = 219;
pub const SPECIES_SWINUB: u32 = 220;
pub const SPECIES_PILOSWINE: u32 = 221;
pub const SPECIES_CORSOLA: u32 = 222;
pub const SPECIES_REMORAID: u32 = 223;
pub const SPECIES_OCTILLERY: u32 = 224;
pub const SPECIES_DELIBIRD: u32 = 225;
pub const SPECIES_MANTINE: u32 = 226;
pub const SPECIES_SKARMORY: u32 = 227;
pub const SPECIES_HOUNDOUR: u32 = 228;
pub const SPECIES_HOUNDOOM: u32 = 229;
pub const SPECIES_KINGDRA: u32 = 230;
pub const SPECIES_PHANPY: u32 = 231;
pub const SPECIES_DONPHAN: u32 = 232;
pub const SPECIES_PORYGON2: u32 = 233;
pub const SPECIES_STANTLER: u32 = 234;
pub const SPECIES_SMEARGLE: u32 = 235;
pub const SPECIES_TYROGUE: u32 = 236;
pub const SPECIES_HITMONTOP: u32 = 237;
pub const SPECIES_SMOOCHUM: u32 = 238;
pub const SPECIES_ELEKID: u32 = 239;
pub const SPECIES_MAGBY: u32 = 240;
pub const SPECIES_MILTANK: u32 = 241;
pub const SPECIES_BLISSEY: u32 = 242;
pub const SPECIES_RAIKOU: u32 = 243;
pub const SPECIES_ENTEI: u32 = 244;
pub const SPECIES_SUICUNE: u32 = 245;
pub const SPECIES_LARVITAR: u32 = 246;
pub const SPECIES_PUPITAR: u32 = 247;
pub const SPECIES_TYRANITAR: u32 = 248;
pub const SPECIES_LUGIA: u32 = 249;
pub const SPECIES_HO_OH: u32 = 250;
pub const SPECIES_CELEBI: u32 = 251;
pub const SPECIES_TREECKO: u32 = 252;
pub const SPECIES_GROVYLE: u32 = 253;
pub const SPECIES_SCEPTILE: u32 = 254;
pub const SPECIES_TORCHIC: u32 = 255;
pub const SPECIES_COMBUSKEN: u32 = 256;
pub const SPECIES_BLAZIKEN: u32 = 257;
pub const SPECIES_MUDKIP: u32 = 258;
pub const SPECIES_MARSHTOMP: u32 = 259;
pub const SPECIES_SWAMPERT: u32 = 260;
pub const SPECIES_POOCHYENA: u32 = 261;
pub const SPECIES_MIGHTYENA: u32 = 262;
pub const SPECIES_ZIGZAGOON: u32 = 263;
pub const SPECIES_LINOONE: u32 = 264;
pub const SPECIES_WURMPLE: u32 = 265;
pub const SPECIES_SILCOON: u32 = 266;
pub const SPECIES_BEAUTIFLY: u32 = 267;
pub const SPECIES_CASCOON: u32 = 268;
pub const SPECIES_DUSTOX: u32 = 269;
pub const SPECIES_LOTAD: u32 = 270;
pub const SPECIES_LOMBRE: u32 = 271;
pub const SPECIES_LUDICOLO: u32 = 272;
pub const SPECIES_SEEDOT: u32 = 273;
pub const SPECIES_NUZLEAF: u32 = 274;
pub const SPECIES_SHIFTRY: u32 = 275;
pub const SPECIES_TAILLOW: u32 = 276;
pub const SPECIES_SWELLOW: u32 = 277;
pub const SPECIES_WINGULL: u32 = 278;
pub const SPECIES_PELIPPER: u32 = 279;
pub const SPECIES_RALTS: u32 = 280;
pub const SPECIES_KIRLIA: u32 = 281;
pub const SPECIES_GARDEVOIR: u32 = 282;
pub const SPECIES_SURSKIT: u32 = 283;
pub const SPECIES_MASQUERAIN: u32 = 284;
pub const SPECIES_SHROOMISH: u32 = 285;
pub const SPECIES_BRELOOM: u32 = 286;
pub const SPECIES_SLAKOTH: u32 = 287;
pub const SPECIES_VIGOROTH: u32 = 288;
pub const SPECIES_SLAKING: u32 = 289;
pub const SPECIES_NINCADA: u32 = 290;
pub const SPECIES_NINJASK: u32 = 291;
pub const SPECIES_SHEDINJA: u32 = 292;
pub const SPECIES_WHISMUR: u32 = 293;
pub const SPECIES_LOUDRED: u32 = 294;
pub const SPECIES_EXPLOUD: u32 = 295;
pub const SPECIES_MAKUHITA: u32 = 296;
pub const SPECIES_HARIYAMA: u32 = 297;
pub const SPECIES_AZURILL: u32 = 298;
pub const SPECIES_NOSEPASS: u32 = 299;
pub const SPECIES_SKITTY: u32 = 300;
pub const SPECIES_DELCATTY: u32 = 301;
pub const SPECIES_SABLEYE: u32 = 302;
pub const SPECIES_MAWILE: u32 = 303;
pub const SPECIES_ARON: u32 = 304;
pub const SPECIES_LAIRON: u32 = 305;
pub const SPECIES_AGGRON: u32 = 306;
pub const SPECIES_MEDITITE: u32 = 307;
pub const SPECIES_MEDICHAM: u32 = 308;
pub const SPECIES_ELECTRIKE: u32 = 309;
pub const SPECIES_MANECTRIC: u32 = 310;
pub const SPECIES_PLUSLE: u32 = 311;
pub const SPECIES_MINUN: u32 = 312;
pub const SPECIES_VOLBEAT: u32 = 313;
pub const SPECIES_ILLUMISE: u32 = 314;
pub const SPECIES_ROSELIA: u32 = 315;
pub const SPECIES_GULPIN: u32 = 316;
pub const SPECIES_SWALOT: u32 = 317;
pub const SPECIES_CARVANHA: u32 = 318;
pub const SPECIES_SHARPEDO: u32 = 319;
pub const SPECIES_WAILMER: u32 = 320;
pub const SPECIES_WAILORD: u32 = 321;
pub const SPECIES_NUMEL: u32 = 322;
pub const SPECIES_CAMERUPT: u32 = 323;
pub const SPECIES_TORKOAL: u32 = 324;
pub const SPECIES_SPOINK: u32 = 325;
pub const SPECIES_GRUMPIG: u32 = 326;
pub const SPECIES_SPINDA: u32 = 327;
pub const SPECIES_TRAPINCH: u32 = 328;
pub const SPECIES_VIBRAVA: u32 = 329;
pub const SPECIES_FLYGON: u32 = 330;
pub const SPECIES_CACNEA: u32 = 331;
pub const SPECIES_CACTURNE: u32 = 332;
pub const SPECIES_SWABLU: u32 = 333;
pub const SPECIES_ALTARIA: u32 = 334;
pub const SPECIES_ZANGOOSE: u32 = 335;
pub const SPECIES_SEVIPER: u32 = 336;
pub const SPECIES_LUNATONE: u32 = 337;
pub const SPECIES_SOLROCK: u32 = 338;
pub const SPECIES_BARBOACH: u32 = 339;
pub const SPECIES_WHISCASH: u32 = 340;
pub const SPECIES_CORPHISH: u32 = 341;
pub const SPECIES_CRAWDAUNT: u32 = 342;
pub const SPECIES_BALTOY: u32 = 343;
pub const SPECIES_CLAYDOL: u32 = 344;
pub const SPECIES_LILEEP: u32 = 345;
pub const SPECIES_CRADILY: u32 = 346;
pub const SPECIES_ANORITH: u32 = 347;
pub const SPECIES_ARMALDO: u32 = 348;
pub const SPECIES_FEEBAS: u32 = 349;
pub const SPECIES_MILOTIC: u32 = 350;
pub const SPECIES_CASTFORM_NORMAL: u32 = 351;
pub const SPECIES_KECLEON: u32 = 352;
pub const SPECIES_SHUPPET: u32 = 353;
pub const SPECIES_BANETTE: u32 = 354;
pub const SPECIES_DUSKULL: u32 = 355;
pub const SPECIES_DUSCLOPS: u32 = 356;
pub const SPECIES_TROPIUS: u32 = 357;
pub const SPECIES_CHIMECHO: u32 = 358;
pub const SPECIES_ABSOL: u32 = 359;
pub const SPECIES_WYNAUT: u32 = 360;
pub const SPECIES_SNORUNT: u32 = 361;
pub const SPECIES_GLALIE: u32 = 362;
pub const SPECIES_SPHEAL: u32 = 363;
pub const SPECIES_SEALEO: u32 = 364;
pub const SPECIES_WALREIN: u32 = 365;
pub const SPECIES_CLAMPERL: u32 = 366;
pub const SPECIES_HUNTAIL: u32 = 367;
pub const SPECIES_GOREBYSS: u32 = 368;
pub const SPECIES_RELICANTH: u32 = 369;
pub const SPECIES_LUVDISC: u32 = 370;
pub const SPECIES_BAGON: u32 = 371;
pub const SPECIES_SHELGON: u32 = 372;
pub const SPECIES_SALAMENCE: u32 = 373;
pub const SPECIES_BELDUM: u32 = 374;
pub const SPECIES_METANG: u32 = 375;
pub const SPECIES_METAGROSS: u32 = 376;
pub const SPECIES_REGIROCK: u32 = 377;
pub const SPECIES_REGICE: u32 = 378;
pub const SPECIES_REGISTEEL: u32 = 379;
pub const SPECIES_LATIAS: u32 = 380;
pub const SPECIES_LATIOS: u32 = 381;
pub const SPECIES_KYOGRE: u32 = 382;
pub const SPECIES_GROUDON: u32 = 383;
pub const SPECIES_RAYQUAZA: u32 = 384;
pub const SPECIES_JIRACHI: u32 = 385;
pub const SPECIES_DEOXYS_NORMAL: u32 = 386;
pub const SPECIES_TURTWIG: u32 = 387;
pub const SPECIES_GROTLE: u32 = 388;
pub const SPECIES_TORTERRA: u32 = 389;
pub const SPECIES_CHIMCHAR: u32 = 390;
pub const SPECIES_MONFERNO: u32 = 391;
pub const SPECIES_INFERNAPE: u32 = 392;
pub const SPECIES_PIPLUP: u32 = 393;
pub const SPECIES_PRINPLUP: u32 = 394;
pub const SPECIES_EMPOLEON: u32 = 395;
pub const SPECIES_STARLY: u32 = 396;
pub const SPECIES_STARAVIA: u32 = 397;
pub const SPECIES_STARAPTOR: u32 = 398;
pub const SPECIES_BIDOOF: u32 = 399;
pub const SPECIES_BIBAREL: u32 = 400;
pub const SPECIES_KRICKETOT: u32 = 401;
pub const SPECIES_KRICKETUNE: u32 = 402;
pub const SPECIES_SHINX: u32 = 403;
pub const SPECIES_LUXIO: u32 = 404;
pub const SPECIES_LUXRAY: u32 = 405;
pub const SPECIES_BUDEW: u32 = 406;
pub const SPECIES_ROSERADE: u32 = 407;
pub const SPECIES_CRANIDOS: u32 = 408;
pub const SPECIES_RAMPARDOS: u32 = 409;
pub const SPECIES_SHIELDON: u32 = 410;
pub const SPECIES_BASTIODON: u32 = 411;
pub const SPECIES_BURMY_PLANT: u32 = 412;
pub const SPECIES_BURMY: u32 = 412;
pub const SPECIES_WORMADAM_PLANT: u32 = 413;
pub const SPECIES_WORMADAM: u32 = 413;
pub const SPECIES_MOTHIM_PLANT: u32 = 414;
pub const SPECIES_MOTHIM: u32 = 414;
pub const SPECIES_COMBEE: u32 = 415;
pub const SPECIES_VESPIQUEN: u32 = 416;
pub const SPECIES_PACHIRISU: u32 = 417;
pub const SPECIES_BUIZEL: u32 = 418;
pub const SPECIES_FLOATZEL: u32 = 419;
pub const SPECIES_CHERUBI: u32 = 420;
pub const SPECIES_CHERRIM_OVERCAST: u32 = 421;
pub const SPECIES_SHELLOS_WEST: u32 = 422;
pub const SPECIES_SHELLOS: u32 = 422;
pub const SPECIES_GASTRODON_WEST: u32 = 423;
pub const SPECIES_GASTRODON: u32 = 423;
pub const SPECIES_AMBIPOM: u32 = 424;
pub const SPECIES_DRIFLOON: u32 = 425;
pub const SPECIES_DRIFBLIM: u32 = 426;
pub const SPECIES_BUNEARY: u32 = 427;
pub const SPECIES_LOPUNNY: u32 = 428;
pub const SPECIES_MISMAGIUS: u32 = 429;
pub const SPECIES_HONCHKROW: u32 = 430;
pub const SPECIES_GLAMEOW: u32 = 431;
pub const SPECIES_PURUGLY: u32 = 432;
pub const SPECIES_CHINGLING: u32 = 433;
pub const SPECIES_STUNKY: u32 = 434;
pub const SPECIES_SKUNTANK: u32 = 435;
pub const SPECIES_BRONZOR: u32 = 436;
pub const SPECIES_BRONZONG: u32 = 437;
pub const SPECIES_BONSLY: u32 = 438;
pub const SPECIES_MIME_JR: u32 = 439;
pub const SPECIES_HAPPINY: u32 = 440;
pub const SPECIES_CHATOT: u32 = 441;
pub const SPECIES_SPIRITOMB: u32 = 442;
pub const SPECIES_GIBLE: u32 = 443;
pub const SPECIES_GABITE: u32 = 444;
pub const SPECIES_GARCHOMP: u32 = 445;
pub const SPECIES_MUNCHLAX: u32 = 446;
pub const SPECIES_RIOLU: u32 = 447;
pub const SPECIES_LUCARIO: u32 = 448;
pub const SPECIES_HIPPOPOTAS: u32 = 449;
pub const SPECIES_HIPPOWDON: u32 = 450;
pub const SPECIES_SKORUPI: u32 = 451;
pub const SPECIES_DRAPION: u32 = 452;
pub const SPECIES_CROAGUNK: u32 = 453;
pub const SPECIES_TOXICROAK: u32 = 454;
pub const SPECIES_CARNIVINE: u32 = 455;
pub const SPECIES_FINNEON: u32 = 456;
pub const SPECIES_LUMINEON: u32 = 457;
pub const SPECIES_MANTYKE: u32 = 458;
pub const SPECIES_SNOVER: u32 = 459;
pub const SPECIES_ABOMASNOW: u32 = 460;
pub const SPECIES_WEAVILE: u32 = 461;
pub const SPECIES_MAGNEZONE: u32 = 462;
pub const SPECIES_LICKILICKY: u32 = 463;
pub const SPECIES_RHYPERIOR: u32 = 464;
pub const SPECIES_TANGROWTH: u32 = 465;
pub const SPECIES_ELECTIVIRE: u32 = 466;
pub const SPECIES_MAGMORTAR: u32 = 467;
pub const SPECIES_TOGEKISS: u32 = 468;
pub const SPECIES_YANMEGA: u32 = 469;
pub const SPECIES_LEAFEON: u32 = 470;
pub const SPECIES_GLACEON: u32 = 471;
pub const SPECIES_GLISCOR: u32 = 472;
pub const SPECIES_MAMOSWINE: u32 = 473;
pub const SPECIES_PORYGON_Z: u32 = 474;
pub const SPECIES_GALLADE: u32 = 475;
pub const SPECIES_PROBOPASS: u32 = 476;
pub const SPECIES_DUSKNOIR: u32 = 477;
pub const SPECIES_FROSLASS: u32 = 478;
pub const SPECIES_ROTOM: u32 = 479;
pub const SPECIES_UXIE: u32 = 480;
pub const SPECIES_MESPRIT: u32 = 481;
pub const SPECIES_AZELF: u32 = 482;
pub const SPECIES_DIALGA: u32 = 483;
pub const SPECIES_PALKIA: u32 = 484;
pub const SPECIES_HEATRAN: u32 = 485;
pub const SPECIES_REGIGIGAS: u32 = 486;
pub const SPECIES_GIRATINA_ALTERED: u32 = 487;
pub const SPECIES_CRESSELIA: u32 = 488;
pub const SPECIES_PHIONE: u32 = 489;
pub const SPECIES_MANAPHY: u32 = 490;
pub const SPECIES_DARKRAI: u32 = 491;
pub const SPECIES_SHAYMIN_LAND: u32 = 492;
pub const SPECIES_ARCEUS_NORMAL: u32 = 493;
pub const SPECIES_VICTINI: u32 = 494;
pub const SPECIES_SNIVY: u32 = 495;
pub const SPECIES_SERVINE: u32 = 496;
pub const SPECIES_SERPERIOR: u32 = 497;
pub const SPECIES_TEPIG: u32 = 498;
pub const SPECIES_PIGNITE: u32 = 499;
pub const SPECIES_EMBOAR: u32 = 500;
pub const SPECIES_OSHAWOTT: u32 = 501;
pub const SPECIES_DEWOTT: u32 = 502;
pub const SPECIES_SAMUROTT: u32 = 503;
pub const SPECIES_PATRAT: u32 = 504;
pub const SPECIES_WATCHOG: u32 = 505;
pub const SPECIES_LILLIPUP: u32 = 506;
pub const SPECIES_HERDIER: u32 = 507;
pub const SPECIES_STOUTLAND: u32 = 508;
pub const SPECIES_PURRLOIN: u32 = 509;
pub const SPECIES_LIEPARD: u32 = 510;
pub const SPECIES_PANSAGE: u32 = 511;
pub const SPECIES_SIMISAGE: u32 = 512;
pub const SPECIES_PANSEAR: u32 = 513;
pub const SPECIES_SIMISEAR: u32 = 514;
pub const SPECIES_PANPOUR: u32 = 515;
pub const SPECIES_SIMIPOUR: u32 = 516;
pub const SPECIES_MUNNA: u32 = 517;
pub const SPECIES_MUSHARNA: u32 = 518;
pub const SPECIES_PIDOVE: u32 = 519;
pub const SPECIES_TRANQUILL: u32 = 520;
pub const SPECIES_UNFEZANT: u32 = 521;
pub const SPECIES_BLITZLE: u32 = 522;
pub const SPECIES_ZEBSTRIKA: u32 = 523;
pub const SPECIES_ROGGENROLA: u32 = 524;
pub const SPECIES_BOLDORE: u32 = 525;
pub const SPECIES_GIGALITH: u32 = 526;
pub const SPECIES_WOOBAT: u32 = 527;
pub const SPECIES_SWOOBAT: u32 = 528;
pub const SPECIES_DRILBUR: u32 = 529;
pub const SPECIES_EXCADRILL: u32 = 530;
pub const SPECIES_AUDINO: u32 = 531;
pub const SPECIES_TIMBURR: u32 = 532;
pub const SPECIES_GURDURR: u32 = 533;
pub const SPECIES_CONKELDURR: u32 = 534;
pub const SPECIES_TYMPOLE: u32 = 535;
pub const SPECIES_PALPITOAD: u32 = 536;
pub const SPECIES_SEISMITOAD: u32 = 537;
pub const SPECIES_THROH: u32 = 538;
pub const SPECIES_SAWK: u32 = 539;
pub const SPECIES_SEWADDLE: u32 = 540;
pub const SPECIES_SWADLOON: u32 = 541;
pub const SPECIES_LEAVANNY: u32 = 542;
pub const SPECIES_VENIPEDE: u32 = 543;
pub const SPECIES_WHIRLIPEDE: u32 = 544;
pub const SPECIES_SCOLIPEDE: u32 = 545;
pub const SPECIES_COTTONEE: u32 = 546;
pub const SPECIES_WHIMSICOTT: u32 = 547;
pub const SPECIES_PETILIL: u32 = 548;
pub const SPECIES_LILLIGANT: u32 = 549;
pub const SPECIES_BASCULIN_RED_STRIPED: u32 = 550;
pub const SPECIES_SANDILE: u32 = 551;
pub const SPECIES_KROKOROK: u32 = 552;
pub const SPECIES_KROOKODILE: u32 = 553;
pub const SPECIES_DARUMAKA: u32 = 554;
pub const SPECIES_DARMANITAN_STANDARD: u32 = 555;
pub const SPECIES_MARACTUS: u32 = 556;
pub const SPECIES_DWEBBLE: u32 = 557;
pub const SPECIES_CRUSTLE: u32 = 558;
pub const SPECIES_SCRAGGY: u32 = 559;
pub const SPECIES_SCRAFTY: u32 = 560;
pub const SPECIES_SIGILYPH: u32 = 561;
pub const SPECIES_YAMASK: u32 = 562;
pub const SPECIES_COFAGRIGUS: u32 = 563;
pub const SPECIES_TIRTOUGA: u32 = 564;
pub const SPECIES_CARRACOSTA: u32 = 565;
pub const SPECIES_ARCHEN: u32 = 566;
pub const SPECIES_ARCHEOPS: u32 = 567;
pub const SPECIES_TRUBBISH: u32 = 568;
pub const SPECIES_GARBODOR: u32 = 569;
pub const SPECIES_ZORUA: u32 = 570;
pub const SPECIES_ZOROARK: u32 = 571;
pub const SPECIES_MINCCINO: u32 = 572;
pub const SPECIES_CINCCINO: u32 = 573;
pub const SPECIES_GOTHITA: u32 = 574;
pub const SPECIES_GOTHORITA: u32 = 575;
pub const SPECIES_GOTHITELLE: u32 = 576;
pub const SPECIES_SOLOSIS: u32 = 577;
pub const SPECIES_DUOSION: u32 = 578;
pub const SPECIES_REUNICLUS: u32 = 579;
pub const SPECIES_DUCKLETT: u32 = 580;
pub const SPECIES_SWANNA: u32 = 581;
pub const SPECIES_VANILLITE: u32 = 582;
pub const SPECIES_VANILLISH: u32 = 583;
pub const SPECIES_VANILLUXE: u32 = 584;
pub const SPECIES_DEERLING_SPRING: u32 = 585;
pub const SPECIES_SAWSBUCK_SPRING: u32 = 586;
pub const SPECIES_EMOLGA: u32 = 587;
pub const SPECIES_KARRABLAST: u32 = 588;
pub const SPECIES_ESCAVALIER: u32 = 589;
pub const SPECIES_FOONGUS: u32 = 590;
pub const SPECIES_AMOONGUSS: u32 = 591;
pub const SPECIES_FRILLISH: u32 = 592;
pub const SPECIES_JELLICENT: u32 = 593;
pub const SPECIES_ALOMOMOLA: u32 = 594;
pub const SPECIES_JOLTIK: u32 = 595;
pub const SPECIES_GALVANTULA: u32 = 596;
pub const SPECIES_FERROSEED: u32 = 597;
pub const SPECIES_FERROTHORN: u32 = 598;
pub const SPECIES_KLINK: u32 = 599;
pub const SPECIES_KLANG: u32 = 600;
pub const SPECIES_KLINKLANG: u32 = 601;
pub const SPECIES_TYNAMO: u32 = 602;
pub const SPECIES_EELEKTRIK: u32 = 603;
pub const SPECIES_EELEKTROSS: u32 = 604;
pub const SPECIES_ELGYEM: u32 = 605;
pub const SPECIES_BEHEEYEM: u32 = 606;
pub const SPECIES_LITWICK: u32 = 607;
pub const SPECIES_LAMPENT: u32 = 608;
pub const SPECIES_CHANDELURE: u32 = 609;
pub const SPECIES_AXEW: u32 = 610;
pub const SPECIES_FRAXURE: u32 = 611;
pub const SPECIES_HAXORUS: u32 = 612;
pub const SPECIES_CUBCHOO: u32 = 613;
pub const SPECIES_BEARTIC: u32 = 614;
pub const SPECIES_CRYOGONAL: u32 = 615;
pub const SPECIES_SHELMET: u32 = 616;
pub const SPECIES_ACCELGOR: u32 = 617;
pub const SPECIES_STUNFISK: u32 = 618;
pub const SPECIES_MIENFOO: u32 = 619;
pub const SPECIES_MIENSHAO: u32 = 620;
pub const SPECIES_DRUDDIGON: u32 = 621;
pub const SPECIES_GOLETT: u32 = 622;
pub const SPECIES_GOLURK: u32 = 623;
pub const SPECIES_PAWNIARD: u32 = 624;
pub const SPECIES_BISHARP: u32 = 625;
pub const SPECIES_BOUFFALANT: u32 = 626;
pub const SPECIES_RUFFLET: u32 = 627;
pub const SPECIES_BRAVIARY: u32 = 628;
pub const SPECIES_VULLABY: u32 = 629;
pub const SPECIES_MANDIBUZZ: u32 = 630;
pub const SPECIES_HEATMOR: u32 = 631;
pub const SPECIES_DURANT: u32 = 632;
pub const SPECIES_DEINO: u32 = 633;
pub const SPECIES_ZWEILOUS: u32 = 634;
pub const SPECIES_HYDREIGON: u32 = 635;
pub const SPECIES_LARVESTA: u32 = 636;
pub const SPECIES_VOLCARONA: u32 = 637;
pub const SPECIES_COBALION: u32 = 638;
pub const SPECIES_TERRAKION: u32 = 639;
pub const SPECIES_VIRIZION: u32 = 640;
pub const SPECIES_TORNADUS_INCARNATE: u32 = 641;
pub const SPECIES_THUNDURUS_INCARNATE: u32 = 642;
pub const SPECIES_RESHIRAM: u32 = 643;
pub const SPECIES_ZEKROM: u32 = 644;
pub const SPECIES_LANDORUS_INCARNATE: u32 = 645;
pub const SPECIES_KYUREM: u32 = 646;
pub const SPECIES_KELDEO_ORDINARY: u32 = 647;
pub const SPECIES_MELOETTA_ARIA: u32 = 648;
pub const SPECIES_GENESECT: u32 = 649;
pub const SPECIES_CHESPIN: u32 = 650;
pub const SPECIES_QUILLADIN: u32 = 651;
pub const SPECIES_CHESNAUGHT: u32 = 652;
pub const SPECIES_FENNEKIN: u32 = 653;
pub const SPECIES_BRAIXEN: u32 = 654;
pub const SPECIES_DELPHOX: u32 = 655;
pub const SPECIES_FROAKIE: u32 = 656;
pub const SPECIES_FROGADIER: u32 = 657;
pub const SPECIES_GRENINJA: u32 = 658;
pub const SPECIES_BUNNELBY: u32 = 659;
pub const SPECIES_DIGGERSBY: u32 = 660;
pub const SPECIES_FLETCHLING: u32 = 661;
pub const SPECIES_FLETCHINDER: u32 = 662;
pub const SPECIES_TALONFLAME: u32 = 663;
pub const SPECIES_SCATTERBUG_ICY_SNOW: u32 = 664;
pub const SPECIES_SPEWPA_ICY_SNOW: u32 = 665;
pub const SPECIES_VIVILLON_ICY_SNOW: u32 = 666;
pub const SPECIES_LITLEO: u32 = 667;
pub const SPECIES_PYROAR: u32 = 668;
pub const SPECIES_FLABEBE_RED: u32 = 669;
pub const SPECIES_FLOETTE_RED: u32 = 670;
pub const SPECIES_FLORGES_RED: u32 = 671;
pub const SPECIES_SKIDDO: u32 = 672;
pub const SPECIES_GOGOAT: u32 = 673;
pub const SPECIES_PANCHAM: u32 = 674;
pub const SPECIES_PANGORO: u32 = 675;
pub const SPECIES_FURFROU_NATURAL: u32 = 676;
pub const SPECIES_ESPURR: u32 = 677;
pub const SPECIES_MEOWSTIC_M: u32 = 678;
pub const SPECIES_HONEDGE: u32 = 679;
pub const SPECIES_DOUBLADE: u32 = 680;
pub const SPECIES_AEGISLASH_SHIELD: u32 = 681;
pub const SPECIES_SPRITZEE: u32 = 682;
pub const SPECIES_AROMATISSE: u32 = 683;
pub const SPECIES_SWIRLIX: u32 = 684;
pub const SPECIES_SLURPUFF: u32 = 685;
pub const SPECIES_INKAY: u32 = 686;
pub const SPECIES_MALAMAR: u32 = 687;
pub const SPECIES_BINACLE: u32 = 688;
pub const SPECIES_BARBARACLE: u32 = 689;
pub const SPECIES_SKRELP: u32 = 690;
pub const SPECIES_DRAGALGE: u32 = 691;
pub const SPECIES_CLAUNCHER: u32 = 692;
pub const SPECIES_CLAWITZER: u32 = 693;
pub const SPECIES_HELIOPTILE: u32 = 694;
pub const SPECIES_HELIOLISK: u32 = 695;
pub const SPECIES_TYRUNT: u32 = 696;
pub const SPECIES_TYRANTRUM: u32 = 697;
pub const SPECIES_AMAURA: u32 = 698;
pub const SPECIES_AURORUS: u32 = 699;
pub const SPECIES_SYLVEON: u32 = 700;
pub const SPECIES_HAWLUCHA: u32 = 701;
pub const SPECIES_DEDENNE: u32 = 702;
pub const SPECIES_CARBINK: u32 = 703;
pub const SPECIES_GOOMY: u32 = 704;
pub const SPECIES_SLIGGOO: u32 = 705;
pub const SPECIES_GOODRA: u32 = 706;
pub const SPECIES_KLEFKI: u32 = 707;
pub const SPECIES_PHANTUMP: u32 = 708;
pub const SPECIES_TREVENANT: u32 = 709;
pub const SPECIES_PUMPKABOO_AVERAGE: u32 = 710;
pub const SPECIES_GOURGEIST_AVERAGE: u32 = 711;
pub const SPECIES_BERGMITE: u32 = 712;
pub const SPECIES_AVALUGG: u32 = 713;
pub const SPECIES_NOIBAT: u32 = 714;
pub const SPECIES_NOIVERN: u32 = 715;
pub const SPECIES_XERNEAS_NEUTRAL: u32 = 716;
pub const SPECIES_YVELTAL: u32 = 717;
pub const SPECIES_ZYGARDE_50: u32 = 718;
pub const SPECIES_DIANCIE: u32 = 719;
pub const SPECIES_HOOPA_CONFINED: u32 = 720;
pub const SPECIES_VOLCANION: u32 = 721;
pub const SPECIES_ROWLET: u32 = 722;
pub const SPECIES_DARTRIX: u32 = 723;
pub const SPECIES_DECIDUEYE: u32 = 724;
pub const SPECIES_LITTEN: u32 = 725;
pub const SPECIES_TORRACAT: u32 = 726;
pub const SPECIES_INCINEROAR: u32 = 727;
pub const SPECIES_POPPLIO: u32 = 728;
pub const SPECIES_BRIONNE: u32 = 729;
pub const SPECIES_PRIMARINA: u32 = 730;
pub const SPECIES_PIKIPEK: u32 = 731;
pub const SPECIES_TRUMBEAK: u32 = 732;
pub const SPECIES_TOUCANNON: u32 = 733;
pub const SPECIES_YUNGOOS: u32 = 734;
pub const SPECIES_GUMSHOOS: u32 = 735;
pub const SPECIES_GRUBBIN: u32 = 736;
pub const SPECIES_CHARJABUG: u32 = 737;
pub const SPECIES_VIKAVOLT: u32 = 738;
pub const SPECIES_CRABRAWLER: u32 = 739;
pub const SPECIES_CRABOMINABLE: u32 = 740;
pub const SPECIES_ORICORIO_BAILE: u32 = 741;
pub const SPECIES_CUTIEFLY: u32 = 742;
pub const SPECIES_RIBOMBEE: u32 = 743;
pub const SPECIES_ROCKRUFF: u32 = 744;
pub const SPECIES_LYCANROC_MIDDAY: u32 = 745;
pub const SPECIES_WISHIWASHI_SOLO: u32 = 746;
pub const SPECIES_MAREANIE: u32 = 747;
pub const SPECIES_TOXAPEX: u32 = 748;
pub const SPECIES_MUDBRAY: u32 = 749;
pub const SPECIES_MUDSDALE: u32 = 750;
pub const SPECIES_DEWPIDER: u32 = 751;
pub const SPECIES_ARAQUANID: u32 = 752;
pub const SPECIES_FOMANTIS: u32 = 753;
pub const SPECIES_LURANTIS: u32 = 754;
pub const SPECIES_MORELULL: u32 = 755;
pub const SPECIES_SHIINOTIC: u32 = 756;
pub const SPECIES_SALANDIT: u32 = 757;
pub const SPECIES_SALAZZLE: u32 = 758;
pub const SPECIES_STUFFUL: u32 = 759;
pub const SPECIES_BEWEAR: u32 = 760;
pub const SPECIES_BOUNSWEET: u32 = 761;
pub const SPECIES_STEENEE: u32 = 762;
pub const SPECIES_TSAREENA: u32 = 763;
pub const SPECIES_COMFEY: u32 = 764;
pub const SPECIES_ORANGURU: u32 = 765;
pub const SPECIES_PASSIMIAN: u32 = 766;
pub const SPECIES_WIMPOD: u32 = 767;
pub const SPECIES_GOLISOPOD: u32 = 768;
pub const SPECIES_SANDYGAST: u32 = 769;
pub const SPECIES_PALOSSAND: u32 = 770;
pub const SPECIES_PYUKUMUKU: u32 = 771;
pub const SPECIES_TYPE_NULL: u32 = 772;
pub const SPECIES_SILVALLY_NORMAL: u32 = 773;
pub const SPECIES_MINIOR_METEOR_RED: u32 = 774;
pub const SPECIES_KOMALA: u32 = 775;
pub const SPECIES_TURTONATOR: u32 = 776;
pub const SPECIES_TOGEDEMARU: u32 = 777;
pub const SPECIES_MIMIKYU_DISGUISED: u32 = 778;
pub const SPECIES_BRUXISH: u32 = 779;
pub const SPECIES_DRAMPA: u32 = 780;
pub const SPECIES_DHELMISE: u32 = 781;
pub const SPECIES_JANGMO_O: u32 = 782;
pub const SPECIES_HAKAMO_O: u32 = 783;
pub const SPECIES_KOMMO_O: u32 = 784;
pub const SPECIES_TAPU_KOKO: u32 = 785;
pub const SPECIES_TAPU_LELE: u32 = 786;
pub const SPECIES_TAPU_BULU: u32 = 787;
pub const SPECIES_TAPU_FINI: u32 = 788;
pub const SPECIES_COSMOG: u32 = 789;
pub const SPECIES_COSMOEM: u32 = 790;
pub const SPECIES_SOLGALEO: u32 = 791;
pub const SPECIES_LUNALA: u32 = 792;
pub const SPECIES_NIHILEGO: u32 = 793;
pub const SPECIES_BUZZWOLE: u32 = 794;
pub const SPECIES_PHEROMOSA: u32 = 795;
pub const SPECIES_XURKITREE: u32 = 796;
pub const SPECIES_CELESTEELA: u32 = 797;
pub const SPECIES_KARTANA: u32 = 798;
pub const SPECIES_GUZZLORD: u32 = 799;
pub const SPECIES_NECROZMA: u32 = 800;
pub const SPECIES_MAGEARNA: u32 = 801;
pub const SPECIES_MARSHADOW: u32 = 802;
pub const SPECIES_POIPOLE: u32 = 803;
pub const SPECIES_NAGANADEL: u32 = 804;
pub const SPECIES_STAKATAKA: u32 = 805;
pub const SPECIES_BLACEPHALON: u32 = 806;
pub const SPECIES_ZERAORA: u32 = 807;
pub const SPECIES_MELTAN: u32 = 808;
pub const SPECIES_MELMETAL: u32 = 809;
pub const SPECIES_GROOKEY: u32 = 810;
pub const SPECIES_THWACKEY: u32 = 811;
pub const SPECIES_RILLABOOM: u32 = 812;
pub const SPECIES_SCORBUNNY: u32 = 813;
pub const SPECIES_RABOOT: u32 = 814;
pub const SPECIES_CINDERACE: u32 = 815;
pub const SPECIES_SOBBLE: u32 = 816;
pub const SPECIES_DRIZZILE: u32 = 817;
pub const SPECIES_INTELEON: u32 = 818;
pub const SPECIES_SKWOVET: u32 = 819;
pub const SPECIES_GREEDENT: u32 = 820;
pub const SPECIES_ROOKIDEE: u32 = 821;
pub const SPECIES_CORVISQUIRE: u32 = 822;
pub const SPECIES_CORVIKNIGHT: u32 = 823;
pub const SPECIES_BLIPBUG: u32 = 824;
pub const SPECIES_DOTTLER: u32 = 825;
pub const SPECIES_ORBEETLE: u32 = 826;
pub const SPECIES_NICKIT: u32 = 827;
pub const SPECIES_THIEVUL: u32 = 828;
pub const SPECIES_GOSSIFLEUR: u32 = 829;
pub const SPECIES_ELDEGOSS: u32 = 830;
pub const SPECIES_WOOLOO: u32 = 831;
pub const SPECIES_DUBWOOL: u32 = 832;
pub const SPECIES_CHEWTLE: u32 = 833;
pub const SPECIES_DREDNAW: u32 = 834;
pub const SPECIES_YAMPER: u32 = 835;
pub const SPECIES_BOLTUND: u32 = 836;
pub const SPECIES_ROLYCOLY: u32 = 837;
pub const SPECIES_CARKOL: u32 = 838;
pub const SPECIES_COALOSSAL: u32 = 839;
pub const SPECIES_APPLIN: u32 = 840;
pub const SPECIES_FLAPPLE: u32 = 841;
pub const SPECIES_APPLETUN: u32 = 842;
pub const SPECIES_SILICOBRA: u32 = 843;
pub const SPECIES_SANDACONDA: u32 = 844;
pub const SPECIES_CRAMORANT: u32 = 845;
pub const SPECIES_ARROKUDA: u32 = 846;
pub const SPECIES_BARRASKEWDA: u32 = 847;
pub const SPECIES_TOXEL: u32 = 848;
pub const SPECIES_TOXTRICITY_AMPED: u32 = 849;
pub const SPECIES_SIZZLIPEDE: u32 = 850;
pub const SPECIES_CENTISKORCH: u32 = 851;
pub const SPECIES_CLOBBOPUS: u32 = 852;
pub const SPECIES_GRAPPLOCT: u32 = 853;
pub const SPECIES_SINISTEA_PHONY: u32 = 854;
pub const SPECIES_POLTEAGEIST_PHONY: u32 = 855;
pub const SPECIES_HATENNA: u32 = 856;
pub const SPECIES_HATTREM: u32 = 857;
pub const SPECIES_HATTERENE: u32 = 858;
pub const SPECIES_IMPIDIMP: u32 = 859;
pub const SPECIES_MORGREM: u32 = 860;
pub const SPECIES_GRIMMSNARL: u32 = 861;
pub const SPECIES_OBSTAGOON: u32 = 862;
pub const SPECIES_PERRSERKER: u32 = 863;
pub const SPECIES_CURSOLA: u32 = 864;
pub const SPECIES_SIRFETCHD: u32 = 865;
pub const SPECIES_MR_RIME: u32 = 866;
pub const SPECIES_RUNERIGUS: u32 = 867;
pub const SPECIES_MILCERY: u32 = 868;
pub const SPECIES_ALCREMIE_STRAWBERRY_VANILLA_CREAM: u32 = 869;
pub const SPECIES_FALINKS: u32 = 870;
pub const SPECIES_PINCURCHIN: u32 = 871;
pub const SPECIES_SNOM: u32 = 872;
pub const SPECIES_FROSMOTH: u32 = 873;
pub const SPECIES_STONJOURNER: u32 = 874;
pub const SPECIES_EISCUE_ICE: u32 = 875;
pub const SPECIES_INDEEDEE_M: u32 = 876;
pub const SPECIES_MORPEKO_FULL_BELLY: u32 = 877;
pub const SPECIES_CUFANT: u32 = 878;
pub const SPECIES_COPPERAJAH: u32 = 879;
pub const SPECIES_DRACOZOLT: u32 = 880;
pub const SPECIES_ARCTOZOLT: u32 = 881;
pub const SPECIES_DRACOVISH: u32 = 882;
pub const SPECIES_ARCTOVISH: u32 = 883;
pub const SPECIES_DURALUDON: u32 = 884;
pub const SPECIES_DREEPY: u32 = 885;
pub const SPECIES_DRAKLOAK: u32 = 886;
pub const SPECIES_DRAGAPULT: u32 = 887;
pub const SPECIES_ZACIAN_HERO: u32 = 888;
pub const SPECIES_ZAMAZENTA_HERO: u32 = 889;
pub const SPECIES_ETERNATUS: u32 = 890;
pub const SPECIES_KUBFU: u32 = 891;
pub const SPECIES_URSHIFU_SINGLE_STRIKE: u32 = 892;
pub const SPECIES_ZARUDE: u32 = 893;
pub const SPECIES_REGIELEKI: u32 = 894;
pub const SPECIES_REGIDRAGO: u32 = 895;
pub const SPECIES_GLASTRIER: u32 = 896;
pub const SPECIES_SPECTRIER: u32 = 897;
pub const SPECIES_CALYREX: u32 = 898;
pub const SPECIES_WYRDEER: u32 = 899;
pub const SPECIES_KLEAVOR: u32 = 900;
pub const SPECIES_URSALUNA: u32 = 901;
pub const SPECIES_BASCULEGION_M: u32 = 902;
pub const SPECIES_SNEASLER: u32 = 903;
pub const SPECIES_OVERQWIL: u32 = 904;
pub const SPECIES_ENAMORUS_INCARNATE: u32 = 905;
pub const SPECIES_VENUSAUR_MEGA: u32 = 906;
pub const SPECIES_CHARIZARD_MEGA_X: u32 = 907;
pub const SPECIES_CHARIZARD_MEGA_Y: u32 = 908;
pub const SPECIES_BLASTOISE_MEGA: u32 = 909;
pub const SPECIES_BEEDRILL_MEGA: u32 = 910;
pub const SPECIES_PIDGEOT_MEGA: u32 = 911;
pub const SPECIES_ALAKAZAM_MEGA: u32 = 912;
pub const SPECIES_SLOWBRO_MEGA: u32 = 913;
pub const SPECIES_GENGAR_MEGA: u32 = 914;
pub const SPECIES_KANGASKHAN_MEGA: u32 = 915;
pub const SPECIES_PINSIR_MEGA: u32 = 916;
pub const SPECIES_GYARADOS_MEGA: u32 = 917;
pub const SPECIES_AERODACTYL_MEGA: u32 = 918;
pub const SPECIES_MEWTWO_MEGA_X: u32 = 919;
pub const SPECIES_MEWTWO_MEGA_Y: u32 = 920;
pub const SPECIES_AMPHAROS_MEGA: u32 = 921;
pub const SPECIES_STEELIX_MEGA: u32 = 922;
pub const SPECIES_SCIZOR_MEGA: u32 = 923;
pub const SPECIES_HERACROSS_MEGA: u32 = 924;
pub const SPECIES_HOUNDOOM_MEGA: u32 = 925;
pub const SPECIES_TYRANITAR_MEGA: u32 = 926;
pub const SPECIES_SCEPTILE_MEGA: u32 = 927;
pub const SPECIES_BLAZIKEN_MEGA: u32 = 928;
pub const SPECIES_SWAMPERT_MEGA: u32 = 929;
pub const SPECIES_GARDEVOIR_MEGA: u32 = 930;
pub const SPECIES_SABLEYE_MEGA: u32 = 931;
pub const SPECIES_MAWILE_MEGA: u32 = 932;
pub const SPECIES_AGGRON_MEGA: u32 = 933;
pub const SPECIES_MEDICHAM_MEGA: u32 = 934;
pub const SPECIES_MANECTRIC_MEGA: u32 = 935;
pub const SPECIES_SHARPEDO_MEGA: u32 = 936;
pub const SPECIES_CAMERUPT_MEGA: u32 = 937;
pub const SPECIES_ALTARIA_MEGA: u32 = 938;
pub const SPECIES_BANETTE_MEGA: u32 = 939;
pub const SPECIES_ABSOL_MEGA: u32 = 940;
pub const SPECIES_GLALIE_MEGA: u32 = 941;
pub const SPECIES_SALAMENCE_MEGA: u32 = 942;
pub const SPECIES_METAGROSS_MEGA: u32 = 943;
pub const SPECIES_LATIAS_MEGA: u32 = 944;
pub const SPECIES_LATIOS_MEGA: u32 = 945;
pub const SPECIES_LOPUNNY_MEGA: u32 = 946;
pub const SPECIES_GARCHOMP_MEGA: u32 = 947;
pub const SPECIES_LUCARIO_MEGA: u32 = 948;
pub const SPECIES_ABOMASNOW_MEGA: u32 = 949;
pub const SPECIES_GALLADE_MEGA: u32 = 950;
pub const SPECIES_AUDINO_MEGA: u32 = 951;
pub const SPECIES_DIANCIE_MEGA: u32 = 952;
pub const SPECIES_RAYQUAZA_MEGA: u32 = 953;
pub const SPECIES_KYOGRE_PRIMAL: u32 = 954;
pub const SPECIES_GROUDON_PRIMAL: u32 = 955;
pub const SPECIES_RATTATA_ALOLA: u32 = 956;
pub const SPECIES_RATICATE_ALOLA: u32 = 957;
pub const SPECIES_RAICHU_ALOLA: u32 = 958;
pub const SPECIES_SANDSHREW_ALOLA: u32 = 959;
pub const SPECIES_SANDSLASH_ALOLA: u32 = 960;
pub const SPECIES_VULPIX_ALOLA: u32 = 961;
pub const SPECIES_NINETALES_ALOLA: u32 = 962;
pub const SPECIES_DIGLETT_ALOLA: u32 = 963;
pub const SPECIES_DUGTRIO_ALOLA: u32 = 964;
pub const SPECIES_MEOWTH_ALOLA: u32 = 965;
pub const SPECIES_PERSIAN_ALOLA: u32 = 966;
pub const SPECIES_GEODUDE_ALOLA: u32 = 967;
pub const SPECIES_GRAVELER_ALOLA: u32 = 968;
pub const SPECIES_GOLEM_ALOLA: u32 = 969;
pub const SPECIES_GRIMER_ALOLA: u32 = 970;
pub const SPECIES_MUK_ALOLA: u32 = 971;
pub const SPECIES_EXEGGUTOR_ALOLA: u32 = 972;
pub const SPECIES_MAROWAK_ALOLA: u32 = 973;
pub const SPECIES_MEOWTH_GALAR: u32 = 974;
pub const SPECIES_PONYTA_GALAR: u32 = 975;
pub const SPECIES_RAPIDASH_GALAR: u32 = 976;
pub const SPECIES_SLOWPOKE_GALAR: u32 = 977;
pub const SPECIES_SLOWBRO_GALAR: u32 = 978;
pub const SPECIES_FARFETCHD_GALAR: u32 = 979;
pub const SPECIES_WEEZING_GALAR: u32 = 980;
pub const SPECIES_MR_MIME_GALAR: u32 = 981;
pub const SPECIES_ARTICUNO_GALAR: u32 = 982;
pub const SPECIES_ZAPDOS_GALAR: u32 = 983;
pub const SPECIES_MOLTRES_GALAR: u32 = 984;
pub const SPECIES_SLOWKING_GALAR: u32 = 985;
pub const SPECIES_CORSOLA_GALAR: u32 = 986;
pub const SPECIES_ZIGZAGOON_GALAR: u32 = 987;
pub const SPECIES_LINOONE_GALAR: u32 = 988;
pub const SPECIES_DARUMAKA_GALAR: u32 = 989;
pub const SPECIES_DARMANITAN_GALAR_STANDARD: u32 = 990;
pub const SPECIES_DARMANITAN_GALAR: u32 = 990;
pub const SPECIES_YAMASK_GALAR: u32 = 991;
pub const SPECIES_STUNFISK_GALAR: u32 = 992;
pub const SPECIES_GROWLITHE_HISUI: u32 = 993;
pub const SPECIES_ARCANINE_HISUI: u32 = 994;
pub const SPECIES_VOLTORB_HISUI: u32 = 995;
pub const SPECIES_ELECTRODE_HISUI: u32 = 996;
pub const SPECIES_TYPHLOSION_HISUI: u32 = 997;
pub const SPECIES_QWILFISH_HISUI: u32 = 998;
pub const SPECIES_SNEASEL_HISUI: u32 = 999;
pub const SPECIES_SAMUROTT_HISUI: u32 = 1000;
pub const SPECIES_LILLIGANT_HISUI: u32 = 1001;
pub const SPECIES_ZORUA_HISUI: u32 = 1002;
pub const SPECIES_ZOROARK_HISUI: u32 = 1003;
pub const SPECIES_BRAVIARY_HISUI: u32 = 1004;
pub const SPECIES_SLIGGOO_HISUI: u32 = 1005;
pub const SPECIES_GOODRA_HISUI: u32 = 1006;
pub const SPECIES_AVALUGG_HISUI: u32 = 1007;
pub const SPECIES_DECIDUEYE_HISUI: u32 = 1008;
pub const SPECIES_PIKACHU_COSPLAY: u32 = 1009;
pub const SPECIES_PIKACHU_ROCK_STAR: u32 = 1010;
pub const SPECIES_PIKACHU_BELLE: u32 = 1011;
pub const SPECIES_PIKACHU_POP_STAR: u32 = 1012;
pub const SPECIES_PIKACHU_PHD: u32 = 1013;
pub const SPECIES_PIKACHU_LIBRE: u32 = 1014;
pub const SPECIES_PIKACHU_ORIGINAL: u32 = 1015;
pub const SPECIES_PIKACHU_HOENN: u32 = 1016;
pub const SPECIES_PIKACHU_SINNOH: u32 = 1017;
pub const SPECIES_PIKACHU_UNOVA: u32 = 1018;
pub const SPECIES_PIKACHU_KALOS: u32 = 1019;
pub const SPECIES_PIKACHU_ALOLA: u32 = 1020;
pub const SPECIES_PIKACHU_PARTNER: u32 = 1021;
pub const SPECIES_PIKACHU_WORLD: u32 = 1022;
pub const SPECIES_PICHU_SPIKY_EARED: u32 = 1023;
pub const SPECIES_UNOWN_B: u32 = 1024;
pub const SPECIES_UNOWN_C: u32 = 1025;
pub const SPECIES_UNOWN_D: u32 = 1026;
pub const SPECIES_UNOWN_E: u32 = 1027;
pub const SPECIES_UNOWN_F: u32 = 1028;
pub const SPECIES_UNOWN_G: u32 = 1029;
pub const SPECIES_UNOWN_H: u32 = 1030;
pub const SPECIES_UNOWN_I: u32 = 1031;
pub const SPECIES_UNOWN_J: u32 = 1032;
pub const SPECIES_UNOWN_K: u32 = 1033;
pub const SPECIES_UNOWN_L: u32 = 1034;
pub const SPECIES_UNOWN_M: u32 = 1035;
pub const SPECIES_UNOWN_N: u32 = 1036;
pub const SPECIES_UNOWN_O: u32 = 1037;
pub const SPECIES_UNOWN_P: u32 = 1038;
pub const SPECIES_UNOWN_Q: u32 = 1039;
pub const SPECIES_UNOWN_R: u32 = 1040;
pub const SPECIES_UNOWN_S: u32 = 1041;
pub const SPECIES_UNOWN_T: u32 = 1042;
pub const SPECIES_UNOWN_U: u32 = 1043;
pub const SPECIES_UNOWN_V: u32 = 1044;
pub const SPECIES_UNOWN_W: u32 = 1045;
pub const SPECIES_UNOWN_X: u32 = 1046;
pub const SPECIES_UNOWN_Y: u32 = 1047;
pub const SPECIES_UNOWN_Z: u32 = 1048;
pub const SPECIES_UNOWN_EXCLAMATION: u32 = 1049;
pub const SPECIES_UNOWN_QUESTION: u32 = 1050;
pub const SPECIES_CASTFORM_SUNNY: u32 = 1051;
pub const SPECIES_CASTFORM_RAINY: u32 = 1052;
pub const SPECIES_CASTFORM_SNOWY: u32 = 1053;
pub const SPECIES_DEOXYS_ATTACK: u32 = 1054;
pub const SPECIES_DEOXYS_DEFENSE: u32 = 1055;
pub const SPECIES_DEOXYS_SPEED: u32 = 1056;
pub const SPECIES_BURMY_SANDY: u32 = 1057;
pub const SPECIES_BURMY_TRASH: u32 = 1058;
pub const SPECIES_WORMADAM_SANDY: u32 = 1059;
pub const SPECIES_WORMADAM_TRASH: u32 = 1060;
pub const SPECIES_CHERRIM_SUNSHINE: u32 = 1061;
pub const SPECIES_SHELLOS_EAST: u32 = 1062;
pub const SPECIES_GASTRODON_EAST: u32 = 1063;
pub const SPECIES_ROTOM_HEAT: u32 = 1064;
pub const SPECIES_ROTOM_WASH: u32 = 1065;
pub const SPECIES_ROTOM_FROST: u32 = 1066;
pub const SPECIES_ROTOM_FAN: u32 = 1067;
pub const SPECIES_ROTOM_MOW: u32 = 1068;
pub const SPECIES_DIALGA_ORIGIN: u32 = 1069;
pub const SPECIES_PALKIA_ORIGIN: u32 = 1070;
pub const SPECIES_GIRATINA_ORIGIN: u32 = 1071;
pub const SPECIES_SHAYMIN_SKY: u32 = 1072;
pub const SPECIES_ARCEUS_FIGHTING: u32 = 1073;
pub const SPECIES_ARCEUS_FLYING: u32 = 1074;
pub const SPECIES_ARCEUS_POISON: u32 = 1075;
pub const SPECIES_ARCEUS_GROUND: u32 = 1076;
pub const SPECIES_ARCEUS_ROCK: u32 = 1077;
pub const SPECIES_ARCEUS_BUG: u32 = 1078;
pub const SPECIES_ARCEUS_GHOST: u32 = 1079;
pub const SPECIES_ARCEUS_STEEL: u32 = 1080;
pub const SPECIES_ARCEUS_FIRE: u32 = 1081;
pub const SPECIES_ARCEUS_WATER: u32 = 1082;
pub const SPECIES_ARCEUS_GRASS: u32 = 1083;
pub const SPECIES_ARCEUS_ELECTRIC: u32 = 1084;
pub const SPECIES_ARCEUS_PSYCHIC: u32 = 1085;
pub const SPECIES_ARCEUS_ICE: u32 = 1086;
pub const SPECIES_ARCEUS_DRAGON: u32 = 1087;
pub const SPECIES_ARCEUS_DARK: u32 = 1088;
pub const SPECIES_ARCEUS_FAIRY: u32 = 1089;
pub const SPECIES_BASCULIN_BLUE_STRIPED: u32 = 1090;
pub const SPECIES_BASCULIN_WHITE_STRIPED: u32 = 1091;
pub const SPECIES_DARMANITAN_ZEN: u32 = 1092;
pub const SPECIES_DARMANITAN_GALAR_ZEN: u32 = 1093;
pub const SPECIES_DEERLING_SUMMER: u32 = 1094;
pub const SPECIES_DEERLING_AUTUMN: u32 = 1095;
pub const SPECIES_DEERLING_WINTER: u32 = 1096;
pub const SPECIES_SAWSBUCK_SUMMER: u32 = 1097;
pub const SPECIES_SAWSBUCK_AUTUMN: u32 = 1098;
pub const SPECIES_SAWSBUCK_WINTER: u32 = 1099;
pub const SPECIES_TORNADUS_THERIAN: u32 = 1100;
pub const SPECIES_THUNDURUS_THERIAN: u32 = 1101;
pub const SPECIES_LANDORUS_THERIAN: u32 = 1102;
pub const SPECIES_ENAMORUS_THERIAN: u32 = 1103;
pub const SPECIES_KYUREM_WHITE: u32 = 1104;
pub const SPECIES_KYUREM_BLACK: u32 = 1105;
pub const SPECIES_KELDEO_RESOLUTE: u32 = 1106;
pub const SPECIES_MELOETTA_PIROUETTE: u32 = 1107;
pub const SPECIES_GENESECT_DOUSE: u32 = 1108;
pub const SPECIES_GENESECT_SHOCK: u32 = 1109;
pub const SPECIES_GENESECT_BURN: u32 = 1110;
pub const SPECIES_GENESECT_CHILL: u32 = 1111;
pub const SPECIES_GRENINJA_BOND: u32 = 1112;
pub const SPECIES_GRENINJA_BATTLE_BOND: u32 = 1112;
pub const SPECIES_GRENINJA_ASH: u32 = 1113;
pub const SPECIES_VIVILLON_POLAR: u32 = 1114;
pub const SPECIES_VIVILLON_TUNDRA: u32 = 1115;
pub const SPECIES_VIVILLON_CONTINENTAL: u32 = 1116;
pub const SPECIES_VIVILLON_GARDEN: u32 = 1117;
pub const SPECIES_VIVILLON_ELEGANT: u32 = 1118;
pub const SPECIES_VIVILLON_MEADOW: u32 = 1119;
pub const SPECIES_VIVILLON_MODERN: u32 = 1120;
pub const SPECIES_VIVILLON_MARINE: u32 = 1121;
pub const SPECIES_VIVILLON_ARCHIPELAGO: u32 = 1122;
pub const SPECIES_VIVILLON_HIGH_PLAINS: u32 = 1123;
pub const SPECIES_VIVILLON_SANDSTORM: u32 = 1124;
pub const SPECIES_VIVILLON_RIVER: u32 = 1125;
pub const SPECIES_VIVILLON_MONSOON: u32 = 1126;
pub const SPECIES_VIVILLON_SAVANNA: u32 = 1127;
pub const SPECIES_VIVILLON_SUN: u32 = 1128;
pub const SPECIES_VIVILLON_OCEAN: u32 = 1129;
pub const SPECIES_VIVILLON_JUNGLE: u32 = 1130;
pub const SPECIES_VIVILLON_FANCY: u32 = 1131;
pub const SPECIES_VIVILLON_POKEBALL: u32 = 1132;
pub const SPECIES_FLABEBE_YELLOW: u32 = 1133;
pub const SPECIES_FLABEBE_ORANGE: u32 = 1134;
pub const SPECIES_FLABEBE_BLUE: u32 = 1135;
pub const SPECIES_FLABEBE_WHITE: u32 = 1136;
pub const SPECIES_FLOETTE_YELLOW: u32 = 1137;
pub const SPECIES_FLOETTE_ORANGE: u32 = 1138;
pub const SPECIES_FLOETTE_BLUE: u32 = 1139;
pub const SPECIES_FLOETTE_WHITE: u32 = 1140;
pub const SPECIES_FLOETTE_ETERNAL: u32 = 1141;
pub const SPECIES_FLORGES_YELLOW: u32 = 1142;
pub const SPECIES_FLORGES_ORANGE: u32 = 1143;
pub const SPECIES_FLORGES_BLUE: u32 = 1144;
pub const SPECIES_FLORGES_WHITE: u32 = 1145;
pub const SPECIES_FURFROU_HEART_TRIM: u32 = 1146;
pub const SPECIES_FURFROU_STAR_TRIM: u32 = 1147;
pub const SPECIES_FURFROU_DIAMOND_TRIM: u32 = 1148;
pub const SPECIES_FURFROU_DEBUTANTE_TRIM: u32 = 1149;
pub const SPECIES_FURFROU_MATRON_TRIM: u32 = 1150;
pub const SPECIES_FURFROU_DANDY_TRIM: u32 = 1151;
pub const SPECIES_FURFROU_LA_REINE_TRIM: u32 = 1152;
pub const SPECIES_FURFROU_KABUKI_TRIM: u32 = 1153;
pub const SPECIES_FURFROU_PHARAOH_TRIM: u32 = 1154;
pub const SPECIES_MEOWSTIC_F: u32 = 1155;
pub const SPECIES_AEGISLASH_BLADE: u32 = 1156;
pub const SPECIES_PUMPKABOO_SMALL: u32 = 1157;
pub const SPECIES_PUMPKABOO_LARGE: u32 = 1158;
pub const SPECIES_PUMPKABOO_SUPER: u32 = 1159;
pub const SPECIES_GOURGEIST_SMALL: u32 = 1160;
pub const SPECIES_GOURGEIST_LARGE: u32 = 1161;
pub const SPECIES_GOURGEIST_SUPER: u32 = 1162;
pub const SPECIES_XERNEAS_ACTIVE: u32 = 1163;
pub const SPECIES_ZYGARDE_10_AURA_BREAK: u32 = 1164;
pub const SPECIES_ZYGARDE_10_POWER_CONSTRUCT: u32 = 1165;
pub const SPECIES_ZYGARDE_50_POWER_CONSTRUCT: u32 = 1166;
pub const SPECIES_ZYGARDE_COMPLETE: u32 = 1167;
pub const SPECIES_HOOPA_UNBOUND: u32 = 1168;
pub const SPECIES_ORICORIO_POM_POM: u32 = 1169;
pub const SPECIES_ORICORIO_PAU: u32 = 1170;
pub const SPECIES_ORICORIO_SENSU: u32 = 1171;
pub const SPECIES_ROCKRUFF_OWN_TEMPO: u32 = 1172;
pub const SPECIES_LYCANROC_MIDNIGHT: u32 = 1173;
pub const SPECIES_LYCANROC_DUSK: u32 = 1174;
pub const SPECIES_WISHIWASHI_SCHOOL: u32 = 1175;
pub const SPECIES_SILVALLY_FIGHTING: u32 = 1176;
pub const SPECIES_SILVALLY_FLYING: u32 = 1177;
pub const SPECIES_SILVALLY_POISON: u32 = 1178;
pub const SPECIES_SILVALLY_GROUND: u32 = 1179;
pub const SPECIES_SILVALLY_ROCK: u32 = 1180;
pub const SPECIES_SILVALLY_BUG: u32 = 1181;
pub const SPECIES_SILVALLY_GHOST: u32 = 1182;
pub const SPECIES_SILVALLY_STEEL: u32 = 1183;
pub const SPECIES_SILVALLY_FIRE: u32 = 1184;
pub const SPECIES_SILVALLY_WATER: u32 = 1185;
pub const SPECIES_SILVALLY_GRASS: u32 = 1186;
pub const SPECIES_SILVALLY_ELECTRIC: u32 = 1187;
pub const SPECIES_SILVALLY_PSYCHIC: u32 = 1188;
pub const SPECIES_SILVALLY_ICE: u32 = 1189;
pub const SPECIES_SILVALLY_DRAGON: u32 = 1190;
pub const SPECIES_SILVALLY_DARK: u32 = 1191;
pub const SPECIES_SILVALLY_FAIRY: u32 = 1192;
pub const SPECIES_MINIOR_METEOR_ORANGE: u32 = 1193;
pub const SPECIES_MINIOR_METEOR_YELLOW: u32 = 1194;
pub const SPECIES_MINIOR_METEOR_GREEN: u32 = 1195;
pub const SPECIES_MINIOR_METEOR_BLUE: u32 = 1196;
pub const SPECIES_MINIOR_METEOR_INDIGO: u32 = 1197;
pub const SPECIES_MINIOR_METEOR_VIOLET: u32 = 1198;
pub const SPECIES_MINIOR_CORE_RED: u32 = 1199;
pub const SPECIES_MINIOR_CORE_ORANGE: u32 = 1200;
pub const SPECIES_MINIOR_CORE_YELLOW: u32 = 1201;
pub const SPECIES_MINIOR_CORE_GREEN: u32 = 1202;
pub const SPECIES_MINIOR_CORE_BLUE: u32 = 1203;
pub const SPECIES_MINIOR_CORE_INDIGO: u32 = 1204;
pub const SPECIES_MINIOR_CORE_VIOLET: u32 = 1205;
pub const SPECIES_MIMIKYU_BUSTED: u32 = 1206;
pub const SPECIES_NECROZMA_DUSK_MANE: u32 = 1207;
pub const SPECIES_NECROZMA_DAWN_WINGS: u32 = 1208;
pub const SPECIES_NECROZMA_ULTRA: u32 = 1209;
pub const SPECIES_MAGEARNA_ORIGINAL: u32 = 1210;
pub const SPECIES_CRAMORANT_GULPING: u32 = 1211;
pub const SPECIES_CRAMORANT_GORGING: u32 = 1212;
pub const SPECIES_TOXTRICITY_LOW_KEY: u32 = 1213;
pub const SPECIES_SINISTEA_ANTIQUE: u32 = 1214;
pub const SPECIES_POLTEAGEIST_ANTIQUE: u32 = 1215;
pub const SPECIES_ALCREMIE_STRAWBERRY_RUBY_CREAM: u32 = 1216;
pub const SPECIES_ALCREMIE_STRAWBERRY_MATCHA_CREAM: u32 = 1217;
pub const SPECIES_ALCREMIE_STRAWBERRY_MINT_CREAM: u32 = 1218;
pub const SPECIES_ALCREMIE_STRAWBERRY_LEMON_CREAM: u32 = 1219;
pub const SPECIES_ALCREMIE_STRAWBERRY_SALTED_CREAM: u32 = 1220;
pub const SPECIES_ALCREMIE_STRAWBERRY_RUBY_SWIRL: u32 = 1221;
pub const SPECIES_ALCREMIE_STRAWBERRY_CARAMEL_SWIRL: u32 = 1222;
pub const SPECIES_ALCREMIE_STRAWBERRY_RAINBOW_SWIRL: u32 = 1223;
pub const SPECIES_EISCUE_NOICE: u32 = 1224;
pub const SPECIES_INDEEDEE_F: u32 = 1225;
pub const SPECIES_MORPEKO_HANGRY: u32 = 1226;
pub const SPECIES_ZACIAN_CROWNED: u32 = 1227;
pub const SPECIES_ZAMAZENTA_CROWNED: u32 = 1228;
pub const SPECIES_ETERNATUS_ETERNAMAX: u32 = 1229;
pub const SPECIES_URSHIFU_RAPID_STRIKE: u32 = 1230;
pub const SPECIES_ZARUDE_DADA: u32 = 1231;
pub const SPECIES_CALYREX_ICE: u32 = 1232;
pub const SPECIES_CALYREX_SHADOW: u32 = 1233;
pub const SPECIES_BASCULEGION_F: u32 = 1234;
pub const SPECIES_ALCREMIE_BERRY_VANILLA_CREAM: u32 = 1235;
pub const SPECIES_ALCREMIE_BERRY_RUBY_CREAM: u32 = 1236;
pub const SPECIES_ALCREMIE_BERRY_MATCHA_CREAM: u32 = 1237;
pub const SPECIES_ALCREMIE_BERRY_MINT_CREAM: u32 = 1238;
pub const SPECIES_ALCREMIE_BERRY_LEMON_CREAM: u32 = 1239;
pub const SPECIES_ALCREMIE_BERRY_SALTED_CREAM: u32 = 1240;
pub const SPECIES_ALCREMIE_BERRY_RUBY_SWIRL: u32 = 1241;
pub const SPECIES_ALCREMIE_BERRY_CARAMEL_SWIRL: u32 = 1242;
pub const SPECIES_ALCREMIE_BERRY_RAINBOW_SWIRL: u32 = 1243;
pub const SPECIES_ALCREMIE_LOVE_VANILLA_CREAM: u32 = 1244;
pub const SPECIES_ALCREMIE_LOVE_RUBY_CREAM: u32 = 1245;
pub const SPECIES_ALCREMIE_LOVE_MATCHA_CREAM: u32 = 1246;
pub const SPECIES_ALCREMIE_LOVE_MINT_CREAM: u32 = 1247;
pub const SPECIES_ALCREMIE_LOVE_LEMON_CREAM: u32 = 1248;
pub const SPECIES_ALCREMIE_LOVE_SALTED_CREAM: u32 = 1249;
pub const SPECIES_ALCREMIE_LOVE_RUBY_SWIRL: u32 = 1250;
pub const SPECIES_ALCREMIE_LOVE_CARAMEL_SWIRL: u32 = 1251;
pub const SPECIES_ALCREMIE_LOVE_RAINBOW_SWIRL: u32 = 1252;
pub const SPECIES_ALCREMIE_STAR_VANILLA_CREAM: u32 = 1253;
pub const SPECIES_ALCREMIE_STAR_RUBY_CREAM: u32 = 1254;
pub const SPECIES_ALCREMIE_STAR_MATCHA_CREAM: u32 = 1255;
pub const SPECIES_ALCREMIE_STAR_MINT_CREAM: u32 = 1256;
pub const SPECIES_ALCREMIE_STAR_LEMON_CREAM: u32 = 1257;
pub const SPECIES_ALCREMIE_STAR_SALTED_CREAM: u32 = 1258;
pub const SPECIES_ALCREMIE_STAR_RUBY_SWIRL: u32 = 1259;
pub const SPECIES_ALCREMIE_STAR_CARAMEL_SWIRL: u32 = 1260;
pub const SPECIES_ALCREMIE_STAR_RAINBOW_SWIRL: u32 = 1261;
pub const SPECIES_ALCREMIE_CLOVER_VANILLA_CREAM: u32 = 1262;
pub const SPECIES_ALCREMIE_CLOVER_RUBY_CREAM: u32 = 1263;
pub const SPECIES_ALCREMIE_CLOVER_MATCHA_CREAM: u32 = 1264;
pub const SPECIES_ALCREMIE_CLOVER_MINT_CREAM: u32 = 1265;
pub const SPECIES_ALCREMIE_CLOVER_LEMON_CREAM: u32 = 1266;
pub const SPECIES_ALCREMIE_CLOVER_SALTED_CREAM: u32 = 1267;
pub const SPECIES_ALCREMIE_CLOVER_RUBY_SWIRL: u32 = 1268;
pub const SPECIES_ALCREMIE_CLOVER_CARAMEL_SWIRL: u32 = 1269;
pub const SPECIES_ALCREMIE_CLOVER_RAINBOW_SWIRL: u32 = 1270;
pub const SPECIES_ALCREMIE_FLOWER_VANILLA_CREAM: u32 = 1271;
pub const SPECIES_ALCREMIE_FLOWER_RUBY_CREAM: u32 = 1272;
pub const SPECIES_ALCREMIE_FLOWER_MATCHA_CREAM: u32 = 1273;
pub const SPECIES_ALCREMIE_FLOWER_MINT_CREAM: u32 = 1274;
pub const SPECIES_ALCREMIE_FLOWER_LEMON_CREAM: u32 = 1275;
pub const SPECIES_ALCREMIE_FLOWER_SALTED_CREAM: u32 = 1276;
pub const SPECIES_ALCREMIE_FLOWER_RUBY_SWIRL: u32 = 1277;
pub const SPECIES_ALCREMIE_FLOWER_CARAMEL_SWIRL: u32 = 1278;
pub const SPECIES_ALCREMIE_FLOWER_RAINBOW_SWIRL: u32 = 1279;
pub const SPECIES_ALCREMIE_RIBBON_VANILLA_CREAM: u32 = 1280;
pub const SPECIES_ALCREMIE_RIBBON_RUBY_CREAM: u32 = 1281;
pub const SPECIES_ALCREMIE_RIBBON_MATCHA_CREAM: u32 = 1282;
pub const SPECIES_ALCREMIE_RIBBON_MINT_CREAM: u32 = 1283;
pub const SPECIES_ALCREMIE_RIBBON_LEMON_CREAM: u32 = 1284;
pub const SPECIES_ALCREMIE_RIBBON_SALTED_CREAM: u32 = 1285;
pub const SPECIES_ALCREMIE_RIBBON_RUBY_SWIRL: u32 = 1286;
pub const SPECIES_ALCREMIE_RIBBON_CARAMEL_SWIRL: u32 = 1287;
pub const SPECIES_ALCREMIE_RIBBON_RAINBOW_SWIRL: u32 = 1288;
pub const GEN9_START: u32 = 1288;
pub const SPECIES_SPRIGATITO: u32 = 1289;
pub const SPECIES_FLORAGATO: u32 = 1290;
pub const SPECIES_MEOWSCARADA: u32 = 1291;
pub const SPECIES_FUECOCO: u32 = 1292;
pub const SPECIES_CROCALOR: u32 = 1293;
pub const SPECIES_SKELEDIRGE: u32 = 1294;
pub const SPECIES_QUAXLY: u32 = 1295;
pub const SPECIES_QUAXWELL: u32 = 1296;
pub const SPECIES_QUAQUAVAL: u32 = 1297;
pub const SPECIES_LECHONK: u32 = 1298;
pub const SPECIES_OINKOLOGNE_M: u32 = 1299;
pub const SPECIES_OINKOLOGNE_F: u32 = 1300;
pub const SPECIES_TAROUNTULA: u32 = 1301;
pub const SPECIES_SPIDOPS: u32 = 1302;
pub const SPECIES_NYMBLE: u32 = 1303;
pub const SPECIES_LOKIX: u32 = 1304;
pub const SPECIES_PAWMI: u32 = 1305;
pub const SPECIES_PAWMO: u32 = 1306;
pub const SPECIES_PAWMOT: u32 = 1307;
pub const SPECIES_TANDEMAUS: u32 = 1308;
pub const SPECIES_MAUSHOLD_THREE: u32 = 1309;
pub const SPECIES_MAUSHOLD_FOUR: u32 = 1310;
pub const SPECIES_FIDOUGH: u32 = 1311;
pub const SPECIES_DACHSBUN: u32 = 1312;
pub const SPECIES_SMOLIV: u32 = 1313;
pub const SPECIES_DOLLIV: u32 = 1314;
pub const SPECIES_ARBOLIVA: u32 = 1315;
pub const SPECIES_SQUAWKABILLY_GREEN: u32 = 1316;
pub const SPECIES_SQUAWKABILLY_BLUE: u32 = 1317;
pub const SPECIES_SQUAWKABILLY_YELLOW: u32 = 1318;
pub const SPECIES_SQUAWKABILLY_WHITE: u32 = 1319;
pub const SPECIES_NACLI: u32 = 1320;
pub const SPECIES_NACLSTACK: u32 = 1321;
pub const SPECIES_GARGANACL: u32 = 1322;
pub const SPECIES_CHARCADET: u32 = 1323;
pub const SPECIES_ARMAROUGE: u32 = 1324;
pub const SPECIES_CERULEDGE: u32 = 1325;
pub const SPECIES_TADBULB: u32 = 1326;
pub const SPECIES_BELLIBOLT: u32 = 1327;
pub const SPECIES_WATTREL: u32 = 1328;
pub const SPECIES_KILOWATTREL: u32 = 1329;
pub const SPECIES_MASCHIFF: u32 = 1330;
pub const SPECIES_MABOSSTIFF: u32 = 1331;
pub const SPECIES_SHROODLE: u32 = 1332;
pub const SPECIES_GRAFAIAI: u32 = 1333;
pub const SPECIES_BRAMBLIN: u32 = 1334;
pub const SPECIES_BRAMBLEGHAST: u32 = 1335;
pub const SPECIES_TOEDSCOOL: u32 = 1336;
pub const SPECIES_TOEDSCRUEL: u32 = 1337;
pub const SPECIES_KLAWF: u32 = 1338;
pub const SPECIES_CAPSAKID: u32 = 1339;
pub const SPECIES_SCOVILLAIN: u32 = 1340;
pub const SPECIES_RELLOR: u32 = 1341;
pub const SPECIES_RABSCA: u32 = 1342;
pub const SPECIES_FLITTLE: u32 = 1343;
pub const SPECIES_ESPATHRA: u32 = 1344;
pub const SPECIES_TINKATINK: u32 = 1345;
pub const SPECIES_TINKATUFF: u32 = 1346;
pub const SPECIES_TINKATON: u32 = 1347;
pub const SPECIES_WIGLETT: u32 = 1348;
pub const SPECIES_WUGTRIO: u32 = 1349;
pub const SPECIES_BOMBIRDIER: u32 = 1350;
pub const SPECIES_FINIZEN: u32 = 1351;
pub const SPECIES_PALAFIN_ZERO: u32 = 1352;
pub const SPECIES_PALAFIN_HERO: u32 = 1353;
pub const SPECIES_VAROOM: u32 = 1354;
pub const SPECIES_REVAVROOM: u32 = 1355;
pub const SPECIES_CYCLIZAR: u32 = 1356;
pub const SPECIES_ORTHWORM: u32 = 1357;
pub const SPECIES_GLIMMET: u32 = 1358;
pub const SPECIES_GLIMMORA: u32 = 1359;
pub const SPECIES_GREAVARD: u32 = 1360;
pub const SPECIES_HOUNDSTONE: u32 = 1361;
pub const SPECIES_FLAMIGO: u32 = 1362;
pub const SPECIES_CETODDLE: u32 = 1363;
pub const SPECIES_CETITAN: u32 = 1364;
pub const SPECIES_VELUZA: u32 = 1365;
pub const SPECIES_DONDOZO: u32 = 1366;
pub const SPECIES_TATSUGIRI_CURLY: u32 = 1367;
pub const SPECIES_TATSUGIRI_DROOPY: u32 = 1368;
pub const SPECIES_TATSUGIRI_STRETCHY: u32 = 1369;
pub const SPECIES_ANNIHILAPE: u32 = 1370;
pub const SPECIES_CLODSIRE: u32 = 1371;
pub const SPECIES_FARIGIRAF: u32 = 1372;
pub const SPECIES_DUDUNSPARCE_TWO_SEGMENT: u32 = 1373;
pub const SPECIES_DUDUNSPARCE_THREE_SEGMENT: u32 = 1374;
pub const SPECIES_KINGAMBIT: u32 = 1375;
pub const SPECIES_GREAT_TUSK: u32 = 1376;
pub const SPECIES_SCREAM_TAIL: u32 = 1377;
pub const SPECIES_BRUTE_BONNET: u32 = 1378;
pub const SPECIES_FLUTTER_MANE: u32 = 1379;
pub const SPECIES_SLITHER_WING: u32 = 1380;
pub const SPECIES_SANDY_SHOCKS: u32 = 1381;
pub const SPECIES_IRON_TREADS: u32 = 1382;
pub const SPECIES_IRON_BUNDLE: u32 = 1383;
pub const SPECIES_IRON_HANDS: u32 = 1384;
pub const SPECIES_IRON_JUGULIS: u32 = 1385;
pub const SPECIES_IRON_MOTH: u32 = 1386;
pub const SPECIES_IRON_THORNS: u32 = 1387;
pub const SPECIES_FRIGIBAX: u32 = 1388;
pub const SPECIES_ARCTIBAX: u32 = 1389;
pub const SPECIES_BAXCALIBUR: u32 = 1390;
pub const SPECIES_GIMMIGHOUL_CHEST: u32 = 1391;
pub const SPECIES_GIMMIGHOUL_ROAMING: u32 = 1392;
pub const SPECIES_GHOLDENGO: u32 = 1393;
pub const SPECIES_WO_CHIEN: u32 = 1394;
pub const SPECIES_CHIEN_PAO: u32 = 1395;
pub const SPECIES_TING_LU: u32 = 1396;
pub const SPECIES_CHI_YU: u32 = 1397;
pub const SPECIES_ROARING_MOON: u32 = 1398;
pub const SPECIES_IRON_VALIANT: u32 = 1399;
pub const SPECIES_KORAIDON: u32 = 1400;
pub const SPECIES_MIRAIDON: u32 = 1401;
pub const SPECIES_TAUROS_PALDEA_COMBAT: u32 = 1402;
pub const SPECIES_TAUROS_PALDEA_BLAZE: u32 = 1403;
pub const SPECIES_TAUROS_PALDEA_AQUA: u32 = 1404;
pub const SPECIES_WOOPER_PALDEA: u32 = 1405;
pub const SPECIES_WALKING_WAKE: u32 = 1406;
pub const SPECIES_IRON_LEAVES: u32 = 1407;
pub const SPECIES_DIPPLIN: u32 = 1408;
pub const SPECIES_POLTCHAGEIST_COUNTERFEIT: u32 = 1409;
pub const SPECIES_POLTCHAGEIST_ARTISAN: u32 = 1410;
pub const SPECIES_SINISTCHA_UNREMARKABLE: u32 = 1411;
pub const SPECIES_SINISTCHA_MASTERPIECE: u32 = 1412;
pub const SPECIES_OKIDOGI: u32 = 1413;
pub const SPECIES_MUNKIDORI: u32 = 1414;
pub const SPECIES_FEZANDIPITI: u32 = 1415;
pub const SPECIES_OGERPON_TEAL: u32 = 1416;
pub const SPECIES_OGERPON_WELLSPRING: u32 = 1417;
pub const SPECIES_OGERPON_HEARTHFLAME: u32 = 1418;
pub const SPECIES_OGERPON_CORNERSTONE: u32 = 1419;
pub const SPECIES_OGERPON_TEAL_TERA: u32 = 1420;
pub const SPECIES_OGERPON_WELLSPRING_TERA: u32 = 1421;
pub const SPECIES_OGERPON_HEARTHFLAME_TERA: u32 = 1422;
pub const SPECIES_OGERPON_CORNERSTONE_TERA: u32 = 1423;
pub const SPECIES_URSALUNA_BLOODMOON: u32 = 1424;
pub const SPECIES_ARCHALUDON: u32 = 1425;
pub const SPECIES_HYDRAPPLE: u32 = 1426;
pub const SPECIES_GOUGING_FIRE: u32 = 1427;
pub const SPECIES_RAGING_BOLT: u32 = 1428;
pub const SPECIES_IRON_BOULDER: u32 = 1429;
pub const SPECIES_IRON_CROWN: u32 = 1430;
pub const SPECIES_TERAPAGOS_NORMAL: u32 = 1431;
pub const SPECIES_TERAPAGOS_TERASTAL: u32 = 1432;
pub const SPECIES_TERAPAGOS_STELLAR: u32 = 1433;
pub const SPECIES_PECHARUNT: u32 = 1434;
pub const SPECIES_LUGIA_SHADOW: u32 = 1435;
pub const SPECIES_MOTHIM_SANDY: u32 = 1436;
pub const SPECIES_MOTHIM_TRASH: u32 = 1437;
pub const SPECIES_SCATTERBUG_POLAR: u32 = 1438;
pub const SPECIES_SCATTERBUG_TUNDRA: u32 = 1439;
pub const SPECIES_SCATTERBUG_CONTINENTAL: u32 = 1440;
pub const SPECIES_SCATTERBUG_GARDEN: u32 = 1441;
pub const SPECIES_SCATTERBUG_ELEGANT: u32 = 1442;
pub const SPECIES_SCATTERBUG_MEADOW: u32 = 1443;
pub const SPECIES_SCATTERBUG_MODERN: u32 = 1444;
pub const SPECIES_SCATTERBUG_MARINE: u32 = 1445;
pub const SPECIES_SCATTERBUG_ARCHIPELAGO: u32 = 1446;
pub const SPECIES_SCATTERBUG_HIGH_PLAINS: u32 = 1447;
pub const SPECIES_SCATTERBUG_SANDSTORM: u32 = 1448;
pub const SPECIES_SCATTERBUG_RIVER: u32 = 1449;
pub const SPECIES_SCATTERBUG_MONSOON: u32 = 1450;
pub const SPECIES_SCATTERBUG_SAVANNA: u32 = 1451;
pub const SPECIES_SCATTERBUG_SUN: u32 = 1452;
pub const SPECIES_SCATTERBUG_OCEAN: u32 = 1453;
pub const SPECIES_SCATTERBUG_JUNGLE: u32 = 1454;
pub const SPECIES_SCATTERBUG_FANCY: u32 = 1455;
pub const SPECIES_SCATTERBUG_POKEBALL: u32 = 1456;
pub const SPECIES_SPEWPA_POLAR: u32 = 1457;
pub const SPECIES_SPEWPA_TUNDRA: u32 = 1458;
pub const SPECIES_SPEWPA_CONTINENTAL: u32 = 1459;
pub const SPECIES_SPEWPA_GARDEN: u32 = 1460;
pub const SPECIES_SPEWPA_ELEGANT: u32 = 1461;
pub const SPECIES_SPEWPA_MEADOW: u32 = 1462;
pub const SPECIES_SPEWPA_MODERN: u32 = 1463;
pub const SPECIES_SPEWPA_MARINE: u32 = 1464;
pub const SPECIES_SPEWPA_ARCHIPELAGO: u32 = 1465;
pub const SPECIES_SPEWPA_HIGH_PLAINS: u32 = 1466;
pub const SPECIES_SPEWPA_SANDSTORM: u32 = 1467;
pub const SPECIES_SPEWPA_RIVER: u32 = 1468;
pub const SPECIES_SPEWPA_MONSOON: u32 = 1469;
pub const SPECIES_SPEWPA_SAVANNA: u32 = 1470;
pub const SPECIES_SPEWPA_SUN: u32 = 1471;
pub const SPECIES_SPEWPA_OCEAN: u32 = 1472;
pub const SPECIES_SPEWPA_JUNGLE: u32 = 1473;
pub const SPECIES_SPEWPA_FANCY: u32 = 1474;
pub const SPECIES_SPEWPA_POKEBALL: u32 = 1475;
pub const SPECIES_RATICATE_ALOLA_TOTEM: u32 = 1476;
pub const SPECIES_GUMSHOOS_TOTEM: u32 = 1477;
pub const SPECIES_VIKAVOLT_TOTEM: u32 = 1478;
pub const SPECIES_LURANTIS_TOTEM: u32 = 1479;
pub const SPECIES_SALAZZLE_TOTEM: u32 = 1480;
pub const SPECIES_MIMIKYU_TOTEM_DISGUISED: u32 = 1481;
pub const SPECIES_KOMMO_O_TOTEM: u32 = 1482;
pub const SPECIES_MAROWAK_ALOLA_TOTEM: u32 = 1483;
pub const SPECIES_RIBOMBEE_TOTEM: u32 = 1484;
pub const SPECIES_ARAQUANID_TOTEM: u32 = 1485;
pub const SPECIES_TOGEDEMARU_TOTEM: u32 = 1486;
pub const SPECIES_PIKACHU_STARTER: u32 = 1487;
pub const SPECIES_EEVEE_STARTER: u32 = 1488;
pub const SPECIES_VENUSAUR_GMAX: u32 = 1489;
pub const SPECIES_BLASTOISE_GMAX: u32 = 1490;
pub const SPECIES_CHARIZARD_GMAX: u32 = 1491;
pub const SPECIES_BUTTERFREE_GMAX: u32 = 1492;
pub const SPECIES_PIKACHU_GMAX: u32 = 1493;
pub const SPECIES_MEOWTH_GMAX: u32 = 1494;
pub const SPECIES_MACHAMP_GMAX: u32 = 1495;
pub const SPECIES_GENGAR_GMAX: u32 = 1496;
pub const SPECIES_KINGLER_GMAX: u32 = 1497;
pub const SPECIES_LAPRAS_GMAX: u32 = 1498;
pub const SPECIES_EEVEE_GMAX: u32 = 1499;
pub const SPECIES_SNORLAX_GMAX: u32 = 1500;
pub const SPECIES_GARBODOR_GMAX: u32 = 1501;
pub const SPECIES_MELMETAL_GMAX: u32 = 1502;
pub const SPECIES_RILLABOOM_GMAX: u32 = 1503;
pub const SPECIES_CINDERACE_GMAX: u32 = 1504;
pub const SPECIES_INTELEON_GMAX: u32 = 1505;
pub const SPECIES_CORVIKNIGHT_GMAX: u32 = 1506;
pub const SPECIES_ORBEETLE_GMAX: u32 = 1507;
pub const SPECIES_DREDNAW_GMAX: u32 = 1508;
pub const SPECIES_COALOSSAL_GMAX: u32 = 1509;
pub const SPECIES_FLAPPLE_GMAX: u32 = 1510;
pub const SPECIES_APPLETUN_GMAX: u32 = 1511;
pub const SPECIES_SANDACONDA_GMAX: u32 = 1512;
pub const SPECIES_TOXTRICITY_AMPED_GMAX: u32 = 1513;
pub const SPECIES_TOXTRICITY_LOW_KEY_GMAX: u32 = 1514;
pub const SPECIES_CENTISKORCH_GMAX: u32 = 1515;
pub const SPECIES_HATTERENE_GMAX: u32 = 1516;
pub const SPECIES_GRIMMSNARL_GMAX: u32 = 1517;
pub const SPECIES_ALCREMIE_GMAX: u32 = 1518;
pub const SPECIES_COPPERAJAH_GMAX: u32 = 1519;
pub const SPECIES_DURALUDON_GMAX: u32 = 1520;
pub const SPECIES_URSHIFU_SINGLE_STRIKE_GMAX: u32 = 1521;
pub const SPECIES_URSHIFU_GMAX: u32 = 1521;
pub const SPECIES_URSHIFU_SINGLE_STRIKE_STYLE_GMAX: u32 = 1521;
pub const SPECIES_URSHIFU_RAPID_STRIKE_GMAX: u32 = 1522;
pub const SPECIES_URSHIFU_RAPID_STRIKE_STYLE_GMAX: u32 = 1522;
pub const SPECIES_MIMIKYU_BUSTED_TOTEM: u32 = 1523;
pub const SPECIES_MIMIKYU_TOTEM_BUSTED: u32 = 1523;
pub const SPECIES_STARMOBILE_DARK: u32 = 1524;
pub const SPECIES_STARMOBILE_FIRE: u32 = 1525;
pub const SPECIES_STARMOBILE_POISON: u32 = 1526;
pub const SPECIES_STARMOBILE_FAIRY: u32 = 1527;
pub const SPECIES_STARMOBILE_FIGHTING: u32 = 1528;
pub const SPECIES_EGG: u32 = 1529;
pub const NUM_SPECIES: u32 = 1529;
pub const SPECIES_SHINY_TAG: u32 = 5000;
pub const DECAGRAMS_IN_POUND: u32 = 4536;
pub const CM_PER_INCH: f64 = 2.54;
pub const CM_PER_INCH_FACTOR: f64 = 254.0;
pub const INCHES_IN_FOOT: u32 = 12;
pub const INCHES_IN_ONE_AND_HALF_FOOT: f64 = 18.0;
pub const INCHES_IN_FOOT_FACTOR: u32 = 120;
pub const WEIGHT_HEIGHT_STR_LEN: u32 = 16;
pub const DEX_HEADER_X: u32 = 96;
pub const DEX_Y_TOP: u32 = 57;
pub const DEX_Y_BOTTOM: u32 = 73;
pub const DEX_MEASUREMENT_X: u32 = 129;
pub const DEX_HGSS_HEADER_X_PADDING: u32 = 59;
pub const DEX_HGSS_Y_TOP_PADDING: u32 = 7;
pub const DEX_HGSS_Y_BOTTOM_PADDING: u32 = 4;
pub const DEX_HGSS_MEASUREMENT_X_PADDING: u32 = 51;
pub const BERRY_NONE: u32 = 0;
pub const BERRY_FIRMNESS_UNKNOWN: u32 = 0;
pub const BERRY_FIRMNESS_VERY_SOFT: u32 = 1;
pub const BERRY_FIRMNESS_SOFT: u32 = 2;
pub const BERRY_FIRMNESS_HARD: u32 = 3;
pub const BERRY_FIRMNESS_VERY_HARD: u32 = 4;
pub const BERRY_FIRMNESS_SUPER_HARD: u32 = 5;
pub const BERRY_COLOR_RED: u32 = 0;
pub const BERRY_COLOR_BLUE: u32 = 1;
pub const BERRY_COLOR_PURPLE: u32 = 2;
pub const BERRY_COLOR_GREEN: u32 = 3;
pub const BERRY_COLOR_YELLOW: u32 = 4;
pub const BERRY_COLOR_PINK: u32 = 5;
pub const FLAVOR_SPICY: u32 = 0;
pub const FLAVOR_DRY: u32 = 1;
pub const FLAVOR_SWEET: u32 = 2;
pub const FLAVOR_BITTER: u32 = 3;
pub const FLAVOR_SOUR: u32 = 4;
pub const FLAVOR_COUNT: u32 = 5;
pub const BERRY_STAGE_NO_BERRY: u32 = 0;
pub const BERRY_STAGE_PLANTED: u32 = 1;
pub const BERRY_STAGE_SPROUTED: u32 = 2;
pub const BERRY_STAGE_TALLER: u32 = 3;
pub const BERRY_STAGE_FLOWERING: u32 = 4;
pub const BERRY_STAGE_BERRIES: u32 = 5;
pub const BERRY_STAGE_TRUNK: u32 = 6;
pub const BERRY_STAGE_BUDDING: u32 = 7;
pub const BERRY_STAGE_SPARKLING: u32 = 255;
pub const NUM_WATER_STAGES: u32 = 4;
pub const BERRY_TREE_ROUTE_102_PECHA: u32 = 1;
pub const BERRY_TREE_ROUTE_102_ORAN: u32 = 2;
pub const BERRY_TREE_ROUTE_104_SOIL_1: u32 = 3;
pub const BERRY_TREE_ROUTE_104_ORAN_1: u32 = 4;
pub const BERRY_TREE_ROUTE_103_CHERI_1: u32 = 5;
pub const BERRY_TREE_ROUTE_103_LEPPA: u32 = 6;
pub const BERRY_TREE_ROUTE_103_CHERI_2: u32 = 7;
pub const BERRY_TREE_ROUTE_104_CHERI_1: u32 = 8;
pub const BERRY_TREE_ROUTE_104_SOIL_2: u32 = 9;
pub const BERRY_TREE_ROUTE_104_LEPPA: u32 = 10;
pub const BERRY_TREE_ROUTE_104_ORAN_2: u32 = 11;
pub const BERRY_TREE_ROUTE_104_SOIL_3: u32 = 12;
pub const BERRY_TREE_ROUTE_104_PECHA: u32 = 13;
pub const BERRY_TREE_ROUTE_123_QUALOT_1: u32 = 14;
pub const BERRY_TREE_ROUTE_123_POMEG_1: u32 = 15;
pub const BERRY_TREE_ROUTE_110_NANAB_1: u32 = 16;
pub const BERRY_TREE_ROUTE_110_NANAB_2: u32 = 17;
pub const BERRY_TREE_ROUTE_110_NANAB_3: u32 = 18;
pub const BERRY_TREE_ROUTE_111_RAZZ_1: u32 = 19;
pub const BERRY_TREE_ROUTE_111_RAZZ_2: u32 = 20;
pub const BERRY_TREE_ROUTE_112_RAWST_1: u32 = 21;
pub const BERRY_TREE_ROUTE_112_PECHA_1: u32 = 22;
pub const BERRY_TREE_ROUTE_112_PECHA_2: u32 = 23;
pub const BERRY_TREE_ROUTE_112_RAWST_2: u32 = 24;
pub const BERRY_TREE_ROUTE_116_PINAP_1: u32 = 25;
pub const BERRY_TREE_ROUTE_116_CHESTO_1: u32 = 26;
pub const BERRY_TREE_ROUTE_117_WEPEAR_1: u32 = 27;
pub const BERRY_TREE_ROUTE_117_WEPEAR_2: u32 = 28;
pub const BERRY_TREE_ROUTE_117_WEPEAR_3: u32 = 29;
pub const BERRY_TREE_ROUTE_123_POMEG_2: u32 = 30;
pub const BERRY_TREE_ROUTE_118_SITRUS_1: u32 = 31;
pub const BERRY_TREE_ROUTE_118_SOIL: u32 = 32;
pub const BERRY_TREE_ROUTE_118_SITRUS_2: u32 = 33;
pub const BERRY_TREE_ROUTE_119_POMEG_1: u32 = 34;
pub const BERRY_TREE_ROUTE_119_POMEG_2: u32 = 35;
pub const BERRY_TREE_ROUTE_119_POMEG_3: u32 = 36;
pub const BERRY_TREE_ROUTE_120_ASPEAR_1: u32 = 37;
pub const BERRY_TREE_ROUTE_120_ASPEAR_2: u32 = 38;
pub const BERRY_TREE_ROUTE_120_ASPEAR_3: u32 = 39;
pub const BERRY_TREE_ROUTE_120_PECHA_1: u32 = 40;
pub const BERRY_TREE_ROUTE_120_PECHA_2: u32 = 41;
pub const BERRY_TREE_ROUTE_120_PECHA_3: u32 = 42;
pub const BERRY_TREE_ROUTE_120_RAZZ: u32 = 43;
pub const BERRY_TREE_ROUTE_120_NANAB: u32 = 44;
pub const BERRY_TREE_ROUTE_120_PINAP: u32 = 45;
pub const BERRY_TREE_ROUTE_120_WEPEAR: u32 = 46;
pub const BERRY_TREE_ROUTE_121_PERSIM: u32 = 47;
pub const BERRY_TREE_ROUTE_121_ASPEAR: u32 = 48;
pub const BERRY_TREE_ROUTE_121_RAWST: u32 = 49;
pub const BERRY_TREE_ROUTE_121_CHESTO: u32 = 50;
pub const BERRY_TREE_ROUTE_121_SOIL_1: u32 = 51;
pub const BERRY_TREE_ROUTE_121_NANAB_1: u32 = 52;
pub const BERRY_TREE_ROUTE_121_NANAB_2: u32 = 53;
pub const BERRY_TREE_ROUTE_121_SOIL_2: u32 = 54;
pub const BERRY_TREE_ROUTE_115_BLUK_1: u32 = 55;
pub const BERRY_TREE_ROUTE_115_BLUK_2: u32 = 56;
pub const BERRY_TREE_UNUSED: u32 = 57;
pub const BERRY_TREE_ROUTE_123_POMEG_3: u32 = 58;
pub const BERRY_TREE_ROUTE_123_POMEG_4: u32 = 59;
pub const BERRY_TREE_ROUTE_123_GREPA_1: u32 = 60;
pub const BERRY_TREE_ROUTE_123_GREPA_2: u32 = 61;
pub const BERRY_TREE_ROUTE_123_LEPPA_1: u32 = 62;
pub const BERRY_TREE_ROUTE_123_SOIL: u32 = 63;
pub const BERRY_TREE_ROUTE_123_LEPPA_2: u32 = 64;
pub const BERRY_TREE_ROUTE_123_GREPA_3: u32 = 65;
pub const BERRY_TREE_ROUTE_116_CHESTO_2: u32 = 66;
pub const BERRY_TREE_ROUTE_116_PINAP_2: u32 = 67;
pub const BERRY_TREE_ROUTE_114_PERSIM_1: u32 = 68;
pub const BERRY_TREE_ROUTE_115_KELPSY_1: u32 = 69;
pub const BERRY_TREE_ROUTE_115_KELPSY_2: u32 = 70;
pub const BERRY_TREE_ROUTE_115_KELPSY_3: u32 = 71;
pub const BERRY_TREE_ROUTE_123_GREPA_4: u32 = 72;
pub const BERRY_TREE_ROUTE_123_QUALOT_2: u32 = 73;
pub const BERRY_TREE_ROUTE_123_QUALOT_3: u32 = 74;
pub const BERRY_TREE_ROUTE_104_SOIL_4: u32 = 75;
pub const BERRY_TREE_ROUTE_104_CHERI_2: u32 = 76;
pub const BERRY_TREE_ROUTE_114_PERSIM_2: u32 = 77;
pub const BERRY_TREE_ROUTE_114_PERSIM_3: u32 = 78;
pub const BERRY_TREE_ROUTE_123_QUALOT_4: u32 = 79;
pub const BERRY_TREE_ROUTE_111_ORAN_1: u32 = 80;
pub const BERRY_TREE_ROUTE_111_ORAN_2: u32 = 81;
pub const BERRY_TREE_ROUTE_130_LIECHI: u32 = 82;
pub const BERRY_TREE_ROUTE_119_HONDEW_1: u32 = 83;
pub const BERRY_TREE_ROUTE_119_HONDEW_2: u32 = 84;
pub const BERRY_TREE_ROUTE_119_SITRUS: u32 = 85;
pub const BERRY_TREE_ROUTE_119_LEPPA: u32 = 86;
pub const BERRY_TREE_ROUTE_123_PECHA: u32 = 87;
pub const BERRY_TREE_ROUTE_123_SITRUS: u32 = 88;
pub const BERRY_TREE_ROUTE_123_RAWST: u32 = 89;
pub const BERRY_TREES_COUNT: u32 = 128;
pub const MAP_PETALBURG_CITY: u32 = 0;
pub const MAP_SLATEPORT_CITY: u32 = 1;
pub const MAP_MAUVILLE_CITY: u32 = 2;
pub const MAP_RUSTBORO_CITY: u32 = 3;
pub const MAP_FORTREE_CITY: u32 = 4;
pub const MAP_LILYCOVE_CITY: u32 = 5;
pub const MAP_MOSSDEEP_CITY: u32 = 6;
pub const MAP_SOOTOPOLIS_CITY: u32 = 7;
pub const MAP_EVER_GRANDE_CITY: u32 = 8;
pub const MAP_LITTLEROOT_TOWN: u32 = 9;
pub const MAP_OLDALE_TOWN: u32 = 10;
pub const MAP_DEWFORD_TOWN: u32 = 11;
pub const MAP_LAVARIDGE_TOWN: u32 = 12;
pub const MAP_FALLARBOR_TOWN: u32 = 13;
pub const MAP_VERDANTURF_TOWN: u32 = 14;
pub const MAP_PACIFIDLOG_TOWN: u32 = 15;
pub const MAP_ROUTE101: u32 = 16;
pub const MAP_ROUTE102: u32 = 17;
pub const MAP_ROUTE103: u32 = 18;
pub const MAP_ROUTE104: u32 = 19;
pub const MAP_ROUTE105: u32 = 20;
pub const MAP_ROUTE106: u32 = 21;
pub const MAP_ROUTE107: u32 = 22;
pub const MAP_ROUTE108: u32 = 23;
pub const MAP_ROUTE109: u32 = 24;
pub const MAP_ROUTE110: u32 = 25;
pub const MAP_ROUTE111: u32 = 26;
pub const MAP_ROUTE112: u32 = 27;
pub const MAP_ROUTE113: u32 = 28;
pub const MAP_ROUTE114: u32 = 29;
pub const MAP_ROUTE115: u32 = 30;
pub const MAP_ROUTE116: u32 = 31;
pub const MAP_ROUTE117: u32 = 32;
pub const MAP_ROUTE118: u32 = 33;
pub const MAP_ROUTE119: u32 = 34;
pub const MAP_ROUTE120: u32 = 35;
pub const MAP_ROUTE121: u32 = 36;
pub const MAP_ROUTE122: u32 = 37;
pub const MAP_ROUTE123: u32 = 38;
pub const MAP_ROUTE124: u32 = 39;
pub const MAP_ROUTE125: u32 = 40;
pub const MAP_ROUTE126: u32 = 41;
pub const MAP_ROUTE127: u32 = 42;
pub const MAP_ROUTE128: u32 = 43;
pub const MAP_ROUTE129: u32 = 44;
pub const MAP_ROUTE130: u32 = 45;
pub const MAP_ROUTE131: u32 = 46;
pub const MAP_ROUTE132: u32 = 47;
pub const MAP_ROUTE133: u32 = 48;
pub const MAP_ROUTE134: u32 = 49;
pub const MAP_UNDERWATER_ROUTE124: u32 = 50;
pub const MAP_UNDERWATER_ROUTE126: u32 = 51;
pub const MAP_UNDERWATER_ROUTE127: u32 = 52;
pub const MAP_UNDERWATER_ROUTE128: u32 = 53;
pub const MAP_UNDERWATER_ROUTE129: u32 = 54;
pub const MAP_UNDERWATER_ROUTE105: u32 = 55;
pub const MAP_UNDERWATER_ROUTE125: u32 = 56;
pub const MAP_LITTLEROOT_TOWN_BRENDANS_HOUSE_1F: u32 = 256;
pub const MAP_LITTLEROOT_TOWN_BRENDANS_HOUSE_2F: u32 = 257;
pub const MAP_LITTLEROOT_TOWN_MAYS_HOUSE_1F: u32 = 258;
pub const MAP_LITTLEROOT_TOWN_MAYS_HOUSE_2F: u32 = 259;
pub const MAP_LITTLEROOT_TOWN_PROFESSOR_BIRCHS_LAB: u32 = 260;
pub const MAP_OLDALE_TOWN_HOUSE1: u32 = 512;
pub const MAP_OLDALE_TOWN_HOUSE2: u32 = 513;
pub const MAP_OLDALE_TOWN_POKEMON_CENTER_1F: u32 = 514;
pub const MAP_OLDALE_TOWN_POKEMON_CENTER_2F: u32 = 515;
pub const MAP_OLDALE_TOWN_MART: u32 = 516;
pub const MAP_DEWFORD_TOWN_HOUSE1: u32 = 768;
pub const MAP_DEWFORD_TOWN_POKEMON_CENTER_1F: u32 = 769;
pub const MAP_DEWFORD_TOWN_POKEMON_CENTER_2F: u32 = 770;
pub const MAP_DEWFORD_TOWN_GYM: u32 = 771;
pub const MAP_DEWFORD_TOWN_HALL: u32 = 772;
pub const MAP_DEWFORD_TOWN_HOUSE2: u32 = 773;
pub const MAP_LAVARIDGE_TOWN_HERB_SHOP: u32 = 1024;
pub const MAP_LAVARIDGE_TOWN_GYM_1F: u32 = 1025;
pub const MAP_LAVARIDGE_TOWN_GYM_B1F: u32 = 1026;
pub const MAP_LAVARIDGE_TOWN_HOUSE: u32 = 1027;
pub const MAP_LAVARIDGE_TOWN_MART: u32 = 1028;
pub const MAP_LAVARIDGE_TOWN_POKEMON_CENTER_1F: u32 = 1029;
pub const MAP_LAVARIDGE_TOWN_POKEMON_CENTER_2F: u32 = 1030;
pub const MAP_FALLARBOR_TOWN_MART: u32 = 1280;
pub const MAP_FALLARBOR_TOWN_BATTLE_TENT_LOBBY: u32 = 1281;
pub const MAP_FALLARBOR_TOWN_BATTLE_TENT_CORRIDOR: u32 = 1282;
pub const MAP_FALLARBOR_TOWN_BATTLE_TENT_BATTLE_ROOM: u32 = 1283;
pub const MAP_FALLARBOR_TOWN_POKEMON_CENTER_1F: u32 = 1284;
pub const MAP_FALLARBOR_TOWN_POKEMON_CENTER_2F: u32 = 1285;
pub const MAP_FALLARBOR_TOWN_COZMOS_HOUSE: u32 = 1286;
pub const MAP_FALLARBOR_TOWN_MOVE_RELEARNERS_HOUSE: u32 = 1287;
pub const MAP_VERDANTURF_TOWN_BATTLE_TENT_LOBBY: u32 = 1536;
pub const MAP_VERDANTURF_TOWN_BATTLE_TENT_CORRIDOR: u32 = 1537;
pub const MAP_VERDANTURF_TOWN_BATTLE_TENT_BATTLE_ROOM: u32 = 1538;
pub const MAP_VERDANTURF_TOWN_MART: u32 = 1539;
pub const MAP_VERDANTURF_TOWN_POKEMON_CENTER_1F: u32 = 1540;
pub const MAP_VERDANTURF_TOWN_POKEMON_CENTER_2F: u32 = 1541;
pub const MAP_VERDANTURF_TOWN_WANDAS_HOUSE: u32 = 1542;
pub const MAP_VERDANTURF_TOWN_FRIENDSHIP_RATERS_HOUSE: u32 = 1543;
pub const MAP_VERDANTURF_TOWN_HOUSE: u32 = 1544;
pub const MAP_PACIFIDLOG_TOWN_POKEMON_CENTER_1F: u32 = 1792;
pub const MAP_PACIFIDLOG_TOWN_POKEMON_CENTER_2F: u32 = 1793;
pub const MAP_PACIFIDLOG_TOWN_HOUSE1: u32 = 1794;
pub const MAP_PACIFIDLOG_TOWN_HOUSE2: u32 = 1795;
pub const MAP_PACIFIDLOG_TOWN_HOUSE3: u32 = 1796;
pub const MAP_PACIFIDLOG_TOWN_HOUSE4: u32 = 1797;
pub const MAP_PACIFIDLOG_TOWN_HOUSE5: u32 = 1798;
pub const MAP_PETALBURG_CITY_WALLYS_HOUSE: u32 = 2048;
pub const MAP_PETALBURG_CITY_GYM: u32 = 2049;
pub const MAP_PETALBURG_CITY_HOUSE1: u32 = 2050;
pub const MAP_PETALBURG_CITY_HOUSE2: u32 = 2051;
pub const MAP_PETALBURG_CITY_POKEMON_CENTER_1F: u32 = 2052;
pub const MAP_PETALBURG_CITY_POKEMON_CENTER_2F: u32 = 2053;
pub const MAP_PETALBURG_CITY_MART: u32 = 2054;
pub const MAP_SLATEPORT_CITY_STERNS_SHIPYARD_1F: u32 = 2304;
pub const MAP_SLATEPORT_CITY_STERNS_SHIPYARD_2F: u32 = 2305;
pub const MAP_SLATEPORT_CITY_BATTLE_TENT_LOBBY: u32 = 2306;
pub const MAP_SLATEPORT_CITY_BATTLE_TENT_CORRIDOR: u32 = 2307;
pub const MAP_SLATEPORT_CITY_BATTLE_TENT_BATTLE_ROOM: u32 = 2308;
pub const MAP_SLATEPORT_CITY_NAME_RATERS_HOUSE: u32 = 2309;
pub const MAP_SLATEPORT_CITY_POKEMON_FAN_CLUB: u32 = 2310;
pub const MAP_SLATEPORT_CITY_OCEANIC_MUSEUM_1F: u32 = 2311;
pub const MAP_SLATEPORT_CITY_OCEANIC_MUSEUM_2F: u32 = 2312;
pub const MAP_SLATEPORT_CITY_HARBOR: u32 = 2313;
pub const MAP_SLATEPORT_CITY_HOUSE: u32 = 2314;
pub const MAP_SLATEPORT_CITY_POKEMON_CENTER_1F: u32 = 2315;
pub const MAP_SLATEPORT_CITY_POKEMON_CENTER_2F: u32 = 2316;
pub const MAP_SLATEPORT_CITY_MART: u32 = 2317;
pub const MAP_MAUVILLE_CITY_GYM: u32 = 2560;
pub const MAP_MAUVILLE_CITY_BIKE_SHOP: u32 = 2561;
pub const MAP_MAUVILLE_CITY_HOUSE1: u32 = 2562;
pub const MAP_MAUVILLE_CITY_GAME_CORNER: u32 = 2563;
pub const MAP_MAUVILLE_CITY_HOUSE2: u32 = 2564;
pub const MAP_MAUVILLE_CITY_POKEMON_CENTER_1F: u32 = 2565;
pub const MAP_MAUVILLE_CITY_POKEMON_CENTER_2F: u32 = 2566;
pub const MAP_MAUVILLE_CITY_MART: u32 = 2567;
pub const MAP_RUSTBORO_CITY_DEVON_CORP_1F: u32 = 2816;
pub const MAP_RUSTBORO_CITY_DEVON_CORP_2F: u32 = 2817;
pub const MAP_RUSTBORO_CITY_DEVON_CORP_3F: u32 = 2818;
pub const MAP_RUSTBORO_CITY_GYM: u32 = 2819;
pub const MAP_RUSTBORO_CITY_POKEMON_SCHOOL: u32 = 2820;
pub const MAP_RUSTBORO_CITY_POKEMON_CENTER_1F: u32 = 2821;
pub const MAP_RUSTBORO_CITY_POKEMON_CENTER_2F: u32 = 2822;
pub const MAP_RUSTBORO_CITY_MART: u32 = 2823;
pub const MAP_RUSTBORO_CITY_FLAT1_1F: u32 = 2824;
pub const MAP_RUSTBORO_CITY_FLAT1_2F: u32 = 2825;
pub const MAP_RUSTBORO_CITY_HOUSE1: u32 = 2826;
pub const MAP_RUSTBORO_CITY_CUTTERS_HOUSE: u32 = 2827;
pub const MAP_RUSTBORO_CITY_HOUSE2: u32 = 2828;
pub const MAP_RUSTBORO_CITY_FLAT2_1F: u32 = 2829;
pub const MAP_RUSTBORO_CITY_FLAT2_2F: u32 = 2830;
pub const MAP_RUSTBORO_CITY_FLAT2_3F: u32 = 2831;
pub const MAP_RUSTBORO_CITY_HOUSE3: u32 = 2832;
pub const MAP_FORTREE_CITY_HOUSE1: u32 = 3072;
pub const MAP_FORTREE_CITY_GYM: u32 = 3073;
pub const MAP_FORTREE_CITY_POKEMON_CENTER_1F: u32 = 3074;
pub const MAP_FORTREE_CITY_POKEMON_CENTER_2F: u32 = 3075;
pub const MAP_FORTREE_CITY_MART: u32 = 3076;
pub const MAP_FORTREE_CITY_HOUSE2: u32 = 3077;
pub const MAP_FORTREE_CITY_HOUSE3: u32 = 3078;
pub const MAP_FORTREE_CITY_HOUSE4: u32 = 3079;
pub const MAP_FORTREE_CITY_HOUSE5: u32 = 3080;
pub const MAP_FORTREE_CITY_DECORATION_SHOP: u32 = 3081;
pub const MAP_LILYCOVE_CITY_COVE_LILY_MOTEL_1F: u32 = 3328;
pub const MAP_LILYCOVE_CITY_COVE_LILY_MOTEL_2F: u32 = 3329;
pub const MAP_LILYCOVE_CITY_LILYCOVE_MUSEUM_1F: u32 = 3330;
pub const MAP_LILYCOVE_CITY_LILYCOVE_MUSEUM_2F: u32 = 3331;
pub const MAP_LILYCOVE_CITY_CONTEST_LOBBY: u32 = 3332;
pub const MAP_LILYCOVE_CITY_CONTEST_HALL: u32 = 3333;
pub const MAP_LILYCOVE_CITY_POKEMON_CENTER_1F: u32 = 3334;
pub const MAP_LILYCOVE_CITY_POKEMON_CENTER_2F: u32 = 3335;
pub const MAP_LILYCOVE_CITY_UNUSED_MART: u32 = 3336;
pub const MAP_LILYCOVE_CITY_POKEMON_TRAINER_FAN_CLUB: u32 = 3337;
pub const MAP_LILYCOVE_CITY_HARBOR: u32 = 3338;
pub const MAP_LILYCOVE_CITY_MOVE_DELETERS_HOUSE: u32 = 3339;
pub const MAP_LILYCOVE_CITY_HOUSE1: u32 = 3340;
pub const MAP_LILYCOVE_CITY_HOUSE2: u32 = 3341;
pub const MAP_LILYCOVE_CITY_HOUSE3: u32 = 3342;
pub const MAP_LILYCOVE_CITY_HOUSE4: u32 = 3343;
pub const MAP_LILYCOVE_CITY_DEPARTMENT_STORE_1F: u32 = 3344;
pub const MAP_LILYCOVE_CITY_DEPARTMENT_STORE_2F: u32 = 3345;
pub const MAP_LILYCOVE_CITY_DEPARTMENT_STORE_3F: u32 = 3346;
pub const MAP_LILYCOVE_CITY_DEPARTMENT_STORE_4F: u32 = 3347;
pub const MAP_LILYCOVE_CITY_DEPARTMENT_STORE_5F: u32 = 3348;
pub const MAP_LILYCOVE_CITY_DEPARTMENT_STORE_ROOFTOP: u32 = 3349;
pub const MAP_LILYCOVE_CITY_DEPARTMENT_STORE_ELEVATOR: u32 = 3350;
pub const MAP_MOSSDEEP_CITY_GYM: u32 = 3584;
pub const MAP_MOSSDEEP_CITY_HOUSE1: u32 = 3585;
pub const MAP_MOSSDEEP_CITY_HOUSE2: u32 = 3586;
pub const MAP_MOSSDEEP_CITY_POKEMON_CENTER_1F: u32 = 3587;
pub const MAP_MOSSDEEP_CITY_POKEMON_CENTER_2F: u32 = 3588;
pub const MAP_MOSSDEEP_CITY_MART: u32 = 3589;
pub const MAP_MOSSDEEP_CITY_HOUSE3: u32 = 3590;
pub const MAP_MOSSDEEP_CITY_STEVENS_HOUSE: u32 = 3591;
pub const MAP_MOSSDEEP_CITY_HOUSE4: u32 = 3592;
pub const MAP_MOSSDEEP_CITY_SPACE_CENTER_1F: u32 = 3593;
pub const MAP_MOSSDEEP_CITY_SPACE_CENTER_2F: u32 = 3594;
pub const MAP_MOSSDEEP_CITY_GAME_CORNER_1F: u32 = 3595;
pub const MAP_MOSSDEEP_CITY_GAME_CORNER_B1F: u32 = 3596;
pub const MAP_SOOTOPOLIS_CITY_GYM_1F: u32 = 3840;
pub const MAP_SOOTOPOLIS_CITY_GYM_B1F: u32 = 3841;
pub const MAP_SOOTOPOLIS_CITY_POKEMON_CENTER_1F: u32 = 3842;
pub const MAP_SOOTOPOLIS_CITY_POKEMON_CENTER_2F: u32 = 3843;
pub const MAP_SOOTOPOLIS_CITY_MART: u32 = 3844;
pub const MAP_SOOTOPOLIS_CITY_HOUSE1: u32 = 3845;
pub const MAP_SOOTOPOLIS_CITY_HOUSE2: u32 = 3846;
pub const MAP_SOOTOPOLIS_CITY_HOUSE3: u32 = 3847;
pub const MAP_SOOTOPOLIS_CITY_HOUSE4: u32 = 3848;
pub const MAP_SOOTOPOLIS_CITY_HOUSE5: u32 = 3849;
pub const MAP_SOOTOPOLIS_CITY_HOUSE6: u32 = 3850;
pub const MAP_SOOTOPOLIS_CITY_HOUSE7: u32 = 3851;
pub const MAP_SOOTOPOLIS_CITY_LOTAD_AND_SEEDOT_HOUSE: u32 = 3852;
pub const MAP_SOOTOPOLIS_CITY_MYSTERY_EVENTS_HOUSE_1F: u32 = 3853;
pub const MAP_SOOTOPOLIS_CITY_MYSTERY_EVENTS_HOUSE_B1F: u32 = 3854;
pub const MAP_EVER_GRANDE_CITY_SIDNEYS_ROOM: u32 = 4096;
pub const MAP_EVER_GRANDE_CITY_PHOEBES_ROOM: u32 = 4097;
pub const MAP_EVER_GRANDE_CITY_GLACIAS_ROOM: u32 = 4098;
pub const MAP_EVER_GRANDE_CITY_DRAKES_ROOM: u32 = 4099;
pub const MAP_EVER_GRANDE_CITY_CHAMPIONS_ROOM: u32 = 4100;
pub const MAP_EVER_GRANDE_CITY_HALL1: u32 = 4101;
pub const MAP_EVER_GRANDE_CITY_HALL2: u32 = 4102;
pub const MAP_EVER_GRANDE_CITY_HALL3: u32 = 4103;
pub const MAP_EVER_GRANDE_CITY_HALL4: u32 = 4104;
pub const MAP_EVER_GRANDE_CITY_HALL5: u32 = 4105;
pub const MAP_EVER_GRANDE_CITY_POKEMON_LEAGUE_1F: u32 = 4106;
pub const MAP_EVER_GRANDE_CITY_HALL_OF_FAME: u32 = 4107;
pub const MAP_EVER_GRANDE_CITY_POKEMON_CENTER_1F: u32 = 4108;
pub const MAP_EVER_GRANDE_CITY_POKEMON_CENTER_2F: u32 = 4109;
pub const MAP_EVER_GRANDE_CITY_POKEMON_LEAGUE_2F: u32 = 4110;
pub const MAP_ROUTE104_MR_BRINEYS_HOUSE: u32 = 4352;
pub const MAP_ROUTE104_PRETTY_PETAL_FLOWER_SHOP: u32 = 4353;
pub const MAP_ROUTE111_WINSTRATE_FAMILYS_HOUSE: u32 = 4608;
pub const MAP_ROUTE111_OLD_LADYS_REST_STOP: u32 = 4609;
pub const MAP_ROUTE112_CABLE_CAR_STATION: u32 = 4864;
pub const MAP_MT_CHIMNEY_CABLE_CAR_STATION: u32 = 4865;
pub const MAP_ROUTE114_FOSSIL_MANIACS_HOUSE: u32 = 5120;
pub const MAP_ROUTE114_FOSSIL_MANIACS_TUNNEL: u32 = 5121;
pub const MAP_ROUTE114_LANETTES_HOUSE: u32 = 5122;
pub const MAP_ROUTE116_TUNNELERS_REST_HOUSE: u32 = 5376;
pub const MAP_ROUTE117_POKEMON_DAY_CARE: u32 = 5632;
pub const MAP_ROUTE121_SAFARI_ZONE_ENTRANCE: u32 = 5888;
pub const MAP_METEOR_FALLS_1F_1R: u32 = 6144;
pub const MAP_METEOR_FALLS_1F_2R: u32 = 6145;
pub const MAP_METEOR_FALLS_B1F_1R: u32 = 6146;
pub const MAP_METEOR_FALLS_B1F_2R: u32 = 6147;
pub const MAP_RUSTURF_TUNNEL: u32 = 6148;
pub const MAP_UNDERWATER_SOOTOPOLIS_CITY: u32 = 6149;
pub const MAP_DESERT_RUINS: u32 = 6150;
pub const MAP_GRANITE_CAVE_1F: u32 = 6151;
pub const MAP_GRANITE_CAVE_B1F: u32 = 6152;
pub const MAP_GRANITE_CAVE_B2F: u32 = 6153;
pub const MAP_GRANITE_CAVE_STEVENS_ROOM: u32 = 6154;
pub const MAP_PETALBURG_WOODS: u32 = 6155;
pub const MAP_MT_CHIMNEY: u32 = 6156;
pub const MAP_JAGGED_PASS: u32 = 6157;
pub const MAP_FIERY_PATH: u32 = 6158;
pub const MAP_MT_PYRE_1F: u32 = 6159;
pub const MAP_MT_PYRE_2F: u32 = 6160;
pub const MAP_MT_PYRE_3F: u32 = 6161;
pub const MAP_MT_PYRE_4F: u32 = 6162;
pub const MAP_MT_PYRE_5F: u32 = 6163;
pub const MAP_MT_PYRE_6F: u32 = 6164;
pub const MAP_MT_PYRE_EXTERIOR: u32 = 6165;
pub const MAP_MT_PYRE_SUMMIT: u32 = 6166;
pub const MAP_AQUA_HIDEOUT_1F: u32 = 6167;
pub const MAP_AQUA_HIDEOUT_B1F: u32 = 6168;
pub const MAP_AQUA_HIDEOUT_B2F: u32 = 6169;
pub const MAP_UNDERWATER_SEAFLOOR_CAVERN: u32 = 6170;
pub const MAP_SEAFLOOR_CAVERN_ENTRANCE: u32 = 6171;
pub const MAP_SEAFLOOR_CAVERN_ROOM1: u32 = 6172;
pub const MAP_SEAFLOOR_CAVERN_ROOM2: u32 = 6173;
pub const MAP_SEAFLOOR_CAVERN_ROOM3: u32 = 6174;
pub const MAP_SEAFLOOR_CAVERN_ROOM4: u32 = 6175;
pub const MAP_SEAFLOOR_CAVERN_ROOM5: u32 = 6176;
pub const MAP_SEAFLOOR_CAVERN_ROOM6: u32 = 6177;
pub const MAP_SEAFLOOR_CAVERN_ROOM7: u32 = 6178;
pub const MAP_SEAFLOOR_CAVERN_ROOM8: u32 = 6179;
pub const MAP_SEAFLOOR_CAVERN_ROOM9: u32 = 6180;
pub const MAP_CAVE_OF_ORIGIN_ENTRANCE: u32 = 6181;
pub const MAP_CAVE_OF_ORIGIN_1F: u32 = 6182;
pub const MAP_CAVE_OF_ORIGIN_UNUSED_RUBY_SAPPHIRE_MAP1: u32 = 6183;
pub const MAP_CAVE_OF_ORIGIN_UNUSED_RUBY_SAPPHIRE_MAP2: u32 = 6184;
pub const MAP_CAVE_OF_ORIGIN_UNUSED_RUBY_SAPPHIRE_MAP3: u32 = 6185;
pub const MAP_CAVE_OF_ORIGIN_B1F: u32 = 6186;
pub const MAP_VICTORY_ROAD_1F: u32 = 6187;
pub const MAP_VICTORY_ROAD_B1F: u32 = 6188;
pub const MAP_VICTORY_ROAD_B2F: u32 = 6189;
pub const MAP_SHOAL_CAVE_LOW_TIDE_ENTRANCE_ROOM: u32 = 6190;
pub const MAP_SHOAL_CAVE_LOW_TIDE_INNER_ROOM: u32 = 6191;
pub const MAP_SHOAL_CAVE_LOW_TIDE_STAIRS_ROOM: u32 = 6192;
pub const MAP_SHOAL_CAVE_LOW_TIDE_LOWER_ROOM: u32 = 6193;
pub const MAP_SHOAL_CAVE_HIGH_TIDE_ENTRANCE_ROOM: u32 = 6194;
pub const MAP_SHOAL_CAVE_HIGH_TIDE_INNER_ROOM: u32 = 6195;
pub const MAP_NEW_MAUVILLE_ENTRANCE: u32 = 6196;
pub const MAP_NEW_MAUVILLE_INSIDE: u32 = 6197;
pub const MAP_ABANDONED_SHIP_DECK: u32 = 6198;
pub const MAP_ABANDONED_SHIP_CORRIDORS_1F: u32 = 6199;
pub const MAP_ABANDONED_SHIP_ROOMS_1F: u32 = 6200;
pub const MAP_ABANDONED_SHIP_CORRIDORS_B1F: u32 = 6201;
pub const MAP_ABANDONED_SHIP_ROOMS_B1F: u32 = 6202;
pub const MAP_ABANDONED_SHIP_ROOMS2_B1F: u32 = 6203;
pub const MAP_ABANDONED_SHIP_UNDERWATER1: u32 = 6204;
pub const MAP_ABANDONED_SHIP_ROOM_B1F: u32 = 6205;
pub const MAP_ABANDONED_SHIP_ROOMS2_1F: u32 = 6206;
pub const MAP_ABANDONED_SHIP_CAPTAINS_OFFICE: u32 = 6207;
pub const MAP_ABANDONED_SHIP_UNDERWATER2: u32 = 6208;
pub const MAP_ABANDONED_SHIP_HIDDEN_FLOOR_CORRIDORS: u32 = 6209;
pub const MAP_ABANDONED_SHIP_HIDDEN_FLOOR_ROOMS: u32 = 6210;
pub const MAP_ISLAND_CAVE: u32 = 6211;
pub const MAP_ANCIENT_TOMB: u32 = 6212;
pub const MAP_UNDERWATER_ROUTE134: u32 = 6213;
pub const MAP_UNDERWATER_SEALED_CHAMBER: u32 = 6214;
pub const MAP_SEALED_CHAMBER_OUTER_ROOM: u32 = 6215;
pub const MAP_SEALED_CHAMBER_INNER_ROOM: u32 = 6216;
pub const MAP_SCORCHED_SLAB: u32 = 6217;
pub const MAP_AQUA_HIDEOUT_UNUSED_RUBY_MAP1: u32 = 6218;
pub const MAP_AQUA_HIDEOUT_UNUSED_RUBY_MAP2: u32 = 6219;
pub const MAP_AQUA_HIDEOUT_UNUSED_RUBY_MAP3: u32 = 6220;
pub const MAP_SKY_PILLAR_ENTRANCE: u32 = 6221;
pub const MAP_SKY_PILLAR_OUTSIDE: u32 = 6222;
pub const MAP_SKY_PILLAR_1F: u32 = 6223;
pub const MAP_SKY_PILLAR_2F: u32 = 6224;
pub const MAP_SKY_PILLAR_3F: u32 = 6225;
pub const MAP_SKY_PILLAR_4F: u32 = 6226;
pub const MAP_SHOAL_CAVE_LOW_TIDE_ICE_ROOM: u32 = 6227;
pub const MAP_SKY_PILLAR_5F: u32 = 6228;
pub const MAP_SKY_PILLAR_TOP: u32 = 6229;
pub const MAP_MAGMA_HIDEOUT_1F: u32 = 6230;
pub const MAP_MAGMA_HIDEOUT_2F_1R: u32 = 6231;
pub const MAP_MAGMA_HIDEOUT_2F_2R: u32 = 6232;
pub const MAP_MAGMA_HIDEOUT_3F_1R: u32 = 6233;
pub const MAP_MAGMA_HIDEOUT_3F_2R: u32 = 6234;
pub const MAP_MAGMA_HIDEOUT_4F: u32 = 6235;
pub const MAP_MAGMA_HIDEOUT_3F_3R: u32 = 6236;
pub const MAP_MAGMA_HIDEOUT_2F_3R: u32 = 6237;
pub const MAP_MIRAGE_TOWER_1F: u32 = 6238;
pub const MAP_MIRAGE_TOWER_2F: u32 = 6239;
pub const MAP_MIRAGE_TOWER_3F: u32 = 6240;
pub const MAP_MIRAGE_TOWER_4F: u32 = 6241;
pub const MAP_DESERT_UNDERPASS: u32 = 6242;
pub const MAP_ARTISAN_CAVE_B1F: u32 = 6243;
pub const MAP_ARTISAN_CAVE_1F: u32 = 6244;
pub const MAP_UNDERWATER_MARINE_CAVE: u32 = 6245;
pub const MAP_MARINE_CAVE_ENTRANCE: u32 = 6246;
pub const MAP_MARINE_CAVE_END: u32 = 6247;
pub const MAP_TERRA_CAVE_ENTRANCE: u32 = 6248;
pub const MAP_TERRA_CAVE_END: u32 = 6249;
pub const MAP_ALTERING_CAVE: u32 = 6250;
pub const MAP_METEOR_FALLS_STEVENS_CAVE: u32 = 6251;
pub const MAP_SECRET_BASE_RED_CAVE1: u32 = 6400;
pub const MAP_SECRET_BASE_BROWN_CAVE1: u32 = 6401;
pub const MAP_SECRET_BASE_BLUE_CAVE1: u32 = 6402;
pub const MAP_SECRET_BASE_YELLOW_CAVE1: u32 = 6403;
pub const MAP_SECRET_BASE_TREE1: u32 = 6404;
pub const MAP_SECRET_BASE_SHRUB1: u32 = 6405;
pub const MAP_SECRET_BASE_RED_CAVE2: u32 = 6406;
pub const MAP_SECRET_BASE_BROWN_CAVE2: u32 = 6407;
pub const MAP_SECRET_BASE_BLUE_CAVE2: u32 = 6408;
pub const MAP_SECRET_BASE_YELLOW_CAVE2: u32 = 6409;
pub const MAP_SECRET_BASE_TREE2: u32 = 6410;
pub const MAP_SECRET_BASE_SHRUB2: u32 = 6411;
pub const MAP_SECRET_BASE_RED_CAVE3: u32 = 6412;
pub const MAP_SECRET_BASE_BROWN_CAVE3: u32 = 6413;
pub const MAP_SECRET_BASE_BLUE_CAVE3: u32 = 6414;
pub const MAP_SECRET_BASE_YELLOW_CAVE3: u32 = 6415;
pub const MAP_SECRET_BASE_TREE3: u32 = 6416;
pub const MAP_SECRET_BASE_SHRUB3: u32 = 6417;
pub const MAP_SECRET_BASE_RED_CAVE4: u32 = 6418;
pub const MAP_SECRET_BASE_BROWN_CAVE4: u32 = 6419;
pub const MAP_SECRET_BASE_BLUE_CAVE4: u32 = 6420;
pub const MAP_SECRET_BASE_YELLOW_CAVE4: u32 = 6421;
pub const MAP_SECRET_BASE_TREE4: u32 = 6422;
pub const MAP_SECRET_BASE_SHRUB4: u32 = 6423;
pub const MAP_BATTLE_COLOSSEUM_2P: u32 = 6424;
pub const MAP_TRADE_CENTER: u32 = 6425;
pub const MAP_RECORD_CORNER: u32 = 6426;
pub const MAP_BATTLE_COLOSSEUM_4P: u32 = 6427;
pub const MAP_CONTEST_HALL: u32 = 6428;
pub const MAP_UNUSED_CONTEST_HALL1: u32 = 6429;
pub const MAP_UNUSED_CONTEST_HALL2: u32 = 6430;
pub const MAP_UNUSED_CONTEST_HALL3: u32 = 6431;
pub const MAP_UNUSED_CONTEST_HALL4: u32 = 6432;
pub const MAP_UNUSED_CONTEST_HALL5: u32 = 6433;
pub const MAP_UNUSED_CONTEST_HALL6: u32 = 6434;
pub const MAP_CONTEST_HALL_BEAUTY: u32 = 6435;
pub const MAP_CONTEST_HALL_TOUGH: u32 = 6436;
pub const MAP_CONTEST_HALL_COOL: u32 = 6437;
pub const MAP_CONTEST_HALL_SMART: u32 = 6438;
pub const MAP_CONTEST_HALL_CUTE: u32 = 6439;
pub const MAP_INSIDE_OF_TRUCK: u32 = 6440;
pub const MAP_SS_TIDAL_CORRIDOR: u32 = 6441;
pub const MAP_SS_TIDAL_LOWER_DECK: u32 = 6442;
pub const MAP_SS_TIDAL_ROOMS: u32 = 6443;
pub const MAP_BATTLE_PYRAMID_SQUARE01: u32 = 6444;
pub const MAP_BATTLE_PYRAMID_SQUARE02: u32 = 6445;
pub const MAP_BATTLE_PYRAMID_SQUARE03: u32 = 6446;
pub const MAP_BATTLE_PYRAMID_SQUARE04: u32 = 6447;
pub const MAP_BATTLE_PYRAMID_SQUARE05: u32 = 6448;
pub const MAP_BATTLE_PYRAMID_SQUARE06: u32 = 6449;
pub const MAP_BATTLE_PYRAMID_SQUARE07: u32 = 6450;
pub const MAP_BATTLE_PYRAMID_SQUARE08: u32 = 6451;
pub const MAP_BATTLE_PYRAMID_SQUARE09: u32 = 6452;
pub const MAP_BATTLE_PYRAMID_SQUARE10: u32 = 6453;
pub const MAP_BATTLE_PYRAMID_SQUARE11: u32 = 6454;
pub const MAP_BATTLE_PYRAMID_SQUARE12: u32 = 6455;
pub const MAP_BATTLE_PYRAMID_SQUARE13: u32 = 6456;
pub const MAP_BATTLE_PYRAMID_SQUARE14: u32 = 6457;
pub const MAP_BATTLE_PYRAMID_SQUARE15: u32 = 6458;
pub const MAP_BATTLE_PYRAMID_SQUARE16: u32 = 6459;
pub const MAP_UNION_ROOM: u32 = 6460;
pub const MAP_SAFARI_ZONE_NORTHWEST: u32 = 6656;
pub const MAP_SAFARI_ZONE_NORTH: u32 = 6657;
pub const MAP_SAFARI_ZONE_SOUTHWEST: u32 = 6658;
pub const MAP_SAFARI_ZONE_SOUTH: u32 = 6659;
pub const MAP_BATTLE_FRONTIER_OUTSIDE_WEST: u32 = 6660;
pub const MAP_BATTLE_FRONTIER_BATTLE_TOWER_LOBBY: u32 = 6661;
pub const MAP_BATTLE_FRONTIER_BATTLE_TOWER_ELEVATOR: u32 = 6662;
pub const MAP_BATTLE_FRONTIER_BATTLE_TOWER_CORRIDOR: u32 = 6663;
pub const MAP_BATTLE_FRONTIER_BATTLE_TOWER_BATTLE_ROOM: u32 = 6664;
pub const MAP_SOUTHERN_ISLAND_EXTERIOR: u32 = 6665;
pub const MAP_SOUTHERN_ISLAND_INTERIOR: u32 = 6666;
pub const MAP_SAFARI_ZONE_REST_HOUSE: u32 = 6667;
pub const MAP_SAFARI_ZONE_NORTHEAST: u32 = 6668;
pub const MAP_SAFARI_ZONE_SOUTHEAST: u32 = 6669;
pub const MAP_BATTLE_FRONTIER_OUTSIDE_EAST: u32 = 6670;
pub const MAP_BATTLE_FRONTIER_BATTLE_TOWER_MULTI_PARTNER_ROOM: u32 = 6671;
pub const MAP_BATTLE_FRONTIER_BATTLE_TOWER_MULTI_CORRIDOR: u32 = 6672;
pub const MAP_BATTLE_FRONTIER_BATTLE_TOWER_MULTI_BATTLE_ROOM: u32 = 6673;
pub const MAP_BATTLE_FRONTIER_BATTLE_DOME_LOBBY: u32 = 6674;
pub const MAP_BATTLE_FRONTIER_BATTLE_DOME_CORRIDOR: u32 = 6675;
pub const MAP_BATTLE_FRONTIER_BATTLE_DOME_PRE_BATTLE_ROOM: u32 = 6676;
pub const MAP_BATTLE_FRONTIER_BATTLE_DOME_BATTLE_ROOM: u32 = 6677;
pub const MAP_BATTLE_FRONTIER_BATTLE_PALACE_LOBBY: u32 = 6678;
pub const MAP_BATTLE_FRONTIER_BATTLE_PALACE_CORRIDOR: u32 = 6679;
pub const MAP_BATTLE_FRONTIER_BATTLE_PALACE_BATTLE_ROOM: u32 = 6680;
pub const MAP_BATTLE_FRONTIER_BATTLE_PYRAMID_LOBBY: u32 = 6681;
pub const MAP_BATTLE_FRONTIER_BATTLE_PYRAMID_FLOOR: u32 = 6682;
pub const MAP_BATTLE_FRONTIER_BATTLE_PYRAMID_TOP: u32 = 6683;
pub const MAP_BATTLE_FRONTIER_BATTLE_ARENA_LOBBY: u32 = 6684;
pub const MAP_BATTLE_FRONTIER_BATTLE_ARENA_CORRIDOR: u32 = 6685;
pub const MAP_BATTLE_FRONTIER_BATTLE_ARENA_BATTLE_ROOM: u32 = 6686;
pub const MAP_BATTLE_FRONTIER_BATTLE_FACTORY_LOBBY: u32 = 6687;
pub const MAP_BATTLE_FRONTIER_BATTLE_FACTORY_PRE_BATTLE_ROOM: u32 = 6688;
pub const MAP_BATTLE_FRONTIER_BATTLE_FACTORY_BATTLE_ROOM: u32 = 6689;
pub const MAP_BATTLE_FRONTIER_BATTLE_PIKE_LOBBY: u32 = 6690;
pub const MAP_BATTLE_FRONTIER_BATTLE_PIKE_CORRIDOR: u32 = 6691;
pub const MAP_BATTLE_FRONTIER_BATTLE_PIKE_THREE_PATH_ROOM: u32 = 6692;
pub const MAP_BATTLE_FRONTIER_BATTLE_PIKE_ROOM_NORMAL: u32 = 6693;
pub const MAP_BATTLE_FRONTIER_BATTLE_PIKE_ROOM_FINAL: u32 = 6694;
pub const MAP_BATTLE_FRONTIER_BATTLE_PIKE_ROOM_WILD_MONS: u32 = 6695;
pub const MAP_BATTLE_FRONTIER_RANKING_HALL: u32 = 6696;
pub const MAP_BATTLE_FRONTIER_LOUNGE1: u32 = 6697;
pub const MAP_BATTLE_FRONTIER_EXCHANGE_SERVICE_CORNER: u32 = 6698;
pub const MAP_BATTLE_FRONTIER_LOUNGE2: u32 = 6699;
pub const MAP_BATTLE_FRONTIER_LOUNGE3: u32 = 6700;
pub const MAP_BATTLE_FRONTIER_LOUNGE4: u32 = 6701;
pub const MAP_BATTLE_FRONTIER_SCOTTS_HOUSE: u32 = 6702;
pub const MAP_BATTLE_FRONTIER_LOUNGE5: u32 = 6703;
pub const MAP_BATTLE_FRONTIER_LOUNGE6: u32 = 6704;
pub const MAP_BATTLE_FRONTIER_LOUNGE7: u32 = 6705;
pub const MAP_BATTLE_FRONTIER_RECEPTION_GATE: u32 = 6706;
pub const MAP_BATTLE_FRONTIER_LOUNGE8: u32 = 6707;
pub const MAP_BATTLE_FRONTIER_LOUNGE9: u32 = 6708;
pub const MAP_BATTLE_FRONTIER_POKEMON_CENTER_1F: u32 = 6709;
pub const MAP_BATTLE_FRONTIER_POKEMON_CENTER_2F: u32 = 6710;
pub const MAP_BATTLE_FRONTIER_MART: u32 = 6711;
pub const MAP_FARAWAY_ISLAND_ENTRANCE: u32 = 6712;
pub const MAP_FARAWAY_ISLAND_INTERIOR: u32 = 6713;
pub const MAP_BIRTH_ISLAND_EXTERIOR: u32 = 6714;
pub const MAP_BIRTH_ISLAND_HARBOR: u32 = 6715;
pub const MAP_TRAINER_HILL_ENTRANCE: u32 = 6716;
pub const MAP_TRAINER_HILL_1F: u32 = 6717;
pub const MAP_TRAINER_HILL_2F: u32 = 6718;
pub const MAP_TRAINER_HILL_3F: u32 = 6719;
pub const MAP_TRAINER_HILL_4F: u32 = 6720;
pub const MAP_TRAINER_HILL_ROOF: u32 = 6721;
pub const MAP_NAVEL_ROCK_EXTERIOR: u32 = 6722;
pub const MAP_NAVEL_ROCK_HARBOR: u32 = 6723;
pub const MAP_NAVEL_ROCK_ENTRANCE: u32 = 6724;
pub const MAP_NAVEL_ROCK_B1F: u32 = 6725;
pub const MAP_NAVEL_ROCK_FORK: u32 = 6726;
pub const MAP_NAVEL_ROCK_UP1: u32 = 6727;
pub const MAP_NAVEL_ROCK_UP2: u32 = 6728;
pub const MAP_NAVEL_ROCK_UP3: u32 = 6729;
pub const MAP_NAVEL_ROCK_UP4: u32 = 6730;
pub const MAP_NAVEL_ROCK_TOP: u32 = 6731;
pub const MAP_NAVEL_ROCK_DOWN01: u32 = 6732;
pub const MAP_NAVEL_ROCK_DOWN02: u32 = 6733;
pub const MAP_NAVEL_ROCK_DOWN03: u32 = 6734;
pub const MAP_NAVEL_ROCK_DOWN04: u32 = 6735;
pub const MAP_NAVEL_ROCK_DOWN05: u32 = 6736;
pub const MAP_NAVEL_ROCK_DOWN06: u32 = 6737;
pub const MAP_NAVEL_ROCK_DOWN07: u32 = 6738;
pub const MAP_NAVEL_ROCK_DOWN08: u32 = 6739;
pub const MAP_NAVEL_ROCK_DOWN09: u32 = 6740;
pub const MAP_NAVEL_ROCK_DOWN10: u32 = 6741;
pub const MAP_NAVEL_ROCK_DOWN11: u32 = 6742;
pub const MAP_NAVEL_ROCK_BOTTOM: u32 = 6743;
pub const MAP_TRAINER_HILL_ELEVATOR: u32 = 6744;
pub const MAP_ROUTE104_PROTOTYPE: u32 = 6912;
pub const MAP_ROUTE104_PROTOTYPE_PRETTY_PETAL_FLOWER_SHOP: u32 = 6913;
pub const MAP_ROUTE109_SEASHORE_HOUSE: u32 = 7168;
pub const MAP_ROUTE110_TRICK_HOUSE_ENTRANCE: u32 = 7424;
pub const MAP_ROUTE110_TRICK_HOUSE_END: u32 = 7425;
pub const MAP_ROUTE110_TRICK_HOUSE_CORRIDOR: u32 = 7426;
pub const MAP_ROUTE110_TRICK_HOUSE_PUZZLE1: u32 = 7427;
pub const MAP_ROUTE110_TRICK_HOUSE_PUZZLE2: u32 = 7428;
pub const MAP_ROUTE110_TRICK_HOUSE_PUZZLE3: u32 = 7429;
pub const MAP_ROUTE110_TRICK_HOUSE_PUZZLE4: u32 = 7430;
pub const MAP_ROUTE110_TRICK_HOUSE_PUZZLE5: u32 = 7431;
pub const MAP_ROUTE110_TRICK_HOUSE_PUZZLE6: u32 = 7432;
pub const MAP_ROUTE110_TRICK_HOUSE_PUZZLE7: u32 = 7433;
pub const MAP_ROUTE110_TRICK_HOUSE_PUZZLE8: u32 = 7434;
pub const MAP_ROUTE110_SEASIDE_CYCLING_ROAD_SOUTH_ENTRANCE: u32 = 7435;
pub const MAP_ROUTE110_SEASIDE_CYCLING_ROAD_NORTH_ENTRANCE: u32 = 7436;
pub const MAP_ROUTE113_GLASS_WORKSHOP: u32 = 7680;
pub const MAP_ROUTE123_BERRY_MASTERS_HOUSE: u32 = 7936;
pub const MAP_ROUTE119_WEATHER_INSTITUTE_1F: u32 = 8192;
pub const MAP_ROUTE119_WEATHER_INSTITUTE_2F: u32 = 8193;
pub const MAP_ROUTE119_HOUSE: u32 = 8194;
pub const MAP_ROUTE124_DIVING_TREASURE_HUNTERS_HOUSE: u32 = 8448;
pub const MAP_GROUPS_COUNT: u32 = 34;
pub const MAP_DYNAMIC: u32 = 32639;
pub const MAP_UNDEFINED: u32 = 65535;
pub const WARP_ID_SECRET_BASE: u32 = 126;
pub const WARP_ID_DYNAMIC: u32 = 127;
pub const WARP_ID_NONE: i32 = -1;
pub const TYPE_NONE: u32 = 0;
pub const TYPE_NORMAL: u32 = 1;
pub const TYPE_FIGHTING: u32 = 2;
pub const TYPE_FLYING: u32 = 3;
pub const TYPE_POISON: u32 = 4;
pub const TYPE_GROUND: u32 = 5;
pub const TYPE_ROCK: u32 = 6;
pub const TYPE_BUG: u32 = 7;
pub const TYPE_GHOST: u32 = 8;
pub const TYPE_STEEL: u32 = 9;
pub const TYPE_MYSTERY: u32 = 10;
pub const TYPE_FIRE: u32 = 11;
pub const TYPE_WATER: u32 = 12;
pub const TYPE_GRASS: u32 = 13;
pub const TYPE_ELECTRIC: u32 = 14;
pub const TYPE_PSYCHIC: u32 = 15;
pub const TYPE_ICE: u32 = 16;
pub const TYPE_DRAGON: u32 = 17;
pub const TYPE_DARK: u32 = 18;
pub const TYPE_FAIRY: u32 = 19;
pub const TYPE_STELLAR: u32 = 20;
pub const NUMBER_OF_MON_TYPES: u32 = 21;
pub const EGG_GROUP_NONE: u32 = 0;
pub const EGG_GROUP_MONSTER: u32 = 1;
pub const EGG_GROUP_WATER_1: u32 = 2;
pub const EGG_GROUP_BUG: u32 = 3;
pub const EGG_GROUP_FLYING: u32 = 4;
pub const EGG_GROUP_FIELD: u32 = 5;
pub const EGG_GROUP_FAIRY: u32 = 6;
pub const EGG_GROUP_GRASS: u32 = 7;
pub const EGG_GROUP_HUMAN_LIKE: u32 = 8;
pub const EGG_GROUP_WATER_3: u32 = 9;
pub const EGG_GROUP_MINERAL: u32 = 10;
pub const EGG_GROUP_AMORPHOUS: u32 = 11;
pub const EGG_GROUP_WATER_2: u32 = 12;
pub const EGG_GROUP_DITTO: u32 = 13;
pub const EGG_GROUP_DRAGON: u32 = 14;
pub const EGG_GROUP_NO_EGGS_DISCOVERED: u32 = 15;
pub const EGG_GROUPS_PER_MON: u32 = 2;
pub const NATURE_HARDY: u32 = 0;
pub const NATURE_LONELY: u32 = 1;
pub const NATURE_BRAVE: u32 = 2;
pub const NATURE_ADAMANT: u32 = 3;
pub const NATURE_NAUGHTY: u32 = 4;
pub const NATURE_BOLD: u32 = 5;
pub const NATURE_DOCILE: u32 = 6;
pub const NATURE_RELAXED: u32 = 7;
pub const NATURE_IMPISH: u32 = 8;
pub const NATURE_LAX: u32 = 9;
pub const NATURE_TIMID: u32 = 10;
pub const NATURE_HASTY: u32 = 11;
pub const NATURE_SERIOUS: u32 = 12;
pub const NATURE_JOLLY: u32 = 13;
pub const NATURE_NAIVE: u32 = 14;
pub const NATURE_MODEST: u32 = 15;
pub const NATURE_MILD: u32 = 16;
pub const NATURE_QUIET: u32 = 17;
pub const NATURE_BASHFUL: u32 = 18;
pub const NATURE_RASH: u32 = 19;
pub const NATURE_CALM: u32 = 20;
pub const NATURE_GENTLE: u32 = 21;
pub const NATURE_SASSY: u32 = 22;
pub const NATURE_CAREFUL: u32 = 23;
pub const NATURE_QUIRKY: u32 = 24;
pub const NUM_NATURES: u32 = 25;
pub const STAT_HP: u32 = 0;
pub const STAT_ATK: u32 = 1;
pub const STAT_DEF: u32 = 2;
pub const STAT_SPEED: u32 = 3;
pub const STAT_SPATK: u32 = 4;
pub const STAT_SPDEF: u32 = 5;
pub const NUM_STATS: u32 = 6;
pub const STAT_ACC: u32 = 6;
pub const STAT_EVASION: u32 = 7;
pub const NUM_NATURE_STATS: u32 = 5;
pub const NUM_BATTLE_STATS: u32 = 8;
pub const MIN_STAT_STAGE: u32 = 0;
pub const DEFAULT_STAT_STAGE: u32 = 6;
pub const MAX_STAT_STAGE: u32 = 12;
pub const SHINY_ODDS: u32 = 8;
pub const CHAMPION_RIBBON: u32 = 0;
pub const COOL_RIBBON_NORMAL: u32 = 1;
pub const COOL_RIBBON_SUPER: u32 = 2;
pub const COOL_RIBBON_HYPER: u32 = 3;
pub const COOL_RIBBON_MASTER: u32 = 4;
pub const BEAUTY_RIBBON_NORMAL: u32 = 5;
pub const BEAUTY_RIBBON_SUPER: u32 = 6;
pub const BEAUTY_RIBBON_HYPER: u32 = 7;
pub const BEAUTY_RIBBON_MASTER: u32 = 8;
pub const CUTE_RIBBON_NORMAL: u32 = 9;
pub const CUTE_RIBBON_SUPER: u32 = 10;
pub const CUTE_RIBBON_HYPER: u32 = 11;
pub const CUTE_RIBBON_MASTER: u32 = 12;
pub const SMART_RIBBON_NORMAL: u32 = 13;
pub const SMART_RIBBON_SUPER: u32 = 14;
pub const SMART_RIBBON_HYPER: u32 = 15;
pub const SMART_RIBBON_MASTER: u32 = 16;
pub const TOUGH_RIBBON_NORMAL: u32 = 17;
pub const TOUGH_RIBBON_SUPER: u32 = 18;
pub const TOUGH_RIBBON_HYPER: u32 = 19;
pub const TOUGH_RIBBON_MASTER: u32 = 20;
pub const WINNING_RIBBON: u32 = 21;
pub const VICTORY_RIBBON: u32 = 22;
pub const ARTIST_RIBBON: u32 = 23;
pub const EFFORT_RIBBON: u32 = 24;
pub const MARINE_RIBBON: u32 = 25;
pub const LAND_RIBBON: u32 = 26;
pub const SKY_RIBBON: u32 = 27;
pub const COUNTRY_RIBBON: u32 = 28;
pub const NATIONAL_RIBBON: u32 = 29;
pub const EARTH_RIBBON: u32 = 30;
pub const WORLD_RIBBON: u32 = 31;
pub const FIRST_GIFT_RIBBON: u32 = 25;
pub const LAST_GIFT_RIBBON: u32 = 31;
pub const NUM_GIFT_RIBBONS: u32 = 7;
pub const MAX_GIFT_RIBBON: u32 = 64;
pub const MIN_LEVEL: u32 = 1;
pub const MAX_LEVEL: u32 = 100;
pub const MAX_DYNAMAX_LEVEL: u32 = 10;
pub const OT_ID_PLAYER_ID: u32 = 0;
pub const OT_ID_PRESET: u32 = 1;
pub const OT_ID_RANDOM_NO_SHINY: u32 = 2;
pub const MON_GIVEN_TO_PARTY: u32 = 0;
pub const MON_GIVEN_TO_PC: u32 = 1;
pub const MON_CANT_GIVE: u32 = 2;
pub const PLAYER_HAS_TWO_USABLE_MONS: u32 = 0;
pub const PLAYER_HAS_ONE_MON: u32 = 1;
pub const PLAYER_HAS_ONE_USABLE_MON: u32 = 2;
pub const MON_ALREADY_KNOWS_MOVE: u32 = 65534;
pub const MON_HAS_MAX_MOVES: u32 = 65535;
pub const LEVEL_UP_MOVE_ID: u32 = 511;
pub const LEVEL_UP_MOVE_LV: u32 = 65024;
pub const LEVEL_UP_MOVE_END: u32 = 65535;
pub const MAX_LEVEL_UP_MOVES: u32 = 50;
pub const MON_MALE: u32 = 0;
pub const MON_FEMALE: u32 = 254;
pub const MON_GENDERLESS: u32 = 255;
pub const FRIENDSHIP_EVENT_GROW_LEVEL: u32 = 0;
pub const FRIENDSHIP_EVENT_VITAMIN: u32 = 1;
pub const FRIENDSHIP_EVENT_BATTLE_ITEM: u32 = 2;
pub const FRIENDSHIP_EVENT_LEAGUE_BATTLE: u32 = 3;
pub const FRIENDSHIP_EVENT_LEARN_TMHM: u32 = 4;
pub const FRIENDSHIP_EVENT_WALKING: u32 = 5;
pub const FRIENDSHIP_EVENT_FAINT_SMALL: u32 = 6;
pub const FRIENDSHIP_EVENT_FAINT_FIELD_PSN: u32 = 7;
pub const FRIENDSHIP_EVENT_FAINT_LARGE: u32 = 8;
pub const FRIENDSHIP_NONE: u32 = 0;
pub const FRIENDSHIP_1_TO_49: u32 = 1;
pub const FRIENDSHIP_50_TO_99: u32 = 2;
pub const FRIENDSHIP_100_TO_149: u32 = 3;
pub const FRIENDSHIP_150_TO_199: u32 = 4;
pub const FRIENDSHIP_200_TO_254: u32 = 5;
pub const FRIENDSHIP_MAX: u32 = 6;
pub const AFFECTION_NO_HEARTS: u32 = 0;
pub const AFFECTION_ONE_HEART: u32 = 1;
pub const AFFECTION_TWO_HEARTS: u32 = 2;
pub const AFFECTION_THREE_HEARTS: u32 = 3;
pub const AFFECTION_FOUR_HEARTS: u32 = 4;
pub const AFFECTION_FIVE_HEARTS: u32 = 5;
pub const MAX_FRIENDSHIP: u32 = 255;
pub const MAX_SHEEN: u32 = 255;
pub const MAX_CONDITION: u32 = 255;
pub const MAX_PER_STAT_IVS: u32 = 31;
pub const MAX_IV_MASK: u32 = 31;
pub const USE_RANDOM_IVS: u32 = 32;
pub const MAX_TOTAL_EVS: u32 = 510;
pub const DAMAGE_CATEGORY_PHYSICAL: u32 = 0;
pub const DAMAGE_CATEGORY_SPECIAL: u32 = 1;
pub const DAMAGE_CATEGORY_STATUS: u32 = 2;
pub const GROWTH_MEDIUM_FAST: u32 = 0;
pub const GROWTH_ERRATIC: u32 = 1;
pub const GROWTH_FLUCTUATING: u32 = 2;
pub const GROWTH_MEDIUM_SLOW: u32 = 3;
pub const GROWTH_FAST: u32 = 4;
pub const GROWTH_SLOW: u32 = 5;
pub const BODY_COLOR_RED: u32 = 0;
pub const BODY_COLOR_BLUE: u32 = 1;
pub const BODY_COLOR_YELLOW: u32 = 2;
pub const BODY_COLOR_GREEN: u32 = 3;
pub const BODY_COLOR_BLACK: u32 = 4;
pub const BODY_COLOR_BROWN: u32 = 5;
pub const BODY_COLOR_PURPLE: u32 = 6;
pub const BODY_COLOR_GRAY: u32 = 7;
pub const BODY_COLOR_WHITE: u32 = 8;
pub const BODY_COLOR_PINK: u32 = 9;
pub const F_SUMMARY_SCREEN_FLIP_SPRITE: u32 = 128;
pub const EVOLUTIONS_END: u32 = 65535;
pub const MON_PIC_WIDTH: u32 = 64;
pub const MON_PIC_HEIGHT: u32 = 64;
pub const MON_PIC_SIZE: u32 = 2048;
pub const MAX_MON_PIC_FRAMES: u32 = 2;
pub const BATTLE_ALIVE_EXCEPT_BATTLER: u32 = 0;
pub const BATTLE_ALIVE_SIDE: u32 = 1;
pub const SKIP_FRONT_ANIM: u32 = 128;
pub const NUM_NORMAL_ABILITY_SLOTS: u32 = 2;
pub const NUM_HIDDEN_ABILITY_SLOTS: u32 = 1;
pub const NUM_ABILITY_PERSONALITY: u32 = 255;
pub const LEGENDARY_PERFECT_IV_COUNT: u32 = 3;
pub const EASY_CHAT_TYPE_PROFILE: u32 = 0;
pub const EASY_CHAT_TYPE_BATTLE_START: u32 = 1;
pub const EASY_CHAT_TYPE_BATTLE_WON: u32 = 2;
pub const EASY_CHAT_TYPE_BATTLE_LOST: u32 = 3;
pub const EASY_CHAT_TYPE_MAIL: u32 = 4;
pub const EASY_CHAT_TYPE_INTERVIEW: u32 = 5;
pub const EASY_CHAT_TYPE_BARD_SONG: u32 = 6;
pub const EASY_CHAT_TYPE_FAN_CLUB: u32 = 7;
pub const EASY_CHAT_TYPE_DUMMY_SHOW: u32 = 8;
pub const EASY_CHAT_TYPE_TRENDY_PHRASE: u32 = 9;
pub const EASY_CHAT_TYPE_GABBY_AND_TY: u32 = 10;
pub const EASY_CHAT_TYPE_CONTEST_INTERVIEW: u32 = 11;
pub const EASY_CHAT_TYPE_BATTLE_TOWER_INTERVIEW: u32 = 12;
pub const EASY_CHAT_TYPE_GOOD_SAYING: u32 = 13;
pub const EASY_CHAT_TYPE_FAN_QUESTION: u32 = 14;
pub const EASY_CHAT_TYPE_QUIZ_ANSWER: u32 = 15;
pub const EASY_CHAT_TYPE_QUIZ_QUESTION: u32 = 16;
pub const EASY_CHAT_TYPE_QUIZ_SET_QUESTION: u32 = 17;
pub const EASY_CHAT_TYPE_QUIZ_SET_ANSWER: u32 = 18;
pub const EASY_CHAT_TYPE_APPRENTICE: u32 = 19;
pub const EASY_CHAT_TYPE_QUESTIONNAIRE: u32 = 20;
pub const EASY_CHAT_PERSON_REPORTER_MALE: u32 = 0;
pub const EASY_CHAT_PERSON_REPORTER_FEMALE: u32 = 1;
pub const EASY_CHAT_PERSON_BOY: u32 = 2;
pub const EASY_CHAT_PERSON_DISPLAY_NONE: u32 = 3;
pub const EC_GROUP_POKEMON: u32 = 0;
pub const EC_GROUP_TRAINER: u32 = 1;
pub const EC_GROUP_STATUS: u32 = 2;
pub const EC_GROUP_BATTLE: u32 = 3;
pub const EC_GROUP_GREETINGS: u32 = 4;
pub const EC_GROUP_PEOPLE: u32 = 5;
pub const EC_GROUP_VOICES: u32 = 6;
pub const EC_GROUP_SPEECH: u32 = 7;
pub const EC_GROUP_ENDINGS: u32 = 8;
pub const EC_GROUP_FEELINGS: u32 = 9;
pub const EC_GROUP_CONDITIONS: u32 = 10;
pub const EC_GROUP_ACTIONS: u32 = 11;
pub const EC_GROUP_LIFESTYLE: u32 = 12;
pub const EC_GROUP_HOBBIES: u32 = 13;
pub const EC_GROUP_TIME: u32 = 14;
pub const EC_GROUP_MISC: u32 = 15;
pub const EC_GROUP_ADJECTIVES: u32 = 16;
pub const EC_GROUP_EVENTS: u32 = 17;
pub const EC_GROUP_MOVE_1: u32 = 18;
pub const EC_GROUP_MOVE_2: u32 = 19;
pub const EC_GROUP_TRENDY_SAYING: u32 = 20;
pub const EC_GROUP_POKEMON_NATIONAL: u32 = 21;
pub const EC_NUM_GROUPS: u32 = 22;
pub const NUM_TRENDY_SAYINGS: u32 = 33;
pub const NOT_SPECIAL_PHRASE: u32 = 0;
pub const PHRASE_GREAT_BATTLE: u32 = 1;
pub const PHRASE_CHALLENGE_CONTEST: u32 = 2;
pub const PHRASE_OVERWHELMING_LATIAS: u32 = 3;
pub const PHRASE_COOL_LATIOS: u32 = 4;
pub const PHRASE_SUPER_HUSTLE: u32 = 5;
pub const EC_NUM_ALPHABET_GROUPS: u32 = 27;
pub const EC_MAX_WORDS_IN_GROUP: u32 = 270;
pub const EC_MASK_BITS: u32 = 9;
pub const EC_MASK_GROUP: u32 = 127;
pub const EC_MASK_INDEX: u32 = 511;
pub const EC_EMPTY_WORD: u32 = 65535;
pub const TRAINER_HILL_1F: u32 = 1;
pub const TRAINER_HILL_2F: u32 = 2;
pub const TRAINER_HILL_3F: u32 = 3;
pub const TRAINER_HILL_4F: u32 = 4;
pub const TRAINER_HILL_ROOF: u32 = 5;
pub const TRAINER_HILL_ENTRANCE: u32 = 6;
pub const HILL_MODE_NORMAL: u32 = 0;
pub const HILL_MODE_VARIETY: u32 = 1;
pub const HILL_MODE_UNIQUE: u32 = 2;
pub const HILL_MODE_EXPERT: u32 = 3;
pub const NUM_TRAINER_HILL_MODES: u32 = 4;
pub const NUM_TRAINER_HILL_FLOORS: u32 = 4;
pub const NUM_TRAINER_HILL_FLOORS_JP: u32 = 2;
pub const NUM_TRAINER_HILL_PRIZE_LISTS: u32 = 10;
pub const TRAINER_HILL_FUNC_START: u32 = 0;
pub const TRAINER_HILL_FUNC_GET_OWNER_STATE: u32 = 1;
pub const TRAINER_HILL_FUNC_GIVE_PRIZE: u32 = 2;
pub const TRAINER_HILL_FUNC_CHECK_FINAL_TIME: u32 = 3;
pub const TRAINER_HILL_FUNC_RESUME_TIMER: u32 = 4;
pub const TRAINER_HILL_FUNC_SET_LOST: u32 = 5;
pub const TRAINER_HILL_FUNC_GET_CHALLENGE_STATUS: u32 = 6;
pub const TRAINER_HILL_FUNC_GET_CHALLENGE_TIME: u32 = 7;
pub const TRAINER_HILL_FUNC_GET_ALL_FLOORS_USED: u32 = 8;
pub const TRAINER_HILL_FUNC_GET_IN_EREADER_MODE: u32 = 9;
pub const TRAINER_HILL_FUNC_IN_CHALLENGE: u32 = 10;
pub const TRAINER_HILL_FUNC_POST_BATTLE_TEXT: u32 = 11;
pub const TRAINER_HILL_FUNC_SET_ALL_TRAINER_FLAGS: u32 = 12;
pub const TRAINER_HILL_FUNC_GET_GAME_SAVED: u32 = 13;
pub const TRAINER_HILL_FUNC_SET_GAME_SAVED: u32 = 14;
pub const TRAINER_HILL_FUNC_CLEAR_GAME_SAVED: u32 = 15;
pub const TRAINER_HILL_FUNC_GET_WON: u32 = 16;
pub const TRAINER_HILL_FUNC_SET_MODE: u32 = 17;
pub const TRAINER_HILL_TEXT_INTRO: u32 = 2;
pub const TRAINER_HILL_TEXT_PLAYER_LOST: u32 = 3;
pub const TRAINER_HILL_TEXT_PLAYER_WON: u32 = 4;
pub const TRAINER_HILL_TEXT_AFTER: u32 = 5;
pub const HILL_TRAINERS_PER_FLOOR: u32 = 2;
pub const NUM_TRAINER_HILL_TRAINERS: u32 = 8;
pub const NUM_TRAINER_HILL_TRAINERS_JP: u32 = 4;
pub const TRAINER_HILL_PLAYER_STATUS_LOST: u32 = 0;
pub const TRAINER_HILL_PLAYER_STATUS_ECARD_SCANNED: u32 = 1;
pub const TRAINER_HILL_PLAYER_STATUS_NORMAL: u32 = 2;
pub const TRAINER_HILL_OTID: u32 = 268435456;
pub const HILL_FLOOR_WIDTH: u32 = 16;
pub const HILL_FLOOR_HEIGHT_MAIN: u32 = 16;
pub const HILL_FLOOR_HEIGHT_MARGIN: u32 = 5;
pub const HILL_FLOOR_HEIGHT: u32 = 21;
pub const ITEM_NONE: u32 = 0;
pub const ITEM_POKE_BALL: u32 = 1;
pub const ITEM_GREAT_BALL: u32 = 2;
pub const ITEM_ULTRA_BALL: u32 = 3;
pub const ITEM_MASTER_BALL: u32 = 4;
pub const ITEM_PREMIER_BALL: u32 = 5;
pub const ITEM_HEAL_BALL: u32 = 6;
pub const ITEM_NET_BALL: u32 = 7;
pub const ITEM_NEST_BALL: u32 = 8;
pub const ITEM_DIVE_BALL: u32 = 9;
pub const ITEM_DUSK_BALL: u32 = 10;
pub const ITEM_TIMER_BALL: u32 = 11;
pub const ITEM_QUICK_BALL: u32 = 12;
pub const ITEM_REPEAT_BALL: u32 = 13;
pub const ITEM_LUXURY_BALL: u32 = 14;
pub const ITEM_LEVEL_BALL: u32 = 15;
pub const ITEM_LURE_BALL: u32 = 16;
pub const ITEM_MOON_BALL: u32 = 17;
pub const ITEM_FRIEND_BALL: u32 = 18;
pub const ITEM_LOVE_BALL: u32 = 19;
pub const ITEM_FAST_BALL: u32 = 20;
pub const ITEM_HEAVY_BALL: u32 = 21;
pub const ITEM_DREAM_BALL: u32 = 22;
pub const ITEM_SAFARI_BALL: u32 = 23;
pub const ITEM_SPORT_BALL: u32 = 24;
pub const ITEM_PARK_BALL: u32 = 25;
pub const ITEM_BEAST_BALL: u32 = 26;
pub const ITEM_CHERISH_BALL: u32 = 27;
pub const ITEM_POTION: u32 = 28;
pub const ITEM_SUPER_POTION: u32 = 29;
pub const ITEM_HYPER_POTION: u32 = 30;
pub const ITEM_MAX_POTION: u32 = 31;
pub const ITEM_FULL_RESTORE: u32 = 32;
pub const ITEM_REVIVE: u32 = 33;
pub const ITEM_MAX_REVIVE: u32 = 34;
pub const ITEM_FRESH_WATER: u32 = 35;
pub const ITEM_SODA_POP: u32 = 36;
pub const ITEM_LEMONADE: u32 = 37;
pub const ITEM_MOOMOO_MILK: u32 = 38;
pub const ITEM_ENERGY_POWDER: u32 = 39;
pub const ITEM_ENERGYPOWDER: u32 = 39;
pub const ITEM_ENERGY_ROOT: u32 = 40;
pub const ITEM_HEAL_POWDER: u32 = 41;
pub const ITEM_REVIVAL_HERB: u32 = 42;
pub const ITEM_ANTIDOTE: u32 = 43;
pub const ITEM_PARALYZE_HEAL: u32 = 44;
pub const ITEM_PARLYZ_HEAL: u32 = 44;
pub const ITEM_BURN_HEAL: u32 = 45;
pub const ITEM_ICE_HEAL: u32 = 46;
pub const ITEM_AWAKENING: u32 = 47;
pub const ITEM_FULL_HEAL: u32 = 48;
pub const ITEM_ETHER: u32 = 49;
pub const ITEM_MAX_ETHER: u32 = 50;
pub const ITEM_ELIXIR: u32 = 51;
pub const ITEM_ELIXER: u32 = 51;
pub const ITEM_MAX_ELIXIR: u32 = 52;
pub const ITEM_MAX_ELIXER: u32 = 52;
pub const ITEM_BERRY_JUICE: u32 = 53;
pub const ITEM_SACRED_ASH: u32 = 54;
pub const ITEM_SWEET_HEART: u32 = 55;
pub const ITEM_MAX_HONEY: u32 = 56;
pub const ITEM_PEWTER_CRUNCHIES: u32 = 57;
pub const ITEM_RAGE_CANDY_BAR: u32 = 58;
pub const ITEM_RAGECANDYBAR: u32 = 58;
pub const ITEM_LAVA_COOKIE: u32 = 59;
pub const ITEM_OLD_GATEAU: u32 = 60;
pub const ITEM_CASTELIACONE: u32 = 61;
pub const ITEM_LUMIOSE_GALETTE: u32 = 62;
pub const ITEM_SHALOUR_SABLE: u32 = 63;
pub const ITEM_BIG_MALASADA: u32 = 64;
pub const ITEM_HP_UP: u32 = 65;
pub const ITEM_PROTEIN: u32 = 66;
pub const ITEM_IRON: u32 = 67;
pub const ITEM_CALCIUM: u32 = 68;
pub const ITEM_ZINC: u32 = 69;
pub const ITEM_CARBOS: u32 = 70;
pub const ITEM_PP_UP: u32 = 71;
pub const ITEM_PP_MAX: u32 = 72;
pub const ITEM_HEALTH_FEATHER: u32 = 73;
pub const ITEM_HEALTH_WING: u32 = 73;
pub const ITEM_MUSCLE_FEATHER: u32 = 74;
pub const ITEM_MUSCLE_WING: u32 = 74;
pub const ITEM_RESIST_FEATHER: u32 = 75;
pub const ITEM_RESIST_WING: u32 = 75;
pub const ITEM_GENIUS_FEATHER: u32 = 76;
pub const ITEM_GENIUS_WING: u32 = 76;
pub const ITEM_CLEVER_FEATHER: u32 = 77;
pub const ITEM_CLEVER_WING: u32 = 77;
pub const ITEM_SWIFT_FEATHER: u32 = 78;
pub const ITEM_SWIFT_WING: u32 = 78;
pub const ITEM_ABILITY_CAPSULE: u32 = 79;
pub const ITEM_ABILITY_PATCH: u32 = 80;
pub const ITEM_LONELY_MINT: u32 = 81;
pub const ITEM_ADAMANT_MINT: u32 = 82;
pub const ITEM_NAUGHTY_MINT: u32 = 83;
pub const ITEM_BRAVE_MINT: u32 = 84;
pub const ITEM_BOLD_MINT: u32 = 85;
pub const ITEM_IMPISH_MINT: u32 = 86;
pub const ITEM_LAX_MINT: u32 = 87;
pub const ITEM_RELAXED_MINT: u32 = 88;
pub const ITEM_MODEST_MINT: u32 = 89;
pub const ITEM_MILD_MINT: u32 = 90;
pub const ITEM_RASH_MINT: u32 = 91;
pub const ITEM_QUIET_MINT: u32 = 92;
pub const ITEM_CALM_MINT: u32 = 93;
pub const ITEM_GENTLE_MINT: u32 = 94;
pub const ITEM_CAREFUL_MINT: u32 = 95;
pub const ITEM_SASSY_MINT: u32 = 96;
pub const ITEM_TIMID_MINT: u32 = 97;
pub const ITEM_HASTY_MINT: u32 = 98;
pub const ITEM_JOLLY_MINT: u32 = 99;
pub const ITEM_NAIVE_MINT: u32 = 100;
pub const ITEM_SERIOUS_MINT: u32 = 101;
pub const ITEM_RARE_CANDY: u32 = 102;
pub const ITEM_EXP_CANDY_XS: u32 = 103;
pub const ITEM_EXP_CANDY_S: u32 = 104;
pub const ITEM_EXP_CANDY_M: u32 = 105;
pub const ITEM_EXP_CANDY_L: u32 = 106;
pub const ITEM_EXP_CANDY_XL: u32 = 107;
pub const ITEM_DYNAMAX_CANDY: u32 = 108;
pub const ITEM_BLUE_FLUTE: u32 = 109;
pub const ITEM_YELLOW_FLUTE: u32 = 110;
pub const ITEM_RED_FLUTE: u32 = 111;
pub const ITEM_BLACK_FLUTE: u32 = 112;
pub const ITEM_WHITE_FLUTE: u32 = 113;
pub const ITEM_REPEL: u32 = 114;
pub const ITEM_SUPER_REPEL: u32 = 115;
pub const ITEM_MAX_REPEL: u32 = 116;
pub const ITEM_LURE: u32 = 117;
pub const ITEM_SUPER_LURE: u32 = 118;
pub const ITEM_MAX_LURE: u32 = 119;
pub const ITEM_ESCAPE_ROPE: u32 = 120;
pub const ITEM_X_ATTACK: u32 = 121;
pub const ITEM_X_DEFENSE: u32 = 122;
pub const ITEM_X_DEFEND: u32 = 122;
pub const ITEM_X_SP_ATK: u32 = 123;
pub const ITEM_X_SPECIAL: u32 = 123;
pub const ITEM_X_SP_DEF: u32 = 124;
pub const ITEM_X_SPEED: u32 = 125;
pub const ITEM_X_ACCURACY: u32 = 126;
pub const ITEM_DIRE_HIT: u32 = 127;
pub const ITEM_GUARD_SPEC: u32 = 128;
pub const ITEM_POKE_DOLL: u32 = 129;
pub const ITEM_FLUFFY_TAIL: u32 = 130;
pub const ITEM_POKE_TOY: u32 = 131;
pub const ITEM_MAX_MUSHROOMS: u32 = 132;
pub const ITEM_BOTTLE_CAP: u32 = 133;
pub const ITEM_GOLD_BOTTLE_CAP: u32 = 134;
pub const ITEM_NUGGET: u32 = 135;
pub const ITEM_BIG_NUGGET: u32 = 136;
pub const ITEM_TINY_MUSHROOM: u32 = 137;
pub const ITEM_TINYMUSHROOM: u32 = 137;
pub const ITEM_BIG_MUSHROOM: u32 = 138;
pub const ITEM_BALM_MUSHROOM: u32 = 139;
pub const ITEM_BALMMUSHROOM: u32 = 139;
pub const ITEM_PEARL: u32 = 140;
pub const ITEM_BIG_PEARL: u32 = 141;
pub const ITEM_PEARL_STRING: u32 = 142;
pub const ITEM_STARDUST: u32 = 143;
pub const ITEM_STAR_PIECE: u32 = 144;
pub const ITEM_COMET_SHARD: u32 = 145;
pub const ITEM_SHOAL_SALT: u32 = 146;
pub const ITEM_SHOAL_SHELL: u32 = 147;
pub const ITEM_RED_SHARD: u32 = 148;
pub const ITEM_BLUE_SHARD: u32 = 149;
pub const ITEM_YELLOW_SHARD: u32 = 150;
pub const ITEM_GREEN_SHARD: u32 = 151;
pub const ITEM_HEART_SCALE: u32 = 152;
pub const ITEM_HONEY: u32 = 153;
pub const ITEM_RARE_BONE: u32 = 154;
pub const ITEM_ODD_KEYSTONE: u32 = 155;
pub const ITEM_PRETTY_FEATHER: u32 = 156;
pub const ITEM_PRETTY_WING: u32 = 156;
pub const ITEM_RELIC_COPPER: u32 = 157;
pub const ITEM_RELIC_SILVER: u32 = 158;
pub const ITEM_RELIC_GOLD: u32 = 159;
pub const ITEM_RELIC_VASE: u32 = 160;
pub const ITEM_RELIC_BAND: u32 = 161;
pub const ITEM_RELIC_STATUE: u32 = 162;
pub const ITEM_RELIC_CROWN: u32 = 163;
pub const ITEM_STRANGE_SOUVENIR: u32 = 164;
pub const ITEM_HELIX_FOSSIL: u32 = 165;
pub const ITEM_DOME_FOSSIL: u32 = 166;
pub const ITEM_OLD_AMBER: u32 = 167;
pub const ITEM_ROOT_FOSSIL: u32 = 168;
pub const ITEM_CLAW_FOSSIL: u32 = 169;
pub const ITEM_ARMOR_FOSSIL: u32 = 170;
pub const ITEM_SKULL_FOSSIL: u32 = 171;
pub const ITEM_COVER_FOSSIL: u32 = 172;
pub const ITEM_PLUME_FOSSIL: u32 = 173;
pub const ITEM_JAW_FOSSIL: u32 = 174;
pub const ITEM_SAIL_FOSSIL: u32 = 175;
pub const ITEM_FOSSILIZED_BIRD: u32 = 176;
pub const ITEM_FOSSILIZED_FISH: u32 = 177;
pub const ITEM_FOSSILIZED_DRAKE: u32 = 178;
pub const ITEM_FOSSILIZED_DINO: u32 = 179;
pub const ITEM_GROWTH_MULCH: u32 = 180;
pub const ITEM_DAMP_MULCH: u32 = 181;
pub const ITEM_STABLE_MULCH: u32 = 182;
pub const ITEM_GOOEY_MULCH: u32 = 183;
pub const ITEM_RICH_MULCH: u32 = 184;
pub const ITEM_SURPRISE_MULCH: u32 = 185;
pub const ITEM_BOOST_MULCH: u32 = 186;
pub const ITEM_AMAZE_MULCH: u32 = 187;
pub const ITEM_RED_APRICORN: u32 = 188;
pub const ITEM_BLUE_APRICORN: u32 = 189;
pub const ITEM_BLU_APRICORN: u32 = 189;
pub const ITEM_YELLOW_APRICORN: u32 = 190;
pub const ITEM_YLW_APRICORN: u32 = 190;
pub const ITEM_GREEN_APRICORN: u32 = 191;
pub const ITEM_GRN_APRICORN: u32 = 191;
pub const ITEM_PINK_APRICORN: u32 = 192;
pub const ITEM_PNK_APRICORN: u32 = 192;
pub const ITEM_WHITE_APRICORN: u32 = 193;
pub const ITEM_WHT_APRICORN: u32 = 193;
pub const ITEM_BLACK_APRICORN: u32 = 194;
pub const ITEM_BLK_APRICORN: u32 = 194;
pub const ITEM_WISHING_PIECE: u32 = 195;
pub const ITEM_GALARICA_TWIG: u32 = 196;
pub const ITEM_ARMORITE_ORE: u32 = 197;
pub const ITEM_DYNITE_ORE: u32 = 198;
pub const ITEM_ORANGE_MAIL: u32 = 199;
pub const ITEM_HARBOR_MAIL: u32 = 200;
pub const ITEM_GLITTER_MAIL: u32 = 201;
pub const ITEM_MECH_MAIL: u32 = 202;
pub const ITEM_WOOD_MAIL: u32 = 203;
pub const ITEM_WAVE_MAIL: u32 = 204;
pub const ITEM_BEAD_MAIL: u32 = 205;
pub const ITEM_SHADOW_MAIL: u32 = 206;
pub const ITEM_TROPIC_MAIL: u32 = 207;
pub const ITEM_DREAM_MAIL: u32 = 208;
pub const ITEM_FAB_MAIL: u32 = 209;
pub const ITEM_RETRO_MAIL: u32 = 210;
pub const FIRST_MAIL_INDEX: u32 = 199;
pub const ITEM_FIRE_STONE: u32 = 211;
pub const ITEM_WATER_STONE: u32 = 212;
pub const ITEM_THUNDER_STONE: u32 = 213;
pub const ITEM_THUNDERSTONE: u32 = 213;
pub const ITEM_LEAF_STONE: u32 = 214;
pub const ITEM_ICE_STONE: u32 = 215;
pub const ITEM_SUN_STONE: u32 = 216;
pub const ITEM_MOON_STONE: u32 = 217;
pub const ITEM_SHINY_STONE: u32 = 218;
pub const ITEM_DUSK_STONE: u32 = 219;
pub const ITEM_DAWN_STONE: u32 = 220;
pub const ITEM_SWEET_APPLE: u32 = 221;
pub const ITEM_TART_APPLE: u32 = 222;
pub const ITEM_CRACKED_POT: u32 = 223;
pub const ITEM_CHIPPED_POT: u32 = 224;
pub const ITEM_GALARICA_CUFF: u32 = 225;
pub const ITEM_GALARICA_WREATH: u32 = 226;
pub const ITEM_DRAGON_SCALE: u32 = 227;
pub const ITEM_UPGRADE: u32 = 228;
pub const ITEM_UP_GRADE: u32 = 228;
pub const ITEM_PROTECTOR: u32 = 229;
pub const ITEM_ELECTIRIZER: u32 = 230;
pub const ITEM_MAGMARIZER: u32 = 231;
pub const ITEM_DUBIOUS_DISC: u32 = 232;
pub const ITEM_REAPER_CLOTH: u32 = 233;
pub const ITEM_PRISM_SCALE: u32 = 234;
pub const ITEM_WHIPPED_DREAM: u32 = 235;
pub const ITEM_SACHET: u32 = 236;
pub const ITEM_OVAL_STONE: u32 = 237;
pub const ITEM_STRAWBERRY_SWEET: u32 = 238;
pub const ITEM_LOVE_SWEET: u32 = 239;
pub const ITEM_BERRY_SWEET: u32 = 240;
pub const ITEM_CLOVER_SWEET: u32 = 241;
pub const ITEM_FLOWER_SWEET: u32 = 242;
pub const ITEM_STAR_SWEET: u32 = 243;
pub const ITEM_RIBBON_SWEET: u32 = 244;
pub const ITEM_EVERSTONE: u32 = 245;
pub const ITEM_RED_NECTAR: u32 = 246;
pub const ITEM_YELLOW_NECTAR: u32 = 247;
pub const ITEM_PINK_NECTAR: u32 = 248;
pub const ITEM_PURPLE_NECTAR: u32 = 249;
pub const ITEM_FLAME_PLATE: u32 = 250;
pub const ITEM_SPLASH_PLATE: u32 = 251;
pub const ITEM_ZAP_PLATE: u32 = 252;
pub const ITEM_MEADOW_PLATE: u32 = 253;
pub const ITEM_ICICLE_PLATE: u32 = 254;
pub const ITEM_FIST_PLATE: u32 = 255;
pub const ITEM_TOXIC_PLATE: u32 = 256;
pub const ITEM_EARTH_PLATE: u32 = 257;
pub const ITEM_SKY_PLATE: u32 = 258;
pub const ITEM_MIND_PLATE: u32 = 259;
pub const ITEM_INSECT_PLATE: u32 = 260;
pub const ITEM_STONE_PLATE: u32 = 261;
pub const ITEM_SPOOKY_PLATE: u32 = 262;
pub const ITEM_DRACO_PLATE: u32 = 263;
pub const ITEM_DREAD_PLATE: u32 = 264;
pub const ITEM_IRON_PLATE: u32 = 265;
pub const ITEM_PIXIE_PLATE: u32 = 266;
pub const ITEM_DOUSE_DRIVE: u32 = 267;
pub const ITEM_SHOCK_DRIVE: u32 = 268;
pub const ITEM_BURN_DRIVE: u32 = 269;
pub const ITEM_CHILL_DRIVE: u32 = 270;
pub const ITEM_FIRE_MEMORY: u32 = 271;
pub const ITEM_WATER_MEMORY: u32 = 272;
pub const ITEM_ELECTRIC_MEMORY: u32 = 273;
pub const ITEM_GRASS_MEMORY: u32 = 274;
pub const ITEM_ICE_MEMORY: u32 = 275;
pub const ITEM_FIGHTING_MEMORY: u32 = 276;
pub const ITEM_POISON_MEMORY: u32 = 277;
pub const ITEM_GROUND_MEMORY: u32 = 278;
pub const ITEM_FLYING_MEMORY: u32 = 279;
pub const ITEM_PSYCHIC_MEMORY: u32 = 280;
pub const ITEM_BUG_MEMORY: u32 = 281;
pub const ITEM_ROCK_MEMORY: u32 = 282;
pub const ITEM_GHOST_MEMORY: u32 = 283;
pub const ITEM_DRAGON_MEMORY: u32 = 284;
pub const ITEM_DARK_MEMORY: u32 = 285;
pub const ITEM_STEEL_MEMORY: u32 = 286;
pub const ITEM_FAIRY_MEMORY: u32 = 287;
pub const ITEM_RUSTED_SWORD: u32 = 288;
pub const ITEM_RUSTED_SHIELD: u32 = 289;
pub const ITEM_RED_ORB: u32 = 290;
pub const ITEM_BLUE_ORB: u32 = 291;
pub const ITEM_VENUSAURITE: u32 = 292;
pub const ITEM_CHARIZARDITE_X: u32 = 293;
pub const ITEM_CHARIZARDITE_Y: u32 = 294;
pub const ITEM_BLASTOISINITE: u32 = 295;
pub const ITEM_BEEDRILLITE: u32 = 296;
pub const ITEM_PIDGEOTITE: u32 = 297;
pub const ITEM_ALAKAZITE: u32 = 298;
pub const ITEM_SLOWBRONITE: u32 = 299;
pub const ITEM_GENGARITE: u32 = 300;
pub const ITEM_KANGASKHANITE: u32 = 301;
pub const ITEM_PINSIRITE: u32 = 302;
pub const ITEM_GYARADOSITE: u32 = 303;
pub const ITEM_AERODACTYLITE: u32 = 304;
pub const ITEM_MEWTWONITE_X: u32 = 305;
pub const ITEM_MEWTWONITE_Y: u32 = 306;
pub const ITEM_AMPHAROSITE: u32 = 307;
pub const ITEM_STEELIXITE: u32 = 308;
pub const ITEM_SCIZORITE: u32 = 309;
pub const ITEM_HERACRONITE: u32 = 310;
pub const ITEM_HOUNDOOMINITE: u32 = 311;
pub const ITEM_TYRANITARITE: u32 = 312;
pub const ITEM_SCEPTILITE: u32 = 313;
pub const ITEM_BLAZIKENITE: u32 = 314;
pub const ITEM_SWAMPERTITE: u32 = 315;
pub const ITEM_GARDEVOIRITE: u32 = 316;
pub const ITEM_SABLENITE: u32 = 317;
pub const ITEM_MAWILITE: u32 = 318;
pub const ITEM_AGGRONITE: u32 = 319;
pub const ITEM_MEDICHAMITE: u32 = 320;
pub const ITEM_MANECTITE: u32 = 321;
pub const ITEM_SHARPEDONITE: u32 = 322;
pub const ITEM_CAMERUPTITE: u32 = 323;
pub const ITEM_ALTARIANITE: u32 = 324;
pub const ITEM_BANETTITE: u32 = 325;
pub const ITEM_ABSOLITE: u32 = 326;
pub const ITEM_GLALITITE: u32 = 327;
pub const ITEM_SALAMENCITE: u32 = 328;
pub const ITEM_METAGROSSITE: u32 = 329;
pub const ITEM_LATIASITE: u32 = 330;
pub const ITEM_LATIOSITE: u32 = 331;
pub const ITEM_LOPUNNITE: u32 = 332;
pub const ITEM_GARCHOMPITE: u32 = 333;
pub const ITEM_LUCARIONITE: u32 = 334;
pub const ITEM_ABOMASITE: u32 = 335;
pub const ITEM_GALLADITE: u32 = 336;
pub const ITEM_AUDINITE: u32 = 337;
pub const ITEM_DIANCITE: u32 = 338;
pub const ITEM_NORMAL_GEM: u32 = 339;
pub const ITEM_FIRE_GEM: u32 = 340;
pub const ITEM_WATER_GEM: u32 = 341;
pub const ITEM_ELECTRIC_GEM: u32 = 342;
pub const ITEM_GRASS_GEM: u32 = 343;
pub const ITEM_ICE_GEM: u32 = 344;
pub const ITEM_FIGHTING_GEM: u32 = 345;
pub const ITEM_POISON_GEM: u32 = 346;
pub const ITEM_GROUND_GEM: u32 = 347;
pub const ITEM_FLYING_GEM: u32 = 348;
pub const ITEM_PSYCHIC_GEM: u32 = 349;
pub const ITEM_BUG_GEM: u32 = 350;
pub const ITEM_ROCK_GEM: u32 = 351;
pub const ITEM_GHOST_GEM: u32 = 352;
pub const ITEM_DRAGON_GEM: u32 = 353;
pub const ITEM_DARK_GEM: u32 = 354;
pub const ITEM_STEEL_GEM: u32 = 355;
pub const ITEM_FAIRY_GEM: u32 = 356;
pub const ITEM_NORMALIUM_Z: u32 = 357;
pub const ITEM_FIRIUM_Z: u32 = 358;
pub const ITEM_WATERIUM_Z: u32 = 359;
pub const ITEM_ELECTRIUM_Z: u32 = 360;
pub const ITEM_GRASSIUM_Z: u32 = 361;
pub const ITEM_ICIUM_Z: u32 = 362;
pub const ITEM_FIGHTINIUM_Z: u32 = 363;
pub const ITEM_POISONIUM_Z: u32 = 364;
pub const ITEM_GROUNDIUM_Z: u32 = 365;
pub const ITEM_FLYINIUM_Z: u32 = 366;
pub const ITEM_PSYCHIUM_Z: u32 = 367;
pub const ITEM_BUGINIUM_Z: u32 = 368;
pub const ITEM_ROCKIUM_Z: u32 = 369;
pub const ITEM_GHOSTIUM_Z: u32 = 370;
pub const ITEM_DRAGONIUM_Z: u32 = 371;
pub const ITEM_DARKINIUM_Z: u32 = 372;
pub const ITEM_STEELIUM_Z: u32 = 373;
pub const ITEM_FAIRIUM_Z: u32 = 374;
pub const ITEM_PIKANIUM_Z: u32 = 375;
pub const ITEM_EEVIUM_Z: u32 = 376;
pub const ITEM_SNORLIUM_Z: u32 = 377;
pub const ITEM_MEWNIUM_Z: u32 = 378;
pub const ITEM_DECIDIUM_Z: u32 = 379;
pub const ITEM_INCINIUM_Z: u32 = 380;
pub const ITEM_PRIMARIUM_Z: u32 = 381;
pub const ITEM_LYCANIUM_Z: u32 = 382;
pub const ITEM_MIMIKIUM_Z: u32 = 383;
pub const ITEM_KOMMONIUM_Z: u32 = 384;
pub const ITEM_TAPUNIUM_Z: u32 = 385;
pub const ITEM_SOLGANIUM_Z: u32 = 386;
pub const ITEM_LUNALIUM_Z: u32 = 387;
pub const ITEM_MARSHADIUM_Z: u32 = 388;
pub const ITEM_ALORAICHIUM_Z: u32 = 389;
pub const ITEM_PIKASHUNIUM_Z: u32 = 390;
pub const ITEM_ULTRANECROZIUM_Z: u32 = 391;
pub const ITEM_LIGHT_BALL: u32 = 392;
pub const ITEM_LEEK: u32 = 393;
pub const ITEM_STICK: u32 = 393;
pub const ITEM_THICK_CLUB: u32 = 394;
pub const ITEM_LUCKY_PUNCH: u32 = 395;
pub const ITEM_METAL_POWDER: u32 = 396;
pub const ITEM_QUICK_POWDER: u32 = 397;
pub const ITEM_DEEP_SEA_SCALE: u32 = 398;
pub const ITEM_DEEPSEASCALE: u32 = 398;
pub const ITEM_DEEP_SEA_TOOTH: u32 = 399;
pub const ITEM_DEEPSEATOOTH: u32 = 399;
pub const ITEM_SOUL_DEW: u32 = 400;
pub const ITEM_ADAMANT_ORB: u32 = 401;
pub const ITEM_LUSTROUS_ORB: u32 = 402;
pub const ITEM_GRISEOUS_ORB: u32 = 403;
pub const ITEM_SEA_INCENSE: u32 = 404;
pub const ITEM_LAX_INCENSE: u32 = 405;
pub const ITEM_ODD_INCENSE: u32 = 406;
pub const ITEM_ROCK_INCENSE: u32 = 407;
pub const ITEM_FULL_INCENSE: u32 = 408;
pub const ITEM_WAVE_INCENSE: u32 = 409;
pub const ITEM_ROSE_INCENSE: u32 = 410;
pub const ITEM_LUCK_INCENSE: u32 = 411;
pub const ITEM_PURE_INCENSE: u32 = 412;
pub const ITEM_RED_SCARF: u32 = 413;
pub const ITEM_BLUE_SCARF: u32 = 414;
pub const ITEM_PINK_SCARF: u32 = 415;
pub const ITEM_GREEN_SCARF: u32 = 416;
pub const ITEM_YELLOW_SCARF: u32 = 417;
pub const ITEM_MACHO_BRACE: u32 = 418;
pub const ITEM_POWER_WEIGHT: u32 = 419;
pub const ITEM_POWER_BRACER: u32 = 420;
pub const ITEM_POWER_BELT: u32 = 421;
pub const ITEM_POWER_LENS: u32 = 422;
pub const ITEM_POWER_BAND: u32 = 423;
pub const ITEM_POWER_ANKLET: u32 = 424;
pub const ITEM_SILK_SCARF: u32 = 425;
pub const ITEM_CHARCOAL: u32 = 426;
pub const ITEM_MYSTIC_WATER: u32 = 427;
pub const ITEM_MAGNET: u32 = 428;
pub const ITEM_MIRACLE_SEED: u32 = 429;
pub const ITEM_NEVER_MELT_ICE: u32 = 430;
pub const ITEM_NEVERMELTICE: u32 = 430;
pub const ITEM_BLACK_BELT: u32 = 431;
pub const ITEM_BLACKBELT: u32 = 431;
pub const ITEM_POISON_BARB: u32 = 432;
pub const ITEM_SOFT_SAND: u32 = 433;
pub const ITEM_SHARP_BEAK: u32 = 434;
pub const ITEM_TWISTED_SPOON: u32 = 435;
pub const ITEM_TWISTEDSPOON: u32 = 435;
pub const ITEM_SILVER_POWDER: u32 = 436;
pub const ITEM_SILVERPOWDER: u32 = 436;
pub const ITEM_HARD_STONE: u32 = 437;
pub const ITEM_SPELL_TAG: u32 = 438;
pub const ITEM_DRAGON_FANG: u32 = 439;
pub const ITEM_BLACK_GLASSES: u32 = 440;
pub const ITEM_BLACKGLASSES: u32 = 440;
pub const ITEM_METAL_COAT: u32 = 441;
pub const ITEM_CHOICE_BAND: u32 = 442;
pub const ITEM_CHOICE_SPECS: u32 = 443;
pub const ITEM_CHOICE_SCARF: u32 = 444;
pub const ITEM_FLAME_ORB: u32 = 445;
pub const ITEM_TOXIC_ORB: u32 = 446;
pub const ITEM_DAMP_ROCK: u32 = 447;
pub const ITEM_HEAT_ROCK: u32 = 448;
pub const ITEM_SMOOTH_ROCK: u32 = 449;
pub const ITEM_ICY_ROCK: u32 = 450;
pub const ITEM_ELECTRIC_SEED: u32 = 451;
pub const ITEM_PSYCHIC_SEED: u32 = 452;
pub const ITEM_MISTY_SEED: u32 = 453;
pub const ITEM_GRASSY_SEED: u32 = 454;
pub const ITEM_ABSORB_BULB: u32 = 455;
pub const ITEM_CELL_BATTERY: u32 = 456;
pub const ITEM_LUMINOUS_MOSS: u32 = 457;
pub const ITEM_SNOWBALL: u32 = 458;
pub const ITEM_BRIGHT_POWDER: u32 = 459;
pub const ITEM_BRIGHTPOWDER: u32 = 459;
pub const ITEM_WHITE_HERB: u32 = 460;
pub const ITEM_EXP_SHARE: u32 = 461;
pub const ITEM_EXP_ALL: u32 = 461;
pub const ITEM_QUICK_CLAW: u32 = 462;
pub const ITEM_SOOTHE_BELL: u32 = 463;
pub const ITEM_MENTAL_HERB: u32 = 464;
pub const ITEM_KINGS_ROCK: u32 = 465;
pub const ITEM_AMULET_COIN: u32 = 466;
pub const ITEM_CLEANSE_TAG: u32 = 467;
pub const ITEM_SMOKE_BALL: u32 = 468;
pub const ITEM_FOCUS_BAND: u32 = 469;
pub const ITEM_LUCKY_EGG: u32 = 470;
pub const ITEM_SCOPE_LENS: u32 = 471;
pub const ITEM_LEFTOVERS: u32 = 472;
pub const ITEM_SHELL_BELL: u32 = 473;
pub const ITEM_WIDE_LENS: u32 = 474;
pub const ITEM_MUSCLE_BAND: u32 = 475;
pub const ITEM_WISE_GLASSES: u32 = 476;
pub const ITEM_EXPERT_BELT: u32 = 477;
pub const ITEM_LIGHT_CLAY: u32 = 478;
pub const ITEM_LIFE_ORB: u32 = 479;
pub const ITEM_POWER_HERB: u32 = 480;
pub const ITEM_FOCUS_SASH: u32 = 481;
pub const ITEM_ZOOM_LENS: u32 = 482;
pub const ITEM_METRONOME: u32 = 483;
pub const ITEM_IRON_BALL: u32 = 484;
pub const ITEM_LAGGING_TAIL: u32 = 485;
pub const ITEM_DESTINY_KNOT: u32 = 486;
pub const ITEM_BLACK_SLUDGE: u32 = 487;
pub const ITEM_GRIP_CLAW: u32 = 488;
pub const ITEM_STICKY_BARB: u32 = 489;
pub const ITEM_SHED_SHELL: u32 = 490;
pub const ITEM_BIG_ROOT: u32 = 491;
pub const ITEM_RAZOR_CLAW: u32 = 492;
pub const ITEM_RAZOR_FANG: u32 = 493;
pub const ITEM_EVIOLITE: u32 = 494;
pub const ITEM_FLOAT_STONE: u32 = 495;
pub const ITEM_ROCKY_HELMET: u32 = 496;
pub const ITEM_AIR_BALLOON: u32 = 497;
pub const ITEM_RED_CARD: u32 = 498;
pub const ITEM_RING_TARGET: u32 = 499;
pub const ITEM_BINDING_BAND: u32 = 500;
pub const ITEM_EJECT_BUTTON: u32 = 501;
pub const ITEM_WEAKNESS_POLICY: u32 = 502;
pub const ITEM_ASSAULT_VEST: u32 = 503;
pub const ITEM_SAFETY_GOGGLES: u32 = 504;
pub const ITEM_ADRENALINE_ORB: u32 = 505;
pub const ITEM_TERRAIN_EXTENDER: u32 = 506;
pub const ITEM_PROTECTIVE_PADS: u32 = 507;
pub const ITEM_THROAT_SPRAY: u32 = 508;
pub const ITEM_EJECT_PACK: u32 = 509;
pub const ITEM_HEAVY_DUTY_BOOTS: u32 = 510;
pub const ITEM_BLUNDER_POLICY: u32 = 511;
pub const ITEM_ROOM_SERVICE: u32 = 512;
pub const ITEM_UTILITY_UMBRELLA: u32 = 513;
pub const CONFUSE_BERRY_HEAL_FRACTION: u32 = 3;
pub const ITEM_CHERI_BERRY: u32 = 514;
pub const ITEM_CHESTO_BERRY: u32 = 515;
pub const ITEM_PECHA_BERRY: u32 = 516;
pub const ITEM_RAWST_BERRY: u32 = 517;
pub const ITEM_ASPEAR_BERRY: u32 = 518;
pub const ITEM_LEPPA_BERRY: u32 = 519;
pub const ITEM_ORAN_BERRY: u32 = 520;
pub const ITEM_PERSIM_BERRY: u32 = 521;
pub const ITEM_LUM_BERRY: u32 = 522;
pub const ITEM_SITRUS_BERRY: u32 = 523;
pub const ITEM_FIGY_BERRY: u32 = 524;
pub const ITEM_WIKI_BERRY: u32 = 525;
pub const ITEM_MAGO_BERRY: u32 = 526;
pub const ITEM_AGUAV_BERRY: u32 = 527;
pub const ITEM_IAPAPA_BERRY: u32 = 528;
pub const ITEM_RAZZ_BERRY: u32 = 529;
pub const ITEM_BLUK_BERRY: u32 = 530;
pub const ITEM_NANAB_BERRY: u32 = 531;
pub const ITEM_WEPEAR_BERRY: u32 = 532;
pub const ITEM_PINAP_BERRY: u32 = 533;
pub const ITEM_POMEG_BERRY: u32 = 534;
pub const ITEM_KELPSY_BERRY: u32 = 535;
pub const ITEM_QUALOT_BERRY: u32 = 536;
pub const ITEM_HONDEW_BERRY: u32 = 537;
pub const ITEM_GREPA_BERRY: u32 = 538;
pub const ITEM_TAMATO_BERRY: u32 = 539;
pub const ITEM_CORNN_BERRY: u32 = 540;
pub const ITEM_MAGOST_BERRY: u32 = 541;
pub const ITEM_RABUTA_BERRY: u32 = 542;
pub const ITEM_NOMEL_BERRY: u32 = 543;
pub const ITEM_SPELON_BERRY: u32 = 544;
pub const ITEM_PAMTRE_BERRY: u32 = 545;
pub const ITEM_WATMEL_BERRY: u32 = 546;
pub const ITEM_DURIN_BERRY: u32 = 547;
pub const ITEM_BELUE_BERRY: u32 = 548;
pub const ITEM_CHILAN_BERRY: u32 = 549;
pub const ITEM_OCCA_BERRY: u32 = 550;
pub const ITEM_PASSHO_BERRY: u32 = 551;
pub const ITEM_WACAN_BERRY: u32 = 552;
pub const ITEM_RINDO_BERRY: u32 = 553;
pub const ITEM_YACHE_BERRY: u32 = 554;
pub const ITEM_CHOPLE_BERRY: u32 = 555;
pub const ITEM_KEBIA_BERRY: u32 = 556;
pub const ITEM_SHUCA_BERRY: u32 = 557;
pub const ITEM_COBA_BERRY: u32 = 558;
pub const ITEM_PAYAPA_BERRY: u32 = 559;
pub const ITEM_TANGA_BERRY: u32 = 560;
pub const ITEM_CHARTI_BERRY: u32 = 561;
pub const ITEM_KASIB_BERRY: u32 = 562;
pub const ITEM_HABAN_BERRY: u32 = 563;
pub const ITEM_COLBUR_BERRY: u32 = 564;
pub const ITEM_BABIRI_BERRY: u32 = 565;
pub const ITEM_ROSELI_BERRY: u32 = 566;
pub const ITEM_LIECHI_BERRY: u32 = 567;
pub const ITEM_GANLON_BERRY: u32 = 568;
pub const ITEM_SALAC_BERRY: u32 = 569;
pub const ITEM_PETAYA_BERRY: u32 = 570;
pub const ITEM_APICOT_BERRY: u32 = 571;
pub const ITEM_LANSAT_BERRY: u32 = 572;
pub const ITEM_STARF_BERRY: u32 = 573;
pub const ITEM_ENIGMA_BERRY: u32 = 574;
pub const ITEM_MICLE_BERRY: u32 = 575;
pub const ITEM_CUSTAP_BERRY: u32 = 576;
pub const ITEM_JABOCA_BERRY: u32 = 577;
pub const ITEM_ROWAP_BERRY: u32 = 578;
pub const ITEM_KEE_BERRY: u32 = 579;
pub const ITEM_MARANGA_BERRY: u32 = 580;
pub const ITEM_ENIGMA_BERRY_E_READER: u32 = 581;
pub const FIRST_BERRY_INDEX: u32 = 514;
pub const LAST_BERRY_INDEX: u32 = 581;
pub const ITEM_TM01: u32 = 582;
pub const ITEM_TM02: u32 = 583;
pub const ITEM_TM03: u32 = 584;
pub const ITEM_TM04: u32 = 585;
pub const ITEM_TM05: u32 = 586;
pub const ITEM_TM06: u32 = 587;
pub const ITEM_TM07: u32 = 588;
pub const ITEM_TM08: u32 = 589;
pub const ITEM_TM09: u32 = 590;
pub const ITEM_TM10: u32 = 591;
pub const ITEM_TM11: u32 = 592;
pub const ITEM_TM12: u32 = 593;
pub const ITEM_TM13: u32 = 594;
pub const ITEM_TM14: u32 = 595;
pub const ITEM_TM15: u32 = 596;
pub const ITEM_TM16: u32 = 597;
pub const ITEM_TM17: u32 = 598;
pub const ITEM_TM18: u32 = 599;
pub const ITEM_TM19: u32 = 600;
pub const ITEM_TM20: u32 = 601;
pub const ITEM_TM21: u32 = 602;
pub const ITEM_TM22: u32 = 603;
pub const ITEM_TM23: u32 = 604;
pub const ITEM_TM24: u32 = 605;
pub const ITEM_TM25: u32 = 606;
pub const ITEM_TM26: u32 = 607;
pub const ITEM_TM27: u32 = 608;
pub const ITEM_TM28: u32 = 609;
pub const ITEM_TM29: u32 = 610;
pub const ITEM_TM30: u32 = 611;
pub const ITEM_TM31: u32 = 612;
pub const ITEM_TM32: u32 = 613;
pub const ITEM_TM33: u32 = 614;
pub const ITEM_TM34: u32 = 615;
pub const ITEM_TM35: u32 = 616;
pub const ITEM_TM36: u32 = 617;
pub const ITEM_TM37: u32 = 618;
pub const ITEM_TM38: u32 = 619;
pub const ITEM_TM39: u32 = 620;
pub const ITEM_TM40: u32 = 621;
pub const ITEM_TM41: u32 = 622;
pub const ITEM_TM42: u32 = 623;
pub const ITEM_TM43: u32 = 624;
pub const ITEM_TM44: u32 = 625;
pub const ITEM_TM45: u32 = 626;
pub const ITEM_TM46: u32 = 627;
pub const ITEM_TM47: u32 = 628;
pub const ITEM_TM48: u32 = 629;
pub const ITEM_TM49: u32 = 630;
pub const ITEM_TM50: u32 = 631;
pub const ITEM_TM51: u32 = 632;
pub const ITEM_TM52: u32 = 633;
pub const ITEM_TM53: u32 = 634;
pub const ITEM_TM54: u32 = 635;
pub const ITEM_TM55: u32 = 636;
pub const ITEM_TM56: u32 = 637;
pub const ITEM_TM57: u32 = 638;
pub const ITEM_TM58: u32 = 639;
pub const ITEM_TM59: u32 = 640;
pub const ITEM_TM60: u32 = 641;
pub const ITEM_TM61: u32 = 642;
pub const ITEM_TM62: u32 = 643;
pub const ITEM_TM63: u32 = 644;
pub const ITEM_TM64: u32 = 645;
pub const ITEM_TM65: u32 = 646;
pub const ITEM_TM66: u32 = 647;
pub const ITEM_TM67: u32 = 648;
pub const ITEM_TM68: u32 = 649;
pub const ITEM_TM69: u32 = 650;
pub const ITEM_TM70: u32 = 651;
pub const ITEM_TM71: u32 = 652;
pub const ITEM_TM72: u32 = 653;
pub const ITEM_TM73: u32 = 654;
pub const ITEM_TM74: u32 = 655;
pub const ITEM_TM75: u32 = 656;
pub const ITEM_TM76: u32 = 657;
pub const ITEM_TM77: u32 = 658;
pub const ITEM_TM78: u32 = 659;
pub const ITEM_TM79: u32 = 660;
pub const ITEM_TM80: u32 = 661;
pub const ITEM_TM81: u32 = 662;
pub const ITEM_TM82: u32 = 663;
pub const ITEM_TM83: u32 = 664;
pub const ITEM_TM84: u32 = 665;
pub const ITEM_TM85: u32 = 666;
pub const ITEM_TM86: u32 = 667;
pub const ITEM_TM87: u32 = 668;
pub const ITEM_TM88: u32 = 669;
pub const ITEM_TM89: u32 = 670;
pub const ITEM_TM90: u32 = 671;
pub const ITEM_TM91: u32 = 672;
pub const ITEM_TM92: u32 = 673;
pub const ITEM_TM93: u32 = 674;
pub const ITEM_TM94: u32 = 675;
pub const ITEM_TM95: u32 = 676;
pub const ITEM_TM96: u32 = 677;
pub const ITEM_TM97: u32 = 678;
pub const ITEM_TM98: u32 = 679;
pub const ITEM_TM99: u32 = 680;
pub const ITEM_TM100: u32 = 681;
pub const ITEM_HM01: u32 = 682;
pub const ITEM_HM02: u32 = 683;
pub const ITEM_HM03: u32 = 684;
pub const ITEM_HM04: u32 = 685;
pub const ITEM_HM05: u32 = 686;
pub const ITEM_HM06: u32 = 687;
pub const ITEM_HM07: u32 = 688;
pub const ITEM_HM08: u32 = 689;
pub const ITEM_OVAL_CHARM: u32 = 690;
pub const ITEM_SHINY_CHARM: u32 = 691;
pub const ITEM_CATCHING_CHARM: u32 = 692;
pub const ITEM_EXP_CHARM: u32 = 693;
pub const ITEM_ROTOM_CATALOG: u32 = 694;
pub const ITEM_GRACIDEA: u32 = 695;
pub const ITEM_REVEAL_GLASS: u32 = 696;
pub const ITEM_DNA_SPLICERS: u32 = 697;
pub const ITEM_ZYGARDE_CUBE: u32 = 698;
pub const ITEM_PRISON_BOTTLE: u32 = 699;
pub const ITEM_N_SOLARIZER: u32 = 700;
pub const ITEM_N_LUNARIZER: u32 = 701;
pub const ITEM_REINS_OF_UNITY: u32 = 702;
pub const ITEM_MEGA_RING: u32 = 703;
pub const ITEM_Z_POWER_RING: u32 = 704;
pub const ITEM_DYNAMAX_BAND: u32 = 705;
pub const ITEM_BICYCLE: u32 = 706;
pub const ITEM_MACH_BIKE: u32 = 707;
pub const ITEM_ACRO_BIKE: u32 = 708;
pub const ITEM_OLD_ROD: u32 = 709;
pub const ITEM_GOOD_ROD: u32 = 710;
pub const ITEM_SUPER_ROD: u32 = 711;
pub const ITEM_DOWSING_MACHINE: u32 = 712;
pub const ITEM_ITEMFINDER: u32 = 712;
pub const ITEM_DOWSING_MCHN: u32 = 712;
pub const ITEM_TOWN_MAP: u32 = 713;
pub const ITEM_VS_SEEKER: u32 = 714;
pub const ITEM_TM_CASE: u32 = 715;
pub const ITEM_BERRY_POUCH: u32 = 716;
pub const ITEM_POKEMON_BOX_LINK: u32 = 717;
pub const ITEM_POKEMON_BOX: u32 = 717;
pub const ITEM_COIN_CASE: u32 = 718;
pub const ITEM_POWDER_JAR: u32 = 719;
pub const ITEM_WAILMER_PAIL: u32 = 720;
pub const ITEM_POKE_RADAR: u32 = 721;
pub const ITEM_POKEBLOCK_CASE: u32 = 722;
pub const ITEM_SOOT_SACK: u32 = 723;
pub const ITEM_POKE_FLUTE: u32 = 724;
pub const ITEM_FAME_CHECKER: u32 = 725;
pub const ITEM_TEACHY_TV: u32 = 726;
pub const ITEM_SS_TICKET: u32 = 727;
pub const ITEM_EON_TICKET: u32 = 728;
pub const ITEM_MYSTIC_TICKET: u32 = 729;
pub const ITEM_AURORA_TICKET: u32 = 730;
pub const ITEM_OLD_SEA_MAP: u32 = 731;
pub const ITEM_LETTER: u32 = 732;
pub const ITEM_DEVON_PARTS: u32 = 733;
pub const ITEM_DEVON_GOODS: u32 = 733;
pub const ITEM_GO_GOGGLES: u32 = 734;
pub const ITEM_DEVON_SCOPE: u32 = 735;
pub const ITEM_BASEMENT_KEY: u32 = 736;
pub const ITEM_SCANNER: u32 = 737;
pub const ITEM_STORAGE_KEY: u32 = 738;
pub const ITEM_KEY_TO_ROOM_1: u32 = 739;
pub const ITEM_RM_1_KEY: u32 = 739;
pub const ITEM_KEY_TO_ROOM_2: u32 = 740;
pub const ITEM_RM_2_KEY: u32 = 740;
pub const ITEM_KEY_TO_ROOM_4: u32 = 741;
pub const ITEM_RM_4_KEY: u32 = 741;
pub const ITEM_KEY_TO_ROOM_6: u32 = 742;
pub const ITEM_RM_6_KEY: u32 = 742;
pub const ITEM_METEORITE: u32 = 743;
pub const ITEM_MAGMA_EMBLEM: u32 = 744;
pub const ITEM_CONTEST_PASS: u32 = 745;
pub const ITEM_PARCEL: u32 = 746;
pub const ITEM_OAKS_PARCEL: u32 = 746;
pub const ITEM_SECRET_KEY: u32 = 747;
pub const ITEM_BIKE_VOUCHER: u32 = 748;
pub const ITEM_GOLD_TEETH: u32 = 749;
pub const ITEM_CARD_KEY: u32 = 750;
pub const ITEM_LIFT_KEY: u32 = 751;
pub const ITEM_SILPH_SCOPE: u32 = 752;
pub const ITEM_TRI_PASS: u32 = 753;
pub const ITEM_RAINBOW_PASS: u32 = 754;
pub const ITEM_TEA: u32 = 755;
pub const ITEM_RUBY: u32 = 756;
pub const ITEM_SAPPHIRE: u32 = 757;
pub const ITEM_ABILITY_SHIELD: u32 = 758;
pub const ITEM_CLEAR_AMULET: u32 = 759;
pub const ITEM_PUNCHING_GLOVE: u32 = 760;
pub const ITEM_COVERT_CLOAK: u32 = 761;
pub const ITEM_LOADED_DICE: u32 = 762;
pub const ITEM_AUSPICIOUS_ARMOR: u32 = 763;
pub const ITEM_BOOSTER_ENERGY: u32 = 764;
pub const ITEM_BIG_BAMBOO_SHOOT: u32 = 765;
pub const ITEM_GIMMIGHOUL_COIN: u32 = 766;
pub const ITEM_LEADERS_CREST: u32 = 767;
pub const ITEM_MALICIOUS_ARMOR: u32 = 768;
pub const ITEM_MIRROR_HERB: u32 = 769;
pub const ITEM_SCROLL_OF_DARKNESS: u32 = 770;
pub const ITEM_SCROLL_OF_WATERS: u32 = 771;
pub const ITEM_TERA_ORB: u32 = 772;
pub const ITEM_TINY_BAMBOO_SHOOT: u32 = 773;
pub const ITEM_BUG_TERA_SHARD: u32 = 774;
pub const ITEM_DARK_TERA_SHARD: u32 = 775;
pub const ITEM_DRAGON_TERA_SHARD: u32 = 776;
pub const ITEM_ELECTRIC_TERA_SHARD: u32 = 777;
pub const ITEM_FAIRY_TERA_SHARD: u32 = 778;
pub const ITEM_FIGHTING_TERA_SHARD: u32 = 779;
pub const ITEM_FIRE_TERA_SHARD: u32 = 780;
pub const ITEM_FLYING_TERA_SHARD: u32 = 781;
pub const ITEM_GHOST_TERA_SHARD: u32 = 782;
pub const ITEM_GRASS_TERA_SHARD: u32 = 783;
pub const ITEM_GROUND_TERA_SHARD: u32 = 784;
pub const ITEM_ICE_TERA_SHARD: u32 = 785;
pub const ITEM_NORMAL_TERA_SHARD: u32 = 786;
pub const ITEM_POISON_TERA_SHARD: u32 = 787;
pub const ITEM_PSYCHIC_TERA_SHARD: u32 = 788;
pub const ITEM_ROCK_TERA_SHARD: u32 = 789;
pub const ITEM_STEEL_TERA_SHARD: u32 = 790;
pub const ITEM_WATER_TERA_SHARD: u32 = 791;
pub const ITEM_ADAMANT_CRYSTAL: u32 = 792;
pub const ITEM_GRISEOUS_CORE: u32 = 793;
pub const ITEM_LUSTROUS_GLOBE: u32 = 794;
pub const ITEM_BLACK_AUGURITE: u32 = 795;
pub const ITEM_LINKING_CORD: u32 = 796;
pub const ITEM_PEAT_BLOCK: u32 = 797;
pub const ITEM_BERSERK_GENE: u32 = 798;
pub const ITEM_FAIRY_FEATHER: u32 = 799;
pub const ITEM_SYRUPY_APPLE: u32 = 800;
pub const ITEM_UNREMARKABLE_TEACUP: u32 = 801;
pub const ITEM_MASTERPIECE_TEACUP: u32 = 802;
pub const ITEM_CORNERSTONE_MASK: u32 = 803;
pub const ITEM_WELLSPRING_MASK: u32 = 804;
pub const ITEM_HEARTHFLAME_MASK: u32 = 805;
pub const ITEM_HEALTH_MOCHI: u32 = 806;
pub const ITEM_MUSCLE_MOCHI: u32 = 807;
pub const ITEM_RESIST_MOCHI: u32 = 808;
pub const ITEM_GENIUS_MOCHI: u32 = 809;
pub const ITEM_CLEVER_MOCHI: u32 = 810;
pub const ITEM_SWIFT_MOCHI: u32 = 811;
pub const ITEM_FRESH_START_MOCHI: u32 = 812;
pub const ITEM_GLIMMERING_CHARM: u32 = 813;
pub const ITEM_METAL_ALLOY: u32 = 814;
pub const ITEM_STELLAR_TERA_SHARD: u32 = 815;
pub const ITEM_JUBILIFE_MUFFIN: u32 = 816;
pub const ITEM_REMEDY: u32 = 817;
pub const ITEM_FINE_REMEDY: u32 = 818;
pub const ITEM_SUPERB_REMEDY: u32 = 819;
pub const ITEM_AUX_EVASION: u32 = 820;
pub const ITEM_AUX_GUARD: u32 = 821;
pub const ITEM_AUX_POWER: u32 = 822;
pub const ITEM_AUX_POWERGUARD: u32 = 823;
pub const ITEM_CHOICE_DUMPLING: u32 = 824;
pub const ITEM_SWAP_SNACK: u32 = 825;
pub const ITEM_TWICE_SPICED_RADISH: u32 = 826;
pub const ITEM_POKESHI_DOLL: u32 = 827;
pub const ITEM_STRANGE_BALL: u32 = 828;
pub const ITEM_SURFBOARD: u32 = 829;
pub const ITEM_AXE: u32 = 830;
pub const ITEM_PICKAXE: u32 = 831;
pub const ITEM_DIVING_SUIT: u32 = 832;
pub const ITEM_LANTERN: u32 = 833;
pub const ITEM_POWER_GLOVE: u32 = 834;
pub const ITEM_CANDY_JAR: u32 = 835;
pub const ITEMS_COUNT: u32 = 836;
pub const ITEM_FIELD_ARROW: u32 = 836;
pub const ITEM_LIST_END: u32 = 65535;
pub const FIRST_BERRY_MASTER_BERRY: u32 = 534;
pub const LAST_BERRY_MASTER_BERRY: u32 = 543;
pub const FIRST_BERRY_MASTER_WIFE_BERRY: u32 = 514;
pub const LAST_BERRY_MASTER_WIFE_BERRY: u32 = 523;
pub const FIRST_KIRI_BERRY: u32 = 534;
pub const LAST_KIRI_BERRY: u32 = 543;
pub const FIRST_ROUTE_114_MAN_BERRY: u32 = 529;
pub const LAST_ROUTE_114_MAN_BERRY: u32 = 533;
pub const NUM_BERRY_MASTER_BERRIES: u32 = 10;
pub const NUM_BERRY_MASTER_BERRIES_SKIPPED: u32 = 20;
pub const NUM_BERRY_MASTER_WIFE_BERRIES: u32 = 10;
pub const NUM_KIRI_BERRIES: u32 = 10;
pub const NUM_KIRI_BERRIES_SKIPPED: u32 = 20;
pub const NUM_ROUTE_114_MAN_BERRIES: u32 = 5;
pub const NUM_ROUTE_114_MAN_BERRIES_SKIPPED: u32 = 15;
pub const MAIL_NONE: u32 = 255;
pub const NUM_TECHNICAL_MACHINES: u32 = 100;
pub const NUM_HIDDEN_MACHINES: u32 = 8;
pub const MAX_BAG_ITEM_CAPACITY: u32 = 999;
pub const MAX_PC_ITEM_CAPACITY: u32 = 999;
pub const MAX_PYRAMID_BAG_ITEM_CAPACITY: u32 = 99;
pub const OLD_ROD: u32 = 0;
pub const GOOD_ROD: u32 = 1;
pub const SUPER_ROD: u32 = 2;
pub const MACH_BIKE: u32 = 0;
pub const ACRO_BIKE: u32 = 1;
pub const EXP_100: u32 = 1;
pub const EXP_800: u32 = 2;
pub const EXP_3000: u32 = 3;
pub const EXP_10000: u32 = 4;
pub const EXP_30000: u32 = 5;
pub const ITEM_USE_MAIL: u32 = 0;
pub const ITEM_USE_PARTY_MENU: u32 = 1;
pub const ITEM_USE_FIELD: u32 = 2;
pub const ITEM_USE_PBLOCK_CASE: u32 = 3;
pub const ITEM_USE_BAG_MENU: u32 = 4;
pub const ITEM_USE_PARTY_MENU_MOVES: u32 = 5;
pub const EFFECT_ITEM_RESTORE_HP: u32 = 1;
pub const EFFECT_ITEM_CURE_STATUS: u32 = 2;
pub const EFFECT_ITEM_HEAL_AND_CURE_STATUS: u32 = 3;
pub const EFFECT_ITEM_INCREASE_STAT: u32 = 4;
pub const EFFECT_ITEM_SET_MIST: u32 = 5;
pub const EFFECT_ITEM_SET_FOCUS_ENERGY: u32 = 6;
pub const EFFECT_ITEM_ESCAPE: u32 = 7;
pub const EFFECT_ITEM_THROW_BALL: u32 = 8;
pub const EFFECT_ITEM_REVIVE: u32 = 9;
pub const EFFECT_ITEM_RESTORE_PP: u32 = 10;
pub const EFFECT_ITEM_INCREASE_ALL_STATS: u32 = 11;
pub const EFFECT_ITEM_USE_POKE_FLUTE: u32 = 12;
pub const EFFECT_ITEM_ENIGMA_BERRY_EREADER: u32 = 1;
pub const FREE_EXTRA_SEEN_FLAGS_SAVEBLOCK1: u32 = 0;
pub const FREE_TRAINER_HILL: u32 = 0;
pub const FREE_MYSTERY_EVENT_BUFFERS: u32 = 0;
pub const FREE_MATCH_CALL: u32 = 0;
pub const FREE_UNION_ROOM_CHAT: u32 = 0;
pub const FREE_ENIGMA_BERRY: u32 = 0;
pub const FREE_LINK_BATTLE_RECORDS: u32 = 0;
pub const FREE_MYSTERY_GIFT: u32 = 0;
pub const FREE_BATTLE_TOWER_E_READER: u32 = 0;
pub const FREE_POKEMON_JUMP: u32 = 0;
pub const FREE_RECORD_MIXING_HALL_RECORDS: u32 = 0;
pub const FREE_EXTRA_SEEN_FLAGS_SAVEBLOCK2: u32 = 0;
pub const DOME_TOURNAMENT_TRAINERS_COUNT: u32 = 16;
pub const BATTLE_TOWER_RECORD_COUNT: u32 = 5;
pub const GAME_STAT_SAVED_GAME: u32 = 0;
pub const GAME_STAT_FIRST_HOF_PLAY_TIME: u32 = 1;
pub const GAME_STAT_STARTED_TRENDS: u32 = 2;
pub const GAME_STAT_PLANTED_BERRIES: u32 = 3;
pub const GAME_STAT_TRADED_BIKES: u32 = 4;
pub const GAME_STAT_STEPS: u32 = 5;
pub const GAME_STAT_GOT_INTERVIEWED: u32 = 6;
pub const GAME_STAT_TOTAL_BATTLES: u32 = 7;
pub const GAME_STAT_WILD_BATTLES: u32 = 8;
pub const GAME_STAT_TRAINER_BATTLES: u32 = 9;
pub const GAME_STAT_ENTERED_HOF: u32 = 10;
pub const GAME_STAT_POKEMON_CAPTURES: u32 = 11;
pub const GAME_STAT_FISHING_ENCOUNTERS: u32 = 12;
pub const GAME_STAT_HATCHED_EGGS: u32 = 13;
pub const GAME_STAT_EVOLVED_POKEMON: u32 = 14;
pub const GAME_STAT_USED_POKECENTER: u32 = 15;
pub const GAME_STAT_RESTED_AT_HOME: u32 = 16;
pub const GAME_STAT_ENTERED_SAFARI_ZONE: u32 = 17;
pub const GAME_STAT_USED_CUT: u32 = 18;
pub const GAME_STAT_USED_ROCK_SMASH: u32 = 19;
pub const GAME_STAT_MOVED_SECRET_BASE: u32 = 20;
pub const GAME_STAT_POKEMON_TRADES: u32 = 21;
pub const GAME_STAT_UNKNOWN_22: u32 = 22;
pub const GAME_STAT_LINK_BATTLE_WINS: u32 = 23;
pub const GAME_STAT_LINK_BATTLE_LOSSES: u32 = 24;
pub const GAME_STAT_LINK_BATTLE_DRAWS: u32 = 25;
pub const GAME_STAT_USED_SPLASH: u32 = 26;
pub const GAME_STAT_USED_STRUGGLE: u32 = 27;
pub const GAME_STAT_SLOT_JACKPOTS: u32 = 28;
pub const GAME_STAT_CONSECUTIVE_ROULETTE_WINS: u32 = 29;
pub const GAME_STAT_ENTERED_BATTLE_TOWER: u32 = 30;
pub const GAME_STAT_UNKNOWN_31: u32 = 31;
pub const GAME_STAT_BATTLE_TOWER_SINGLES_STREAK: u32 = 32;
pub const GAME_STAT_POKEBLOCKS: u32 = 33;
pub const GAME_STAT_POKEBLOCKS_WITH_FRIENDS: u32 = 34;
pub const GAME_STAT_WON_LINK_CONTEST: u32 = 35;
pub const GAME_STAT_ENTERED_CONTEST: u32 = 36;
pub const GAME_STAT_WON_CONTEST: u32 = 37;
pub const GAME_STAT_SHOPPED: u32 = 38;
pub const GAME_STAT_USED_ITEMFINDER: u32 = 39;
pub const GAME_STAT_GOT_RAINED_ON: u32 = 40;
pub const GAME_STAT_CHECKED_POKEDEX: u32 = 41;
pub const GAME_STAT_RECEIVED_RIBBONS: u32 = 42;
pub const GAME_STAT_JUMPED_DOWN_LEDGES: u32 = 43;
pub const GAME_STAT_WATCHED_TV: u32 = 44;
pub const GAME_STAT_CHECKED_CLOCK: u32 = 45;
pub const GAME_STAT_WON_POKEMON_LOTTERY: u32 = 46;
pub const GAME_STAT_USED_DAYCARE: u32 = 47;
pub const GAME_STAT_RODE_CABLE_CAR: u32 = 48;
pub const GAME_STAT_ENTERED_HOT_SPRINGS: u32 = 49;
pub const GAME_STAT_NUM_UNION_ROOM_BATTLES: u32 = 50;
pub const GAME_STAT_PLAYED_BERRY_CRUSH: u32 = 51;
pub const NUM_USED_GAME_STATS: u32 = 52;
pub const NUM_GAME_STATS: u32 = 64;
pub const MAPGRID_METATILE_ID_MASK: u32 = 1023;
pub const MAPGRID_COLLISION_MASK: u32 = 3072;
pub const MAPGRID_ELEVATION_MASK: u32 = 61440;
pub const MAPGRID_COLLISION_SHIFT: u32 = 10;
pub const MAPGRID_ELEVATION_SHIFT: u32 = 12;
pub const MAPGRID_UNDEFINED: u32 = 1023;
pub const METATILE_ATTR_BEHAVIOR_MASK: u32 = 255;
pub const METATILE_ATTR_LAYER_MASK: u32 = 61440;
pub const METATILE_ATTR_LAYER_SHIFT: u32 = 12;
pub const METATILE_ROW_WIDTH: u32 = 8;
pub const PLAYER_AVATAR_FLAG_ON_FOOT: u32 = 1;
pub const PLAYER_AVATAR_FLAG_MACH_BIKE: u32 = 2;
pub const PLAYER_AVATAR_FLAG_ACRO_BIKE: u32 = 4;
pub const PLAYER_AVATAR_FLAG_SURFING: u32 = 8;
pub const PLAYER_AVATAR_FLAG_UNDERWATER: u32 = 16;
pub const PLAYER_AVATAR_FLAG_CONTROLLABLE: u32 = 32;
pub const PLAYER_AVATAR_FLAG_FORCED_MOVE: u32 = 64;
pub const PLAYER_AVATAR_FLAG_DASH: u32 = 128;
pub const PLAYER_AVATAR_FLAG_BIKE: u32 = 6;
pub const FOLLOWER_INVISIBLE_FLAGS: u32 = 94;
pub const BERRY_NAME_LENGTH: u32 = 6;
pub const BERRY_ITEM_EFFECT_COUNT: u32 = 18;
pub const POKENEWS_NONE: u32 = 0;
pub const POKENEWS_SLATEPORT: u32 = 1;
pub const POKENEWS_GAME_CORNER: u32 = 2;
pub const POKENEWS_LILYCOVE: u32 = 3;
pub const POKENEWS_BLENDMASTER: u32 = 4;
pub const NUM_POKENEWS_TYPES: u32 = 4;
pub const POKENEWS_STATE_INACTIVE: u32 = 0;
pub const POKENEWS_STATE_UPCOMING: u32 = 1;
pub const POKENEWS_STATE_ACTIVE: u32 = 2;
pub const POKENEWS_COUNTDOWN: u32 = 4;
pub const TVSHOW_OFF_AIR: u32 = 0;
pub const TVGROUP_NORMAL_START: u32 = 1;
pub const TVSHOW_FAN_CLUB_LETTER: u32 = 1;
pub const TVSHOW_RECENT_HAPPENINGS: u32 = 2;
pub const TVSHOW_PKMN_FAN_CLUB_OPINIONS: u32 = 3;
pub const TVSHOW_DUMMY: u32 = 4;
pub const TVSHOW_NAME_RATER_SHOW: u32 = 5;
pub const TVSHOW_BRAVO_TRAINER_POKEMON_PROFILE: u32 = 6;
pub const TVSHOW_BRAVO_TRAINER_BATTLE_TOWER_PROFILE: u32 = 7;
pub const TVSHOW_CONTEST_LIVE_UPDATES: u32 = 8;
pub const TVSHOW_3_CHEERS_FOR_POKEBLOCKS: u32 = 9;
pub const TVSHOW_BATTLE_UPDATE: u32 = 10;
pub const TVSHOW_FAN_CLUB_SPECIAL: u32 = 11;
pub const TVSHOW_LILYCOVE_CONTEST_LADY: u32 = 12;
pub const TVGROUP_NORMAL_END: u32 = 20;
pub const TVGROUP_RECORD_MIX_START: u32 = 21;
pub const TVSHOW_POKEMON_TODAY_CAUGHT: u32 = 21;
pub const TVSHOW_SMART_SHOPPER: u32 = 22;
pub const TVSHOW_POKEMON_TODAY_FAILED: u32 = 23;
pub const TVSHOW_FISHING_ADVICE: u32 = 24;
pub const TVSHOW_WORLD_OF_MASTERS: u32 = 25;
pub const TVSHOW_TODAYS_RIVAL_TRAINER: u32 = 26;
pub const TVSHOW_TREND_WATCHER: u32 = 27;
pub const TVSHOW_TREASURE_INVESTIGATORS: u32 = 28;
pub const TVSHOW_FIND_THAT_GAMER: u32 = 29;
pub const TVSHOW_BREAKING_NEWS: u32 = 30;
pub const TVSHOW_SECRET_BASE_VISIT: u32 = 31;
pub const TVSHOW_LOTTO_WINNER: u32 = 32;
pub const TVSHOW_BATTLE_SEMINAR: u32 = 33;
pub const TVSHOW_TRAINER_FAN_CLUB: u32 = 34;
pub const TVSHOW_CUTIES: u32 = 35;
pub const TVSHOW_FRONTIER: u32 = 36;
pub const TVSHOW_NUMBER_ONE: u32 = 37;
pub const TVSHOW_SECRET_BASE_SECRETS: u32 = 38;
pub const TVSHOW_SAFARI_FAN_CLUB: u32 = 39;
pub const TVGROUP_RECORD_MIX_END: u32 = 40;
pub const TVGROUP_OUTBREAK_START: u32 = 41;
pub const TVSHOW_MASS_OUTBREAK: u32 = 41;
pub const TVGROUP_OUTBREAK_END: u32 = 60;
pub const NUM_NORMAL_TVSHOW_SLOTS: u32 = 5;
pub const TV_SHOWS_COUNT: u32 = 25;
pub const PLAYERS_HOUSE_TV_NONE: u32 = 0;
pub const PLAYERS_HOUSE_TV_LATI: u32 = 1;
pub const PLAYERS_HOUSE_TV_MOVIE: u32 = 2;
pub const NUM_CUTIES_RIBBONS: u32 = 4;
pub const SBSECRETS_STATE_INTRO: u32 = 0;
pub const SBSECRETS_STATE_DO_NEXT1: u32 = 1;
pub const SBSECRETS_STATE_DO_NEXT2: u32 = 2;
pub const SBSECRETS_STATE_TOOK_X_STEPS: u32 = 3;
pub const SBSECRETS_STATE_BASE_INTEREST_LOW: u32 = 4;
pub const SBSECRETS_STATE_BASE_INTEREST_MED: u32 = 5;
pub const SBSECRETS_STATE_BASE_INTEREST_HIGH: u32 = 6;
pub const SBSECRETS_STATE_OUTRO: u32 = 7;
pub const SBSECRETS_STATE_NOTHING_USED1: u32 = 8;
pub const SBSECRETS_STATE_NOTHING_USED2: u32 = 9;
pub const SBSECRETS_STATE_USED_CHAIR: u32 = 10;
pub const SBSECRETS_STATE_USED_BALLOON: u32 = 11;
pub const SBSECRETS_STATE_USED_TENT: u32 = 12;
pub const SBSECRETS_STATE_USED_PLANT: u32 = 13;
pub const SBSECRETS_STATE_USED_GOLD_SHIELD: u32 = 14;
pub const SBSECRETS_STATE_USED_SILVER_SHIELD: u32 = 15;
pub const SBSECRETS_STATE_USED_GLASS_ORNAMENT: u32 = 16;
pub const SBSECRETS_STATE_USED_TV: u32 = 17;
pub const SBSECRETS_STATE_USED_MUD_BALL: u32 = 18;
pub const SBSECRETS_STATE_USED_BAG: u32 = 19;
pub const SBSECRETS_STATE_USED_CUSHION: u32 = 20;
pub const SBSECRETS_STATE_HIT_CUSHION: u32 = 21;
pub const SBSECRETS_STATE_HUGGED_CUSHION: u32 = 22;
pub const SBSECRETS_STATE_BATTLED_WON: u32 = 23;
pub const SBSECRETS_STATE_BATTLED_LOST: u32 = 24;
pub const SBSECRETS_STATE_DECLINED_BATTLE: u32 = 25;
pub const SBSECRETS_STATE_USED_POSTER: u32 = 26;
pub const SBSECRETS_STATE_USED_NOTE_MAT: u32 = 27;
pub const SBSECRETS_STATE_BATTLED_DRAW: u32 = 28;
pub const SBSECRETS_STATE_USED_SPIN_MAT: u32 = 29;
pub const SBSECRETS_STATE_USED_SAND_ORNAMENT: u32 = 30;
pub const SBSECRETS_STATE_USED_DESK: u32 = 31;
pub const SBSECRETS_STATE_USED_BRICK: u32 = 32;
pub const SBSECRETS_STATE_USED_SOLID_BOARD: u32 = 33;
pub const SBSECRETS_STATE_USED_FENCE: u32 = 34;
pub const SBSECRETS_STATE_USED_GLITTER_MAT: u32 = 35;
pub const SBSECRETS_STATE_USED_TIRE: u32 = 36;
pub const SBSECRETS_STATE_USED_STAND: u32 = 37;
pub const SBSECRETS_STATE_USED_BREAKABLE_DOOR: u32 = 38;
pub const SBSECRETS_STATE_USED_DOLL: u32 = 39;
pub const SBSECRETS_STATE_USED_SLIDE: u32 = 40;
pub const SBSECRETS_STATE_DECLINED_SLIDE: u32 = 41;
pub const SBSECRETS_STATE_USED_JUMP_MAT: u32 = 42;
pub const SBSECRETS_NUM_STATES: u32 = 43;
pub const SECRET_BASE_USED_CHAIR: u32 = 1;
pub const SECRET_BASE_USED_BALLOON: u32 = 2;
pub const SECRET_BASE_USED_TENT: u32 = 4;
pub const SECRET_BASE_USED_PLANT: u32 = 8;
pub const SECRET_BASE_USED_GOLD_SHIELD: u32 = 16;
pub const SECRET_BASE_USED_SILVER_SHIELD: u32 = 32;
pub const SECRET_BASE_USED_GLASS_ORNAMENT: u32 = 64;
pub const SECRET_BASE_USED_TV: u32 = 128;
pub const SECRET_BASE_USED_MUD_BALL: u32 = 256;
pub const SECRET_BASE_USED_BAG: u32 = 512;
pub const SECRET_BASE_USED_CUSHION: u32 = 1024;
pub const SECRET_BASE_BATTLED_WON: u32 = 2048;
pub const SECRET_BASE_BATTLED_LOST: u32 = 4096;
pub const SECRET_BASE_DECLINED_BATTLE: u32 = 8192;
pub const SECRET_BASE_USED_POSTER: u32 = 16384;
pub const SECRET_BASE_USED_NOTE_MAT: u32 = 32768;
pub const SECRET_BASE_BATTLED_DRAW: u32 = 1;
pub const SECRET_BASE_USED_SPIN_MAT: u32 = 2;
pub const SECRET_BASE_USED_SAND_ORNAMENT: u32 = 4;
pub const SECRET_BASE_USED_DESK: u32 = 8;
pub const SECRET_BASE_USED_BRICK: u32 = 16;
pub const SECRET_BASE_USED_SOLID_BOARD: u32 = 32;
pub const SECRET_BASE_USED_FENCE: u32 = 64;
pub const SECRET_BASE_USED_GLITTER_MAT: u32 = 128;
pub const SECRET_BASE_USED_TIRE: u32 = 256;
pub const SECRET_BASE_USED_STAND: u32 = 512;
pub const SECRET_BASE_USED_BREAKABLE_DOOR: u32 = 1024;
pub const SECRET_BASE_USED_DOLL: u32 = 2048;
pub const SECRET_BASE_USED_SLIDE: u32 = 4096;
pub const SECRET_BASE_DECLINED_SLIDE: u32 = 8192;
pub const SECRET_BASE_USED_JUMP_MAT: u32 = 16384;
pub const SECRET_BASE_UNUSED_FLAG: u32 = 32768;
pub const NUM_SECRET_BASE_FLAGS: u32 = 32;
pub const CONTESTLIVE_STATE_INTRO: u32 = 0;
pub const CONTESTLIVE_STATE_WON_BOTH_ROUNDS: u32 = 1;
pub const CONTESTLIVE_STATE_BETTER_ROUND2: u32 = 2;
pub const CONTESTLIVE_STATE_EQUAL_ROUNDS: u32 = 3;
pub const CONTESTLIVE_STATE_BETTER_ROUND1: u32 = 4;
pub const CONTESTLIVE_STATE_GOT_NERVOUS: u32 = 5;
pub const CONTESTLIVE_STATE_STARTLED_OTHER: u32 = 6;
pub const CONTESTLIVE_STATE_USED_COMBO: u32 = 7;
pub const CONTESTLIVE_STATE_EXCITING_APPEAL: u32 = 8;
pub const CONTESTLIVE_STATE_COOL: u32 = 9;
pub const CONTESTLIVE_STATE_BEAUTIFUL: u32 = 10;
pub const CONTESTLIVE_STATE_CUTE: u32 = 11;
pub const CONTESTLIVE_STATE_SMART: u32 = 12;
pub const CONTESTLIVE_STATE_TOUGH: u32 = 13;
pub const CONTESTLIVE_STATE_VERY_EXCITING_APPEAL: u32 = 14;
pub const CONTESTLIVE_STATE_VERY_COOL: u32 = 15;
pub const CONTESTLIVE_STATE_VERY_BEAUTIFUL: u32 = 16;
pub const CONTESTLIVE_STATE_VERY_CUTE: u32 = 17;
pub const CONTESTLIVE_STATE_VERY_SMART: u32 = 18;
pub const CONTESTLIVE_STATE_VERY_TOUGH: u32 = 19;
pub const CONTESTLIVE_STATE_TOOK_BREAK: u32 = 20;
pub const CONTESTLIVE_STATE_GOT_STARTLED: u32 = 21;
pub const CONTESTLIVE_STATE_USED_MOVE: u32 = 22;
pub const CONTESTLIVE_STATE_TALK_ABOUT_LOSER: u32 = 23;
pub const CONTESTLIVE_STATE_NO_APPEALS: u32 = 24;
pub const CONTESTLIVE_STATE_LAST_BOTH: u32 = 25;
pub const CONTESTLIVE_STATE_NOT_EXCITING_ENOUGH: u32 = 26;
pub const CONTESTLIVE_STATE_LOST_AFTER_ROUND1_WIN: u32 = 27;
pub const CONTESTLIVE_STATE_NO_EXCITING_APPEALS: u32 = 28;
pub const CONTESTLIVE_STATE_LOST_SMALL_MARGIN: u32 = 29;
pub const CONTESTLIVE_STATE_REPEATED_APPEALS: u32 = 30;
pub const CONTESTLIVE_STATE_LOST: u32 = 31;
pub const CONTESTLIVE_STATE_OUTRO: u32 = 32;
pub const CONTESTLIVE_FLAG_EXCITING_APPEAL: u32 = 1;
pub const CONTESTLIVE_FLAG_GOT_NERVOUS: u32 = 2;
pub const CONTESTLIVE_FLAG_MAXED_EXCITEMENT: u32 = 4;
pub const CONTESTLIVE_FLAG_USED_COMBO: u32 = 8;
pub const CONTESTLIVE_FLAG_STARTLED_OTHER: u32 = 16;
pub const CONTESTLIVE_FLAG_SKIPPED_TURN: u32 = 32;
pub const CONTESTLIVE_FLAG_GOT_STARTLED: u32 = 64;
pub const CONTESTLIVE_FLAG_MADE_APPEAL: u32 = 128;
pub const CONTESTLIVE_FLAG_LOST: u32 = 1;
pub const CONTESTLIVE_FLAG_REPEATED_MOVE: u32 = 2;
pub const CONTESTLIVE_FLAG_LOST_SMALL_MARGIN: u32 = 4;
pub const CONTESTLIVE_FLAG_NO_EXCITEMENT: u32 = 8;
pub const CONTESTLIVE_FLAG_BLEW_LEAD: u32 = 16;
pub const CONTESTLIVE_FLAG_MISSED_EXCITEMENT: u32 = 32;
pub const CONTESTLIVE_FLAG_LAST_BOTH_ROUNDS: u32 = 64;
pub const CONTESTLIVE_FLAG_NO_APPEALS: u32 = 128;
pub const SPOTCUTIES_STATE_INTRO: u32 = 0;
pub const SPOTCUTIES_STATE_RIBBONS_LOW: u32 = 1;
pub const SPOTCUTIES_STATE_RIBBONS_MID: u32 = 2;
pub const SPOTCUTIES_STATE_RIBBONS_HIGH: u32 = 3;
pub const SPOTCUTIES_STATE_RIBBON_INTRO: u32 = 4;
pub const SPOTCUTIES_STATE_RIBBON_CHAMPION: u32 = 5;
pub const SPOTCUTIES_STATE_RIBBON_COOL: u32 = 6;
pub const SPOTCUTIES_STATE_RIBBON_BEAUTY: u32 = 7;
pub const SPOTCUTIES_STATE_RIBBON_CUTE: u32 = 8;
pub const SPOTCUTIES_STATE_RIBBON_SMART: u32 = 9;
pub const SPOTCUTIES_STATE_RIBBON_TOUGH: u32 = 10;
pub const SPOTCUTIES_STATE_RIBBON_WINNING: u32 = 11;
pub const SPOTCUTIES_STATE_RIBBON_VICTORY: u32 = 12;
pub const SPOTCUTIES_STATE_RIBBON_ARTIST: u32 = 13;
pub const SPOTCUTIES_STATE_RIBBON_EFFORT: u32 = 14;
pub const SPOTCUTIES_STATE_OUTRO: u32 = 15;
pub const TRENDWATCHER_STATE_INTRO: u32 = 0;
pub const TRENDWATCHER_STATE_TAUGHT_MALE: u32 = 1;
pub const TRENDWATCHER_STATE_TAUGHT_FEMALE: u32 = 2;
pub const TRENDWATCHER_STATE_PHRASE_HOPELESS: u32 = 3;
pub const TRENDWATCHER_STATE_BIGGER_MALE: u32 = 4;
pub const TRENDWATCHER_STATE_BIGGER_FEMALE: u32 = 5;
pub const TRENDWATCHER_STATE_OUTRO: u32 = 6;
pub const CONTESTLADYLIVE_STATE_INTRO: u32 = 0;
pub const CONTESTLADYLIVE_STATE_WON: u32 = 1;
pub const CONTESTLADYLIVE_STATE_LOST: u32 = 2;
pub const CONTESTLADYLIVE_STATE_LOST_BADLY: u32 = 3;
pub const SMARTSHOPPER_STATE_INTRO: u32 = 0;
pub const SMARTSHOPPER_STATE_CLERK_NORMAL: u32 = 1;
pub const SMARTSHOPPER_STATE_RAND_COMMENT_1: u32 = 2;
pub const SMARTSHOPPER_STATE_RAND_COMMENT_2: u32 = 3;
pub const SMARTSHOPPER_STATE_RAND_COMMENT_3: u32 = 4;
pub const SMARTSHOPPER_STATE_RAND_COMMENT_4: u32 = 5;
pub const SMARTSHOPPER_STATE_SECOND_ITEM: u32 = 6;
pub const SMARTSHOPPER_STATE_THIRD_ITEM: u32 = 7;
pub const SMARTSHOPPER_STATE_DURING_SALE: u32 = 8;
pub const SMARTSHOPPER_STATE_OUTRO_NORMAL: u32 = 9;
pub const SMARTSHOPPER_STATE_IS_VIP: u32 = 10;
pub const SMARTSHOPPER_STATE_CLERK_MAX: u32 = 11;
pub const SMARTSHOPPER_STATE_OUTRO_MAX: u32 = 12;
pub const SMARTSHOPPER_NUM_ITEMS: u32 = 3;
pub const BRAVOTOWER_STATE_INTRO: u32 = 0;
pub const BRAVOTOWER_STATE_NEW_RECORD: u32 = 1;
pub const BRAVOTOWER_STATE_LOST: u32 = 2;
pub const BRAVOTOWER_STATE_WON: u32 = 3;
pub const BRAVOTOWER_STATE_LOST_FINAL: u32 = 4;
pub const BRAVOTOWER_STATE_SATISFIED: u32 = 5;
pub const BRAVOTOWER_STATE_UNSATISFIED: u32 = 6;
pub const BRAVOTOWER_STATE_UNUSED_1: u32 = 7;
pub const BRAVOTOWER_STATE_UNUSED_2: u32 = 8;
pub const BRAVOTOWER_STATE_UNUSED_3: u32 = 9;
pub const BRAVOTOWER_STATE_UNUSED_4: u32 = 10;
pub const BRAVOTOWER_STATE_RESPONSE: u32 = 11;
pub const BRAVOTOWER_STATE_RESPONSE_SATISFIED: u32 = 12;
pub const BRAVOTOWER_STATE_RESPONSE_UNSATISFIED: u32 = 13;
pub const BRAVOTOWER_STATE_OUTRO: u32 = 14;
pub const MAX_SPRITES: u32 = 64;
pub const SPRITE_NONE: u32 = 255;
pub const TAG_NONE: u32 = 65535;
pub const NO_ANCHOR: u32 = 2048;
pub const AFFINEANIMCMDTYPE_LOOP: u32 = 32765;
pub const AFFINEANIMCMDTYPE_JUMP: u32 = 32766;
pub const AFFINEANIMCMDTYPE_END: u32 = 32767;
pub const MAPSEC_LITTLEROOT_TOWN: u32 = 0;
pub const MAPSEC_OLDALE_TOWN: u32 = 1;
pub const MAPSEC_DEWFORD_TOWN: u32 = 2;
pub const MAPSEC_LAVARIDGE_TOWN: u32 = 3;
pub const MAPSEC_FALLARBOR_TOWN: u32 = 4;
pub const MAPSEC_VERDANTURF_TOWN: u32 = 5;
pub const MAPSEC_PACIFIDLOG_TOWN: u32 = 6;
pub const MAPSEC_PETALBURG_CITY: u32 = 7;
pub const MAPSEC_SLATEPORT_CITY: u32 = 8;
pub const MAPSEC_MAUVILLE_CITY: u32 = 9;
pub const MAPSEC_RUSTBORO_CITY: u32 = 10;
pub const MAPSEC_FORTREE_CITY: u32 = 11;
pub const MAPSEC_LILYCOVE_CITY: u32 = 12;
pub const MAPSEC_MOSSDEEP_CITY: u32 = 13;
pub const MAPSEC_SOOTOPOLIS_CITY: u32 = 14;
pub const MAPSEC_EVER_GRANDE_CITY: u32 = 15;
pub const MAPSEC_ROUTE_101: u32 = 16;
pub const MAPSEC_ROUTE_102: u32 = 17;
pub const MAPSEC_ROUTE_103: u32 = 18;
pub const MAPSEC_ROUTE_104: u32 = 19;
pub const MAPSEC_ROUTE_105: u32 = 20;
pub const MAPSEC_ROUTE_106: u32 = 21;
pub const MAPSEC_ROUTE_107: u32 = 22;
pub const MAPSEC_ROUTE_108: u32 = 23;
pub const MAPSEC_ROUTE_109: u32 = 24;
pub const MAPSEC_ROUTE_110: u32 = 25;
pub const MAPSEC_ROUTE_111: u32 = 26;
pub const MAPSEC_ROUTE_112: u32 = 27;
pub const MAPSEC_ROUTE_113: u32 = 28;
pub const MAPSEC_ROUTE_114: u32 = 29;
pub const MAPSEC_ROUTE_115: u32 = 30;
pub const MAPSEC_ROUTE_116: u32 = 31;
pub const MAPSEC_ROUTE_117: u32 = 32;
pub const MAPSEC_ROUTE_118: u32 = 33;
pub const MAPSEC_ROUTE_119: u32 = 34;
pub const MAPSEC_ROUTE_120: u32 = 35;
pub const MAPSEC_ROUTE_121: u32 = 36;
pub const MAPSEC_ROUTE_122: u32 = 37;
pub const MAPSEC_ROUTE_123: u32 = 38;
pub const MAPSEC_ROUTE_124: u32 = 39;
pub const MAPSEC_ROUTE_125: u32 = 40;
pub const MAPSEC_ROUTE_126: u32 = 41;
pub const MAPSEC_ROUTE_127: u32 = 42;
pub const MAPSEC_ROUTE_128: u32 = 43;
pub const MAPSEC_ROUTE_129: u32 = 44;
pub const MAPSEC_ROUTE_130: u32 = 45;
pub const MAPSEC_ROUTE_131: u32 = 46;
pub const MAPSEC_ROUTE_132: u32 = 47;
pub const MAPSEC_ROUTE_133: u32 = 48;
pub const MAPSEC_ROUTE_134: u32 = 49;
pub const MAPSEC_UNDERWATER_124: u32 = 50;
pub const MAPSEC_UNDERWATER_126: u32 = 51;
pub const MAPSEC_UNDERWATER_127: u32 = 52;
pub const MAPSEC_UNDERWATER_128: u32 = 53;
pub const MAPSEC_UNDERWATER_SOOTOPOLIS: u32 = 54;
pub const MAPSEC_GRANITE_CAVE: u32 = 55;
pub const MAPSEC_MT_CHIMNEY: u32 = 56;
pub const MAPSEC_SAFARI_ZONE: u32 = 57;
pub const MAPSEC_BATTLE_FRONTIER: u32 = 58;
pub const MAPSEC_PETALBURG_WOODS: u32 = 59;
pub const MAPSEC_RUSTURF_TUNNEL: u32 = 60;
pub const MAPSEC_ABANDONED_SHIP: u32 = 61;
pub const MAPSEC_NEW_MAUVILLE: u32 = 62;
pub const MAPSEC_METEOR_FALLS: u32 = 63;
pub const MAPSEC_METEOR_FALLS2: u32 = 64;
pub const MAPSEC_MT_PYRE: u32 = 65;
pub const MAPSEC_AQUA_HIDEOUT_OLD: u32 = 66;
pub const MAPSEC_SHOAL_CAVE: u32 = 67;
pub const MAPSEC_SEAFLOOR_CAVERN: u32 = 68;
pub const MAPSEC_UNDERWATER_SEAFLOOR_CAVERN: u32 = 69;
pub const MAPSEC_VICTORY_ROAD: u32 = 70;
pub const MAPSEC_MIRAGE_ISLAND: u32 = 71;
pub const MAPSEC_CAVE_OF_ORIGIN: u32 = 72;
pub const MAPSEC_SOUTHERN_ISLAND: u32 = 73;
pub const MAPSEC_FIERY_PATH: u32 = 74;
pub const MAPSEC_FIERY_PATH2: u32 = 75;
pub const MAPSEC_JAGGED_PASS: u32 = 76;
pub const MAPSEC_JAGGED_PASS2: u32 = 77;
pub const MAPSEC_SEALED_CHAMBER: u32 = 78;
pub const MAPSEC_UNDERWATER_SEALED_CHAMBER: u32 = 79;
pub const MAPSEC_SCORCHED_SLAB: u32 = 80;
pub const MAPSEC_ISLAND_CAVE: u32 = 81;
pub const MAPSEC_DESERT_RUINS: u32 = 82;
pub const MAPSEC_ANCIENT_TOMB: u32 = 83;
pub const MAPSEC_INSIDE_OF_TRUCK: u32 = 84;
pub const MAPSEC_SKY_PILLAR: u32 = 85;
pub const MAPSEC_SECRET_BASE: u32 = 86;
pub const MAPSEC_DYNAMIC: u32 = 87;
pub const MAPSEC_PALLET_TOWN: u32 = 88;
pub const MAPSEC_VIRIDIAN_CITY: u32 = 89;
pub const MAPSEC_PEWTER_CITY: u32 = 90;
pub const MAPSEC_CERULEAN_CITY: u32 = 91;
pub const MAPSEC_LAVENDER_TOWN: u32 = 92;
pub const MAPSEC_VERMILION_CITY: u32 = 93;
pub const MAPSEC_CELADON_CITY: u32 = 94;
pub const MAPSEC_FUCHSIA_CITY: u32 = 95;
pub const MAPSEC_CINNABAR_ISLAND: u32 = 96;
pub const MAPSEC_INDIGO_PLATEAU: u32 = 97;
pub const MAPSEC_SAFFRON_CITY: u32 = 98;
pub const MAPSEC_ROUTE_4_POKECENTER: u32 = 99;
pub const MAPSEC_ROUTE_10_POKECENTER: u32 = 100;
pub const MAPSEC_ROUTE_1: u32 = 101;
pub const MAPSEC_ROUTE_2: u32 = 102;
pub const MAPSEC_ROUTE_3: u32 = 103;
pub const MAPSEC_ROUTE_4: u32 = 104;
pub const MAPSEC_ROUTE_5: u32 = 105;
pub const MAPSEC_ROUTE_6: u32 = 106;
pub const MAPSEC_ROUTE_7: u32 = 107;
pub const MAPSEC_ROUTE_8: u32 = 108;
pub const MAPSEC_ROUTE_9: u32 = 109;
pub const MAPSEC_ROUTE_10: u32 = 110;
pub const MAPSEC_ROUTE_11: u32 = 111;
pub const MAPSEC_ROUTE_12: u32 = 112;
pub const MAPSEC_ROUTE_13: u32 = 113;
pub const MAPSEC_ROUTE_14: u32 = 114;
pub const MAPSEC_ROUTE_15: u32 = 115;
pub const MAPSEC_ROUTE_16: u32 = 116;
pub const MAPSEC_ROUTE_17: u32 = 117;
pub const MAPSEC_ROUTE_18: u32 = 118;
pub const MAPSEC_ROUTE_19: u32 = 119;
pub const MAPSEC_ROUTE_20: u32 = 120;
pub const MAPSEC_ROUTE_21: u32 = 121;
pub const MAPSEC_ROUTE_22: u32 = 122;
pub const MAPSEC_ROUTE_23: u32 = 123;
pub const MAPSEC_ROUTE_24: u32 = 124;
pub const MAPSEC_ROUTE_25: u32 = 125;
pub const MAPSEC_VIRIDIAN_FOREST: u32 = 126;
pub const MAPSEC_MT_MOON: u32 = 127;
pub const MAPSEC_S_S_ANNE: u32 = 128;
pub const MAPSEC_UNDERGROUND_PATH: u32 = 129;
pub const MAPSEC_UNDERGROUND_PATH_2: u32 = 130;
pub const MAPSEC_DIGLETTS_CAVE: u32 = 131;
pub const MAPSEC_KANTO_VICTORY_ROAD: u32 = 132;
pub const MAPSEC_ROCKET_HIDEOUT: u32 = 133;
pub const MAPSEC_SILPH_CO: u32 = 134;
pub const MAPSEC_POKEMON_MANSION: u32 = 135;
pub const MAPSEC_KANTO_SAFARI_ZONE: u32 = 136;
pub const MAPSEC_POKEMON_LEAGUE: u32 = 137;
pub const MAPSEC_ROCK_TUNNEL: u32 = 138;
pub const MAPSEC_SEAFOAM_ISLANDS: u32 = 139;
pub const MAPSEC_POKEMON_TOWER: u32 = 140;
pub const MAPSEC_CERULEAN_CAVE: u32 = 141;
pub const MAPSEC_POWER_PLANT: u32 = 142;
pub const MAPSEC_ONE_ISLAND: u32 = 143;
pub const MAPSEC_TWO_ISLAND: u32 = 144;
pub const MAPSEC_THREE_ISLAND: u32 = 145;
pub const MAPSEC_FOUR_ISLAND: u32 = 146;
pub const MAPSEC_FIVE_ISLAND: u32 = 147;
pub const MAPSEC_SEVEN_ISLAND: u32 = 148;
pub const MAPSEC_SIX_ISLAND: u32 = 149;
pub const MAPSEC_KINDLE_ROAD: u32 = 150;
pub const MAPSEC_TREASURE_BEACH: u32 = 151;
pub const MAPSEC_CAPE_BRINK: u32 = 152;
pub const MAPSEC_BOND_BRIDGE: u32 = 153;
pub const MAPSEC_THREE_ISLE_PORT: u32 = 154;
pub const MAPSEC_SEVII_ISLE_6: u32 = 155;
pub const MAPSEC_SEVII_ISLE_7: u32 = 156;
pub const MAPSEC_SEVII_ISLE_8: u32 = 157;
pub const MAPSEC_SEVII_ISLE_9: u32 = 158;
pub const MAPSEC_RESORT_GORGEOUS: u32 = 159;
pub const MAPSEC_WATER_LABYRINTH: u32 = 160;
pub const MAPSEC_FIVE_ISLE_MEADOW: u32 = 161;
pub const MAPSEC_MEMORIAL_PILLAR: u32 = 162;
pub const MAPSEC_OUTCAST_ISLAND: u32 = 163;
pub const MAPSEC_GREEN_PATH: u32 = 164;
pub const MAPSEC_WATER_PATH: u32 = 165;
pub const MAPSEC_RUIN_VALLEY: u32 = 166;
pub const MAPSEC_TRAINER_TOWER: u32 = 167;
pub const MAPSEC_CANYON_ENTRANCE: u32 = 168;
pub const MAPSEC_SEVAULT_CANYON: u32 = 169;
pub const MAPSEC_TANOBY_RUINS: u32 = 170;
pub const MAPSEC_SEVII_ISLE_22: u32 = 171;
pub const MAPSEC_SEVII_ISLE_23: u32 = 172;
pub const MAPSEC_SEVII_ISLE_24: u32 = 173;
pub const MAPSEC_NAVEL_ROCK_FRLG: u32 = 174;
pub const MAPSEC_MT_EMBER: u32 = 175;
pub const MAPSEC_BERRY_FOREST: u32 = 176;
pub const MAPSEC_ICEFALL_CAVE: u32 = 177;
pub const MAPSEC_ROCKET_WAREHOUSE: u32 = 178;
pub const MAPSEC_TRAINER_TOWER_2: u32 = 179;
pub const MAPSEC_DOTTED_HOLE: u32 = 180;
pub const MAPSEC_LOST_CAVE: u32 = 181;
pub const MAPSEC_PATTERN_BUSH: u32 = 182;
pub const MAPSEC_ALTERING_CAVE_FRLG: u32 = 183;
pub const MAPSEC_TANOBY_CHAMBERS: u32 = 184;
pub const MAPSEC_THREE_ISLE_PATH: u32 = 185;
pub const MAPSEC_TANOBY_KEY: u32 = 186;
pub const MAPSEC_BIRTH_ISLAND_FRLG: u32 = 187;
pub const MAPSEC_MONEAN_CHAMBER: u32 = 188;
pub const MAPSEC_LIPTOO_CHAMBER: u32 = 189;
pub const MAPSEC_WEEPTH_CHAMBER: u32 = 190;
pub const MAPSEC_DILFORD_CHAMBER: u32 = 191;
pub const MAPSEC_SCUFIB_CHAMBER: u32 = 192;
pub const MAPSEC_RIXY_CHAMBER: u32 = 193;
pub const MAPSEC_VIAPOIS_CHAMBER: u32 = 194;
pub const MAPSEC_EMBER_SPA: u32 = 195;
pub const MAPSEC_SPECIAL_AREA: u32 = 196;
pub const MAPSEC_AQUA_HIDEOUT: u32 = 197;
pub const MAPSEC_MAGMA_HIDEOUT: u32 = 198;
pub const MAPSEC_MIRAGE_TOWER: u32 = 199;
pub const MAPSEC_BIRTH_ISLAND: u32 = 200;
pub const MAPSEC_FARAWAY_ISLAND: u32 = 201;
pub const MAPSEC_ARTISAN_CAVE: u32 = 202;
pub const MAPSEC_MARINE_CAVE: u32 = 203;
pub const MAPSEC_UNDERWATER_MARINE_CAVE: u32 = 204;
pub const MAPSEC_TERRA_CAVE: u32 = 205;
pub const MAPSEC_UNDERWATER_105: u32 = 206;
pub const MAPSEC_UNDERWATER_125: u32 = 207;
pub const MAPSEC_UNDERWATER_129: u32 = 208;
pub const MAPSEC_DESERT_UNDERPASS: u32 = 209;
pub const MAPSEC_ALTERING_CAVE: u32 = 210;
pub const MAPSEC_NAVEL_ROCK: u32 = 211;
pub const MAPSEC_TRAINER_HILL: u32 = 212;
pub const MAPSEC_NONE: u32 = 213;
pub const METLOC_SPECIAL_EGG: u32 = 253;
pub const METLOC_IN_GAME_TRADE: u32 = 254;
pub const METLOC_FATEFUL_ENCOUNTER: u32 = 255;
pub const KANTO_MAPSEC_START: u32 = 88;
pub const KANTO_MAPSEC_END: u32 = 196;
pub const KANTO_MAPSEC_COUNT: u32 = 109;
pub const MAX_COMBO_MOVES: u32 = 5;
pub const FORM_SPECIES_END: u32 = 65535;
pub const ANIM_HARDY: u32 = 0;
pub const ANIM_LONELY: u32 = 3;
pub const ANIM_BRAVE: u32 = 4;
pub const ANIM_ADAMANT: u32 = 5;
pub const ANIM_NAUGHTY: u32 = 10;
pub const ANIM_BOLD: u32 = 13;
pub const ANIM_DOCILE: u32 = 15;
pub const ANIM_RELAXED: u32 = 16;
pub const ANIM_IMPISH: u32 = 18;
pub const ANIM_LAX: u32 = 19;
pub const ANIM_TIMID: u32 = 20;
pub const ANIM_HASTY: u32 = 25;
pub const ANIM_SERIOUS: u32 = 27;
pub const ANIM_JOLLY: u32 = 28;
pub const ANIM_NAIVE: u32 = 29;
pub const ANIM_MODEST: u32 = 33;
pub const ANIM_MILD: u32 = 36;
pub const ANIM_QUIET: u32 = 37;
pub const ANIM_BASHFUL: u32 = 39;
pub const ANIM_RASH: u32 = 42;
pub const ANIM_CALM: u32 = 45;
pub const ANIM_GENTLE: u32 = 46;
pub const ANIM_SASSY: u32 = 47;
pub const ANIM_CAREFUL: u32 = 48;
pub const ANIM_QUIRKY: u32 = 53;
pub const PALACE_TARGET_STRONGER: u32 = 0;
pub const PALACE_TARGET_WEAKER: u32 = 1;
pub const PALACE_TARGET_RANDOM: u32 = 2;
pub const SPINDA_SPOT_WIDTH: u32 = 16;
pub const SPINDA_SPOT_HEIGHT: u32 = 16;
pub const NUM_UNOWN_FORMS: u32 = 28;
pub const LINK_B_RECORDS_COUNT: u32 = 5;
pub type wchar_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::core::ffi::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::core::mem::size_of::<max_align_t>() - 16usize];
    ["Alignment of max_align_t"][::core::mem::align_of::<max_align_t>() - 8usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::core::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::core::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 8usize];
};
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_longlong;
pub type __uint64_t = ::core::ffi::c_ulonglong;
pub type __int_least8_t = ::core::ffi::c_schar;
pub type __uint_least8_t = ::core::ffi::c_uchar;
pub type __int_least16_t = ::core::ffi::c_short;
pub type __uint_least16_t = ::core::ffi::c_ushort;
pub type __int_least32_t = ::core::ffi::c_int;
pub type __uint_least32_t = ::core::ffi::c_uint;
pub type __int_least64_t = ::core::ffi::c_longlong;
pub type __uint_least64_t = ::core::ffi::c_ulonglong;
pub type __intmax_t = ::core::ffi::c_longlong;
pub type __uintmax_t = ::core::ffi::c_ulonglong;
pub type __intptr_t = ::core::ffi::c_int;
pub type __uintptr_t = ::core::ffi::c_uint;
pub type wint_t = ::core::ffi::c_int;
pub type __blkcnt_t = ::core::ffi::c_long;
pub type __blksize_t = ::core::ffi::c_long;
pub type __fsblkcnt_t = __uint64_t;
pub type __fsfilcnt_t = __uint32_t;
pub type _off_t = ::core::ffi::c_long;
pub type __pid_t = ::core::ffi::c_int;
pub type __dev_t = ::core::ffi::c_short;
pub type __uid_t = ::core::ffi::c_ushort;
pub type __gid_t = ::core::ffi::c_ushort;
pub type __id_t = __uint32_t;
pub type __ino_t = ::core::ffi::c_ushort;
pub type __mode_t = __uint32_t;
pub type _off64_t = ::core::ffi::c_longlong;
pub type __off_t = _off_t;
pub type __loff_t = _off64_t;
pub type __key_t = ::core::ffi::c_long;
pub type _fpos_t = ::core::ffi::c_long;
pub type __size_t = ::core::ffi::c_uint;
pub type _ssize_t = ::core::ffi::c_int;
pub type __ssize_t = _ssize_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _mbstate_t {
    pub __count: ::core::ffi::c_int,
    pub __value: _mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _mbstate_t__bindgen_ty_1 {
    pub __wch: wint_t,
    pub __wchb: [::core::ffi::c_uchar; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _mbstate_t__bindgen_ty_1"]
        [::core::mem::size_of::<_mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of _mbstate_t__bindgen_ty_1"]
        [::core::mem::align_of::<_mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: _mbstate_t__bindgen_ty_1::__wch"]
        [::core::mem::offset_of!(_mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: _mbstate_t__bindgen_ty_1::__wchb"]
        [::core::mem::offset_of!(_mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _mbstate_t"][::core::mem::size_of::<_mbstate_t>() - 8usize];
    ["Alignment of _mbstate_t"][::core::mem::align_of::<_mbstate_t>() - 4usize];
    ["Offset of field: _mbstate_t::__count"][::core::mem::offset_of!(_mbstate_t, __count) - 0usize];
    ["Offset of field: _mbstate_t::__value"][::core::mem::offset_of!(_mbstate_t, __value) - 4usize];
};
pub type _iconv_t = *mut ::core::ffi::c_void;
pub type __clock_t = ::core::ffi::c_ulong;
pub type __time_t = __int_least64_t;
pub type __clockid_t = ::core::ffi::c_ulong;
pub type __daddr_t = ::core::ffi::c_long;
pub type __timer_t = ::core::ffi::c_ulong;
pub type __sa_family_t = __uint8_t;
pub type __socklen_t = __uint32_t;
pub type __nl_item = ::core::ffi::c_int;
pub type __nlink_t = ::core::ffi::c_ushort;
pub type __suseconds_t = ::core::ffi::c_long;
pub type __useconds_t = ::core::ffi::c_ulong;
pub type __va_list = u32;
pub type __ULong = ::core::ffi::c_ulong;
pub type _LOCK_T = ::core::ffi::c_int;
pub type _LOCK_RECURSIVE_T = ::core::ffi::c_int;
pub type _flock_t = _LOCK_RECURSIVE_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Bigint {
    pub _next: *mut _Bigint,
    pub _k: ::core::ffi::c_int,
    pub _maxwds: ::core::ffi::c_int,
    pub _sign: ::core::ffi::c_int,
    pub _wds: ::core::ffi::c_int,
    pub _x: [__ULong; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Bigint"][::core::mem::size_of::<_Bigint>() - 24usize];
    ["Alignment of _Bigint"][::core::mem::align_of::<_Bigint>() - 4usize];
    ["Offset of field: _Bigint::_next"][::core::mem::offset_of!(_Bigint, _next) - 0usize];
    ["Offset of field: _Bigint::_k"][::core::mem::offset_of!(_Bigint, _k) - 4usize];
    ["Offset of field: _Bigint::_maxwds"][::core::mem::offset_of!(_Bigint, _maxwds) - 8usize];
    ["Offset of field: _Bigint::_sign"][::core::mem::offset_of!(_Bigint, _sign) - 12usize];
    ["Offset of field: _Bigint::_wds"][::core::mem::offset_of!(_Bigint, _wds) - 16usize];
    ["Offset of field: _Bigint::_x"][::core::mem::offset_of!(_Bigint, _x) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __tm {
    pub __tm_sec: ::core::ffi::c_int,
    pub __tm_min: ::core::ffi::c_int,
    pub __tm_hour: ::core::ffi::c_int,
    pub __tm_mday: ::core::ffi::c_int,
    pub __tm_mon: ::core::ffi::c_int,
    pub __tm_year: ::core::ffi::c_int,
    pub __tm_wday: ::core::ffi::c_int,
    pub __tm_yday: ::core::ffi::c_int,
    pub __tm_isdst: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __tm"][::core::mem::size_of::<__tm>() - 36usize];
    ["Alignment of __tm"][::core::mem::align_of::<__tm>() - 4usize];
    ["Offset of field: __tm::__tm_sec"][::core::mem::offset_of!(__tm, __tm_sec) - 0usize];
    ["Offset of field: __tm::__tm_min"][::core::mem::offset_of!(__tm, __tm_min) - 4usize];
    ["Offset of field: __tm::__tm_hour"][::core::mem::offset_of!(__tm, __tm_hour) - 8usize];
    ["Offset of field: __tm::__tm_mday"][::core::mem::offset_of!(__tm, __tm_mday) - 12usize];
    ["Offset of field: __tm::__tm_mon"][::core::mem::offset_of!(__tm, __tm_mon) - 16usize];
    ["Offset of field: __tm::__tm_year"][::core::mem::offset_of!(__tm, __tm_year) - 20usize];
    ["Offset of field: __tm::__tm_wday"][::core::mem::offset_of!(__tm, __tm_wday) - 24usize];
    ["Offset of field: __tm::__tm_yday"][::core::mem::offset_of!(__tm, __tm_yday) - 28usize];
    ["Offset of field: __tm::__tm_isdst"][::core::mem::offset_of!(__tm, __tm_isdst) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _on_exit_args {
    pub _fnargs: [*mut ::core::ffi::c_void; 32usize],
    pub _dso_handle: [*mut ::core::ffi::c_void; 32usize],
    pub _fntypes: __ULong,
    pub _is_cxa: __ULong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _on_exit_args"][::core::mem::size_of::<_on_exit_args>() - 264usize];
    ["Alignment of _on_exit_args"][::core::mem::align_of::<_on_exit_args>() - 4usize];
    ["Offset of field: _on_exit_args::_fnargs"]
        [::core::mem::offset_of!(_on_exit_args, _fnargs) - 0usize];
    ["Offset of field: _on_exit_args::_dso_handle"]
        [::core::mem::offset_of!(_on_exit_args, _dso_handle) - 128usize];
    ["Offset of field: _on_exit_args::_fntypes"]
        [::core::mem::offset_of!(_on_exit_args, _fntypes) - 256usize];
    ["Offset of field: _on_exit_args::_is_cxa"]
        [::core::mem::offset_of!(_on_exit_args, _is_cxa) - 260usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _atexit {
    pub _next: *mut _atexit,
    pub _ind: ::core::ffi::c_int,
    pub _fns: [::core::option::Option<unsafe extern "C" fn()>; 32usize],
    pub _on_exit_args: _on_exit_args,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _atexit"][::core::mem::size_of::<_atexit>() - 400usize];
    ["Alignment of _atexit"][::core::mem::align_of::<_atexit>() - 4usize];
    ["Offset of field: _atexit::_next"][::core::mem::offset_of!(_atexit, _next) - 0usize];
    ["Offset of field: _atexit::_ind"][::core::mem::offset_of!(_atexit, _ind) - 4usize];
    ["Offset of field: _atexit::_fns"][::core::mem::offset_of!(_atexit, _fns) - 8usize];
    ["Offset of field: _atexit::_on_exit_args"]
        [::core::mem::offset_of!(_atexit, _on_exit_args) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::core::ffi::c_uchar,
    pub _size: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sbuf"][::core::mem::size_of::<__sbuf>() - 8usize];
    ["Alignment of __sbuf"][::core::mem::align_of::<__sbuf>() - 4usize];
    ["Offset of field: __sbuf::_base"][::core::mem::offset_of!(__sbuf, _base) - 0usize];
    ["Offset of field: __sbuf::_size"][::core::mem::offset_of!(__sbuf, _size) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::core::ffi::c_uchar,
    pub _r: ::core::ffi::c_int,
    pub _w: ::core::ffi::c_int,
    pub _flags: ::core::ffi::c_short,
    pub _file: ::core::ffi::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::core::ffi::c_int,
    pub _cookie: *mut ::core::ffi::c_void,
    pub _read: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _reent,
            arg2: *mut ::core::ffi::c_void,
            arg3: *mut ::core::ffi::c_char,
            arg4: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub _write: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _reent,
            arg2: *mut ::core::ffi::c_void,
            arg3: *const ::core::ffi::c_char,
            arg4: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub _seek: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _reent,
            arg2: *mut ::core::ffi::c_void,
            arg3: _fpos_t,
            arg4: ::core::ffi::c_int,
        ) -> _fpos_t,
    >,
    pub _close: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _reent,
            arg2: *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int,
    >,
    pub _ub: __sbuf,
    pub _up: *mut ::core::ffi::c_uchar,
    pub _ur: ::core::ffi::c_int,
    pub _ubuf: [::core::ffi::c_uchar; 3usize],
    pub _nbuf: [::core::ffi::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::core::ffi::c_int,
    pub _offset: _off_t,
    pub _data: *mut _reent,
    pub _lock: _flock_t,
    pub _mbstate: _mbstate_t,
    pub _flags2: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sFILE"][::core::mem::size_of::<__sFILE>() - 104usize];
    ["Alignment of __sFILE"][::core::mem::align_of::<__sFILE>() - 4usize];
    ["Offset of field: __sFILE::_p"][::core::mem::offset_of!(__sFILE, _p) - 0usize];
    ["Offset of field: __sFILE::_r"][::core::mem::offset_of!(__sFILE, _r) - 4usize];
    ["Offset of field: __sFILE::_w"][::core::mem::offset_of!(__sFILE, _w) - 8usize];
    ["Offset of field: __sFILE::_flags"][::core::mem::offset_of!(__sFILE, _flags) - 12usize];
    ["Offset of field: __sFILE::_file"][::core::mem::offset_of!(__sFILE, _file) - 14usize];
    ["Offset of field: __sFILE::_bf"][::core::mem::offset_of!(__sFILE, _bf) - 16usize];
    ["Offset of field: __sFILE::_lbfsize"][::core::mem::offset_of!(__sFILE, _lbfsize) - 24usize];
    ["Offset of field: __sFILE::_cookie"][::core::mem::offset_of!(__sFILE, _cookie) - 28usize];
    ["Offset of field: __sFILE::_read"][::core::mem::offset_of!(__sFILE, _read) - 32usize];
    ["Offset of field: __sFILE::_write"][::core::mem::offset_of!(__sFILE, _write) - 36usize];
    ["Offset of field: __sFILE::_seek"][::core::mem::offset_of!(__sFILE, _seek) - 40usize];
    ["Offset of field: __sFILE::_close"][::core::mem::offset_of!(__sFILE, _close) - 44usize];
    ["Offset of field: __sFILE::_ub"][::core::mem::offset_of!(__sFILE, _ub) - 48usize];
    ["Offset of field: __sFILE::_up"][::core::mem::offset_of!(__sFILE, _up) - 56usize];
    ["Offset of field: __sFILE::_ur"][::core::mem::offset_of!(__sFILE, _ur) - 60usize];
    ["Offset of field: __sFILE::_ubuf"][::core::mem::offset_of!(__sFILE, _ubuf) - 64usize];
    ["Offset of field: __sFILE::_nbuf"][::core::mem::offset_of!(__sFILE, _nbuf) - 67usize];
    ["Offset of field: __sFILE::_lb"][::core::mem::offset_of!(__sFILE, _lb) - 68usize];
    ["Offset of field: __sFILE::_blksize"][::core::mem::offset_of!(__sFILE, _blksize) - 76usize];
    ["Offset of field: __sFILE::_offset"][::core::mem::offset_of!(__sFILE, _offset) - 80usize];
    ["Offset of field: __sFILE::_data"][::core::mem::offset_of!(__sFILE, _data) - 84usize];
    ["Offset of field: __sFILE::_lock"][::core::mem::offset_of!(__sFILE, _lock) - 88usize];
    ["Offset of field: __sFILE::_mbstate"][::core::mem::offset_of!(__sFILE, _mbstate) - 92usize];
    ["Offset of field: __sFILE::_flags2"][::core::mem::offset_of!(__sFILE, _flags2) - 100usize];
};
pub type __FILE = __sFILE;
unsafe extern "C" {
    pub static mut __sf: [__FILE; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _glue {
    pub _next: *mut _glue,
    pub _niobs: ::core::ffi::c_int,
    pub _iobs: *mut __FILE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _glue"][::core::mem::size_of::<_glue>() - 12usize];
    ["Alignment of _glue"][::core::mem::align_of::<_glue>() - 4usize];
    ["Offset of field: _glue::_next"][::core::mem::offset_of!(_glue, _next) - 0usize];
    ["Offset of field: _glue::_niobs"][::core::mem::offset_of!(_glue, _niobs) - 4usize];
    ["Offset of field: _glue::_iobs"][::core::mem::offset_of!(_glue, _iobs) - 8usize];
};
unsafe extern "C" {
    pub static mut __sglue: _glue;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rand48 {
    pub _seed: [::core::ffi::c_ushort; 3usize],
    pub _mult: [::core::ffi::c_ushort; 3usize],
    pub _add: ::core::ffi::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _rand48"][::core::mem::size_of::<_rand48>() - 14usize];
    ["Alignment of _rand48"][::core::mem::align_of::<_rand48>() - 2usize];
    ["Offset of field: _rand48::_seed"][::core::mem::offset_of!(_rand48, _seed) - 0usize];
    ["Offset of field: _rand48::_mult"][::core::mem::offset_of!(_rand48, _mult) - 6usize];
    ["Offset of field: _rand48::_add"][::core::mem::offset_of!(_rand48, _add) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _reent {
    pub _errno: ::core::ffi::c_int,
    pub _stdin: *mut __FILE,
    pub _stdout: *mut __FILE,
    pub _stderr: *mut __FILE,
    pub _inc: ::core::ffi::c_int,
    pub _emergency: [::core::ffi::c_char; 25usize],
    pub _locale: *mut __locale_t,
    pub __cleanup: ::core::option::Option<unsafe extern "C" fn(arg1: *mut _reent)>,
    pub _result: *mut _Bigint,
    pub _result_k: ::core::ffi::c_int,
    pub _p5s: *mut _Bigint,
    pub _freelist: *mut *mut _Bigint,
    pub _cvtlen: ::core::ffi::c_int,
    pub _cvtbuf: *mut ::core::ffi::c_char,
    pub _new: _reent__bindgen_ty_1,
    pub _sig_func: *mut ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _reent__bindgen_ty_1 {
    pub _reent: _reent__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _reent__bindgen_ty_1__bindgen_ty_1 {
    pub _strtok_last: *mut ::core::ffi::c_char,
    pub _asctime_buf: [::core::ffi::c_char; 26usize],
    pub _localtime_buf: __tm,
    pub _gamma_signgam: ::core::ffi::c_int,
    pub _rand_next: ::core::ffi::c_ulonglong,
    pub _r48: _rand48,
    pub _mblen_state: _mbstate_t,
    pub _mbtowc_state: _mbstate_t,
    pub _wctomb_state: _mbstate_t,
    pub _l64a_buf: [::core::ffi::c_char; 8usize],
    pub _signal_buf: [::core::ffi::c_char; 24usize],
    pub _getdate_err: ::core::ffi::c_int,
    pub _mbrlen_state: _mbstate_t,
    pub _mbrtowc_state: _mbstate_t,
    pub _mbsrtowcs_state: _mbstate_t,
    pub _wcrtomb_state: _mbstate_t,
    pub _wcsrtombs_state: _mbstate_t,
    pub _h_errno: ::core::ffi::c_int,
    pub _getlocalename_l_buf: [::core::ffi::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _reent__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<_reent__bindgen_ty_1__bindgen_ty_1>() - 232usize];
    ["Alignment of _reent__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<_reent__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: _reent__bindgen_ty_1__bindgen_ty_1::_strtok_last"]
        [::core::mem::offset_of!(_reent__bindgen_ty_1__bindgen_ty_1, _strtok_last) - 0usize];
    ["Offset of field: _reent__bindgen_ty_1__bindgen_ty_1::_asctime_buf"]
        [::core::mem::offset_of!(_reent__bindgen_ty_1__bindgen_ty_1, _asctime_buf) - 4usize];
    ["Offset of field: _reent__bindgen_ty_1__bindgen_ty_1::_localtime_buf"]
        [::core::mem::offset_of!(_reent__bindgen_ty_1__bindgen_ty_1, _localtime_buf) - 32usize];
    ["Offset of field: _reent__bindgen_ty_1__bindgen_ty_1::_gamma_signgam"]
        [::core::mem::offset_of!(_reent__bindgen_ty_1__bindgen_ty_1, _gamma_signgam) - 68usize];
    ["Offset of field: _reent__bindgen_ty_1__bindgen_ty_1::_rand_next"]
        [::core::mem::offset_of!(_reent__bindgen_ty_1__bindgen_ty_1, _rand_next) - 72usize];
    ["Offset of field: _reent__bindgen_ty_1__bindgen_ty_1::_r48"]
        [::core::mem::offset_of!(_reent__bindgen_ty_1__bindgen_ty_1, _r48) - 80usize];
    ["Offset of field: _reent__bindgen_ty_1__bindgen_ty_1::_mblen_state"]
        [::core::mem::offset_of!(_reent__bindgen_ty_1__bindgen_ty_1, _mblen_state) - 96usize];
    ["Offset of field: _reent__bindgen_ty_1__bindgen_ty_1::_mbtowc_state"]
        [::core::mem::offset_of!(_reent__bindgen_ty_1__bindgen_ty_1, _mbtowc_state) - 104usize];
    ["Offset of field: _reent__bindgen_ty_1__bindgen_ty_1::_wctomb_state"]
        [::core::mem::offset_of!(_reent__bindgen_ty_1__bindgen_ty_1, _wctomb_state) - 112usize];
    ["Offset of field: _reent__bindgen_ty_1__bindgen_ty_1::_l64a_buf"]
        [::core::mem::offset_of!(_reent__bindgen_ty_1__bindgen_ty_1, _l64a_buf) - 120usize];
    ["Offset of field: _reent__bindgen_ty_1__bindgen_ty_1::_signal_buf"]
        [::core::mem::offset_of!(_reent__bindgen_ty_1__bindgen_ty_1, _signal_buf) - 128usize];
    ["Offset of field: _reent__bindgen_ty_1__bindgen_ty_1::_getdate_err"]
        [::core::mem::offset_of!(_reent__bindgen_ty_1__bindgen_ty_1, _getdate_err) - 152usize];
    ["Offset of field: _reent__bindgen_ty_1__bindgen_ty_1::_mbrlen_state"]
        [::core::mem::offset_of!(_reent__bindgen_ty_1__bindgen_ty_1, _mbrlen_state) - 156usize];
    ["Offset of field: _reent__bindgen_ty_1__bindgen_ty_1::_mbrtowc_state"]
        [::core::mem::offset_of!(_reent__bindgen_ty_1__bindgen_ty_1, _mbrtowc_state) - 164usize];
    ["Offset of field: _reent__bindgen_ty_1__bindgen_ty_1::_mbsrtowcs_state"]
        [::core::mem::offset_of!(_reent__bindgen_ty_1__bindgen_ty_1, _mbsrtowcs_state) - 172usize];
    ["Offset of field: _reent__bindgen_ty_1__bindgen_ty_1::_wcrtomb_state"]
        [::core::mem::offset_of!(_reent__bindgen_ty_1__bindgen_ty_1, _wcrtomb_state) - 180usize];
    ["Offset of field: _reent__bindgen_ty_1__bindgen_ty_1::_wcsrtombs_state"]
        [::core::mem::offset_of!(_reent__bindgen_ty_1__bindgen_ty_1, _wcsrtombs_state) - 188usize];
    ["Offset of field: _reent__bindgen_ty_1__bindgen_ty_1::_h_errno"]
        [::core::mem::offset_of!(_reent__bindgen_ty_1__bindgen_ty_1, _h_errno) - 196usize];
    ["Offset of field: _reent__bindgen_ty_1__bindgen_ty_1::_getlocalename_l_buf"][::core::mem::offset_of!(
        _reent__bindgen_ty_1__bindgen_ty_1,
        _getlocalename_l_buf
    ) - 200usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _reent__bindgen_ty_1"][::core::mem::size_of::<_reent__bindgen_ty_1>() - 232usize];
    ["Alignment of _reent__bindgen_ty_1"][::core::mem::align_of::<_reent__bindgen_ty_1>() - 8usize];
    ["Offset of field: _reent__bindgen_ty_1::_reent"]
        [::core::mem::offset_of!(_reent__bindgen_ty_1, _reent) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _reent"][::core::mem::size_of::<_reent>() - 320usize];
    ["Alignment of _reent"][::core::mem::align_of::<_reent>() - 8usize];
    ["Offset of field: _reent::_errno"][::core::mem::offset_of!(_reent, _errno) - 0usize];
    ["Offset of field: _reent::_stdin"][::core::mem::offset_of!(_reent, _stdin) - 4usize];
    ["Offset of field: _reent::_stdout"][::core::mem::offset_of!(_reent, _stdout) - 8usize];
    ["Offset of field: _reent::_stderr"][::core::mem::offset_of!(_reent, _stderr) - 12usize];
    ["Offset of field: _reent::_inc"][::core::mem::offset_of!(_reent, _inc) - 16usize];
    ["Offset of field: _reent::_emergency"][::core::mem::offset_of!(_reent, _emergency) - 20usize];
    ["Offset of field: _reent::_locale"][::core::mem::offset_of!(_reent, _locale) - 48usize];
    ["Offset of field: _reent::__cleanup"][::core::mem::offset_of!(_reent, __cleanup) - 52usize];
    ["Offset of field: _reent::_result"][::core::mem::offset_of!(_reent, _result) - 56usize];
    ["Offset of field: _reent::_result_k"][::core::mem::offset_of!(_reent, _result_k) - 60usize];
    ["Offset of field: _reent::_p5s"][::core::mem::offset_of!(_reent, _p5s) - 64usize];
    ["Offset of field: _reent::_freelist"][::core::mem::offset_of!(_reent, _freelist) - 68usize];
    ["Offset of field: _reent::_cvtlen"][::core::mem::offset_of!(_reent, _cvtlen) - 72usize];
    ["Offset of field: _reent::_cvtbuf"][::core::mem::offset_of!(_reent, _cvtbuf) - 76usize];
    ["Offset of field: _reent::_new"][::core::mem::offset_of!(_reent, _new) - 80usize];
    ["Offset of field: _reent::_sig_func"][::core::mem::offset_of!(_reent, _sig_func) - 312usize];
};
unsafe extern "C" {
    pub static mut _impure_ptr: *mut _reent;
}
unsafe extern "C" {
    pub static mut _impure_data: _reent;
}
unsafe extern "C" {
    pub static mut __atexit: *mut _atexit;
}
unsafe extern "C" {
    pub static mut __atexit0: _atexit;
}
unsafe extern "C" {
    pub static mut __stdio_exit_handler: ::core::option::Option<unsafe extern "C" fn()>;
}
unsafe extern "C" {
    pub fn _reclaim_reent(arg1: *mut _reent);
}
unsafe extern "C" {
    pub fn _fwalk_sglue(
        arg1: *mut _reent,
        arg2: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut _reent, arg2: *mut __FILE) -> ::core::ffi::c_int,
        >,
        arg3: *mut _glue,
    ) -> ::core::ffi::c_int;
}
pub type locale_t = *mut __locale_t;
unsafe extern "C" {
    pub fn bcmp(
        arg1: *const ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn bcopy(
        arg1: *const ::core::ffi::c_void,
        arg2: *mut ::core::ffi::c_void,
        arg3: ::core::ffi::c_uint,
    );
}
unsafe extern "C" {
    pub fn bzero(arg1: *mut ::core::ffi::c_void, arg2: ::core::ffi::c_uint);
}
unsafe extern "C" {
    pub fn explicit_bzero(arg1: *mut ::core::ffi::c_void, arg2: usize);
}
unsafe extern "C" {
    pub fn ffs(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ffsl(arg1: ::core::ffi::c_long) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ffsll(arg1: ::core::ffi::c_longlong) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn fls(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn flsl(arg1: ::core::ffi::c_long) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn flsll(arg1: ::core::ffi::c_longlong) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn index(
        arg1: *const ::core::ffi::c_char,
        arg2: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn rindex(
        arg1: *const ::core::ffi::c_char,
        arg2: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strcasecmp(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strncasecmp(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strcasecmp_l(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: locale_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strncasecmp_l(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn memchr(
        arg1: *const ::core::ffi::c_void,
        arg2: ::core::ffi::c_int,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn memcmp(
        arg1: *const ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn memcpy(
        arg1: *mut ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn memmove(
        arg1: *mut ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn memset(
        arg1: *mut ::core::ffi::c_void,
        arg2: ::core::ffi::c_int,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn strcat(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strchr(
        arg1: *const ::core::ffi::c_char,
        arg2: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strcmp(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strcoll(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strcpy(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strcspn(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_uint;
}
unsafe extern "C" {
    pub fn strerror(arg1: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strlen(arg1: *const ::core::ffi::c_char) -> ::core::ffi::c_uint;
}
unsafe extern "C" {
    pub fn strncat(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strncmp(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strncpy(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strpbrk(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strrchr(
        arg1: *const ::core::ffi::c_char,
        arg2: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strspn(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_uint;
}
unsafe extern "C" {
    pub fn strstr(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strtok(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strxfrm(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uint;
}
unsafe extern "C" {
    pub fn strcoll_l(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: locale_t,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn strerror_l(arg1: ::core::ffi::c_int, arg2: locale_t) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strxfrm_l(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strtok_r(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn timingsafe_bcmp(
        arg1: *const ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn timingsafe_memcmp(
        arg1: *const ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn memccpy(
        arg1: *mut ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: ::core::ffi::c_int,
        arg4: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn stpcpy(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn stpncpy(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strdup(arg1: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn _strdup_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strndup(
        arg1: *const ::core::ffi::c_char,
        arg2: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn _strndup_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        arg1: ::core::ffi::c_int,
        arg2: *mut ::core::ffi::c_char,
        arg3: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn _strerror_r(
        arg1: *mut _reent,
        arg2: ::core::ffi::c_int,
        arg3: ::core::ffi::c_int,
        arg4: *mut ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strlcat(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uint;
}
unsafe extern "C" {
    pub fn strlcpy(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uint;
}
unsafe extern "C" {
    pub fn strnlen(arg1: *const ::core::ffi::c_char, arg2: usize) -> usize;
}
unsafe extern "C" {
    pub fn strsep(
        arg1: *mut *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strnstr(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strlwr(arg1: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strupr(arg1: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn strsignal(__signo: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type int_least8_t = __int_least8_t;
pub type uint_least8_t = __uint_least8_t;
pub type int_least16_t = __int_least16_t;
pub type uint_least16_t = __uint_least16_t;
pub type int_least32_t = __int_least32_t;
pub type uint_least32_t = __uint_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::core::ffi::c_schar;
pub type uint_fast8_t = ::core::ffi::c_uchar;
pub type int_fast16_t = ::core::ffi::c_short;
pub type uint_fast16_t = ::core::ffi::c_ushort;
pub type int_fast32_t = ::core::ffi::c_int;
pub type uint_fast32_t = ::core::ffi::c_uint;
pub type int_fast64_t = ::core::ffi::c_longlong;
pub type uint_fast64_t = ::core::ffi::c_ulonglong;
pub type u8_ = u8;
pub type u16_ = u16;
pub type u32_ = u32;
pub type u64_ = u64;
pub type s8 = i8;
pub type s16 = i16;
pub type s32 = i32;
pub type s64 = i64;
pub type vu8 = u8_;
pub type vu16 = u16_;
pub type vu32 = u32_;
pub type vu64 = u64_;
pub type vs8 = s8;
pub type vs16 = s16;
pub type vs32 = s32;
pub type vs64 = s64;
pub type f32_ = f32;
pub type f64_ = f64;
pub type bool8 = u8_;
pub type bool16 = u16_;
pub type bool32 = u32_;
pub type vbool8 = vu8;
pub type vbool16 = vu16;
pub type vbool32 = vu32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct BgCnt {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BgCnt"][::core::mem::size_of::<BgCnt>() - 2usize];
    ["Alignment of BgCnt"][::core::mem::align_of::<BgCnt>() - 1usize];
};
impl BgCnt {
    #[inline]
    pub fn priority(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_priority(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn priority_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_priority_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn charBaseBlock(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_charBaseBlock(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn charBaseBlock_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_charBaseBlock_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn dsCharBaseBlock(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_dsCharBaseBlock(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn dsCharBaseBlock_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_dsCharBaseBlock_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mosaic(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_mosaic(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mosaic_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_mosaic_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn palettes(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_palettes(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn palettes_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_palettes_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn screenBaseBlock(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_screenBaseBlock(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn screenBaseBlock_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                5u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_screenBaseBlock_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn areaOverflowMode(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_areaOverflowMode(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn areaOverflowMode_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_areaOverflowMode_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn screenSize(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_screenSize(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn screenSize_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_screenSize_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        priority: u16_,
        charBaseBlock: u16_,
        dsCharBaseBlock: u16_,
        mosaic: u16_,
        palettes: u16_,
        screenBaseBlock: u16_,
        areaOverflowMode: u16_,
        screenSize: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let priority: u16 = unsafe { ::core::mem::transmute(priority) };
            priority as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let charBaseBlock: u16 = unsafe { ::core::mem::transmute(charBaseBlock) };
            charBaseBlock as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let dsCharBaseBlock: u16 = unsafe { ::core::mem::transmute(dsCharBaseBlock) };
            dsCharBaseBlock as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let mosaic: u16 = unsafe { ::core::mem::transmute(mosaic) };
            mosaic as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let palettes: u16 = unsafe { ::core::mem::transmute(palettes) };
            palettes as u64
        });
        __bindgen_bitfield_unit.set(8usize, 5u8, {
            let screenBaseBlock: u16 = unsafe { ::core::mem::transmute(screenBaseBlock) };
            screenBaseBlock as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let areaOverflowMode: u16 = unsafe { ::core::mem::transmute(areaOverflowMode) };
            areaOverflowMode as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let screenSize: u16 = unsafe { ::core::mem::transmute(screenSize) };
            screenSize as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type vBgCnt = BgCnt;
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct PlttData {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PlttData"][::core::mem::size_of::<PlttData>() - 2usize];
    ["Alignment of PlttData"][::core::mem::align_of::<PlttData>() - 2usize];
};
impl PlttData {
    #[inline]
    pub fn r(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_r(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn r_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                5u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_r_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn g(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_g(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn g_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                5u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_g_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn b(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_b(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn b_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                5u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_b_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn unused_15(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_unused_15(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn unused_15_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_unused_15_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        r: u16_,
        g: u16_,
        b: u16_,
        unused_15: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let r: u16 = unsafe { ::core::mem::transmute(r) };
            r as u64
        });
        __bindgen_bitfield_unit.set(5usize, 5u8, {
            let g: u16 = unsafe { ::core::mem::transmute(g) };
            g as u64
        });
        __bindgen_bitfield_unit.set(10usize, 5u8, {
            let b: u16 = unsafe { ::core::mem::transmute(b) };
            b as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let unused_15: u16 = unsafe { ::core::mem::transmute(unused_15) };
            unused_15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct OamData {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 6usize]>,
    pub affineParam: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OamData"][::core::mem::size_of::<OamData>() - 8usize];
    ["Alignment of OamData"][::core::mem::align_of::<OamData>() - 4usize];
    ["Offset of field: OamData::affineParam"]
        [::core::mem::offset_of!(OamData, affineParam) - 6usize];
};
impl OamData {
    #[inline]
    pub fn y(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_y(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn y_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 6usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_y_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 6usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn affineMode(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_affineMode(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn affineMode_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 6usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_affineMode_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 6usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn objMode(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_objMode(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn objMode_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 6usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_objMode_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 6usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mosaic(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mosaic(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mosaic_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 6usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_mosaic_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 6usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bpp(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bpp(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bpp_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 6usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_bpp_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 6usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn shape(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_shape(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn shape_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 6usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_shape_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 6usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn x(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_x(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn x_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 6usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                9u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_x_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 6usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                9u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn matrixNum(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_matrixNum(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn matrixNum_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 6usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                25usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_matrixNum_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 6usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                25usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn size(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_size(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn size_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 6usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                30usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_size_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 6usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                30usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tileNum(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 10u8) as u16) }
    }
    #[inline]
    pub fn set_tileNum(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tileNum_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 6usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                10u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_tileNum_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 6usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                10u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn priority(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(42usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_priority(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(42usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn priority_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 6usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                42usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_priority_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 6usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                42usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn paletteNum(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(44usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_paletteNum(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(44usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn paletteNum_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 6usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                44usize,
                4u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_paletteNum_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 6usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                44usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        y: u32_,
        affineMode: u32_,
        objMode: u32_,
        mosaic: u32_,
        bpp: u32_,
        shape: u32_,
        x: u32_,
        matrixNum: u32_,
        size: u32_,
        tileNum: u16_,
        priority: u16_,
        paletteNum: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 6usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 6usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let y: u32 = unsafe { ::core::mem::transmute(y) };
            y as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let affineMode: u32 = unsafe { ::core::mem::transmute(affineMode) };
            affineMode as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let objMode: u32 = unsafe { ::core::mem::transmute(objMode) };
            objMode as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let mosaic: u32 = unsafe { ::core::mem::transmute(mosaic) };
            mosaic as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bpp: u32 = unsafe { ::core::mem::transmute(bpp) };
            bpp as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let shape: u32 = unsafe { ::core::mem::transmute(shape) };
            shape as u64
        });
        __bindgen_bitfield_unit.set(16usize, 9u8, {
            let x: u32 = unsafe { ::core::mem::transmute(x) };
            x as u64
        });
        __bindgen_bitfield_unit.set(25usize, 5u8, {
            let matrixNum: u32 = unsafe { ::core::mem::transmute(matrixNum) };
            matrixNum as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let size: u32 = unsafe { ::core::mem::transmute(size) };
            size as u64
        });
        __bindgen_bitfield_unit.set(32usize, 10u8, {
            let tileNum: u16 = unsafe { ::core::mem::transmute(tileNum) };
            tileNum as u64
        });
        __bindgen_bitfield_unit.set(42usize, 2u8, {
            let priority: u16 = unsafe { ::core::mem::transmute(priority) };
            priority as u64
        });
        __bindgen_bitfield_unit.set(44usize, 4u8, {
            let paletteNum: u16 = unsafe { ::core::mem::transmute(paletteNum) };
            paletteNum as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BgAffineSrcData {
    pub texX: s32,
    pub texY: s32,
    pub scrX: s16,
    pub scrY: s16,
    pub sx: s16,
    pub sy: s16,
    pub alpha: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BgAffineSrcData"][::core::mem::size_of::<BgAffineSrcData>() - 20usize];
    ["Alignment of BgAffineSrcData"][::core::mem::align_of::<BgAffineSrcData>() - 4usize];
    ["Offset of field: BgAffineSrcData::texX"]
        [::core::mem::offset_of!(BgAffineSrcData, texX) - 0usize];
    ["Offset of field: BgAffineSrcData::texY"]
        [::core::mem::offset_of!(BgAffineSrcData, texY) - 4usize];
    ["Offset of field: BgAffineSrcData::scrX"]
        [::core::mem::offset_of!(BgAffineSrcData, scrX) - 8usize];
    ["Offset of field: BgAffineSrcData::scrY"]
        [::core::mem::offset_of!(BgAffineSrcData, scrY) - 10usize];
    ["Offset of field: BgAffineSrcData::sx"]
        [::core::mem::offset_of!(BgAffineSrcData, sx) - 12usize];
    ["Offset of field: BgAffineSrcData::sy"]
        [::core::mem::offset_of!(BgAffineSrcData, sy) - 14usize];
    ["Offset of field: BgAffineSrcData::alpha"]
        [::core::mem::offset_of!(BgAffineSrcData, alpha) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BgAffineDstData {
    pub pa: s16,
    pub pb: s16,
    pub pc: s16,
    pub pd: s16,
    pub dx: s32,
    pub dy: s32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BgAffineDstData"][::core::mem::size_of::<BgAffineDstData>() - 16usize];
    ["Alignment of BgAffineDstData"][::core::mem::align_of::<BgAffineDstData>() - 4usize];
    ["Offset of field: BgAffineDstData::pa"][::core::mem::offset_of!(BgAffineDstData, pa) - 0usize];
    ["Offset of field: BgAffineDstData::pb"][::core::mem::offset_of!(BgAffineDstData, pb) - 2usize];
    ["Offset of field: BgAffineDstData::pc"][::core::mem::offset_of!(BgAffineDstData, pc) - 4usize];
    ["Offset of field: BgAffineDstData::pd"][::core::mem::offset_of!(BgAffineDstData, pd) - 6usize];
    ["Offset of field: BgAffineDstData::dx"][::core::mem::offset_of!(BgAffineDstData, dx) - 8usize];
    ["Offset of field: BgAffineDstData::dy"]
        [::core::mem::offset_of!(BgAffineDstData, dy) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ObjAffineSrcData {
    pub xScale: s16,
    pub yScale: s16,
    pub rotation: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ObjAffineSrcData"][::core::mem::size_of::<ObjAffineSrcData>() - 6usize];
    ["Alignment of ObjAffineSrcData"][::core::mem::align_of::<ObjAffineSrcData>() - 2usize];
    ["Offset of field: ObjAffineSrcData::xScale"]
        [::core::mem::offset_of!(ObjAffineSrcData, xScale) - 0usize];
    ["Offset of field: ObjAffineSrcData::yScale"]
        [::core::mem::offset_of!(ObjAffineSrcData, yScale) - 2usize];
    ["Offset of field: ObjAffineSrcData::rotation"]
        [::core::mem::offset_of!(ObjAffineSrcData, rotation) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SioMultiCnt {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub data: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SioMultiCnt"][::core::mem::size_of::<SioMultiCnt>() - 4usize];
    ["Alignment of SioMultiCnt"][::core::mem::align_of::<SioMultiCnt>() - 2usize];
    ["Offset of field: SioMultiCnt::data"][::core::mem::offset_of!(SioMultiCnt, data) - 2usize];
};
impl SioMultiCnt {
    #[inline]
    pub fn baudRate(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_baudRate(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn baudRate_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_baudRate_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn si(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_si(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn si_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_si_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sd(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_sd(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sd_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_sd_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn id(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_id(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn id_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_id_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn error(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_error(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn error_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_error_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_enable(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_enable_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn unused_11_8(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_unused_11_8(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn unused_11_8_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                4u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_unused_11_8_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mode(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_mode(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mode_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_mode_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn intrEnable(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_intrEnable(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn intrEnable_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_intrEnable_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn unused_15(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_unused_15(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn unused_15_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_unused_15_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        baudRate: u16_,
        si: u16_,
        sd: u16_,
        id: u16_,
        error: u16_,
        enable: u16_,
        unused_11_8: u16_,
        mode: u16_,
        intrEnable: u16_,
        unused_15: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let baudRate: u16 = unsafe { ::core::mem::transmute(baudRate) };
            baudRate as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let si: u16 = unsafe { ::core::mem::transmute(si) };
            si as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let sd: u16 = unsafe { ::core::mem::transmute(sd) };
            sd as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let id: u16 = unsafe { ::core::mem::transmute(id) };
            id as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let error: u16 = unsafe { ::core::mem::transmute(error) };
            error as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let enable: u16 = unsafe { ::core::mem::transmute(enable) };
            enable as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let unused_11_8: u16 = unsafe { ::core::mem::transmute(unused_11_8) };
            unused_11_8 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 2u8, {
            let mode: u16 = unsafe { ::core::mem::transmute(mode) };
            mode as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let intrEnable: u16 = unsafe { ::core::mem::transmute(intrEnable) };
            intrEnable as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let unused_15: u16 = unsafe { ::core::mem::transmute(unused_15) };
            unused_15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MultiBootParam {
    pub system_work: [u32_; 5usize],
    pub handshake_data: u8_,
    pub handshake_timeout: u16_,
    pub probe_count: u8_,
    pub client_data: [u8_; 3usize],
    pub palette_data: u8_,
    pub response_bit: u8_,
    pub client_bit: u8_,
    pub reserved1: u8_,
    pub boot_srcp: *const u8_,
    pub boot_endp: *const u8_,
    pub masterp: *const u8_,
    pub reserved2: [*mut u8_; 3usize],
    pub system_work2: [u32_; 4usize],
    pub sendflag: u8_,
    pub probe_target_bit: u8_,
    pub check_wait: u8_,
    pub server_type: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MultiBootParam"][::core::mem::size_of::<MultiBootParam>() - 76usize];
    ["Alignment of MultiBootParam"][::core::mem::align_of::<MultiBootParam>() - 4usize];
    ["Offset of field: MultiBootParam::system_work"]
        [::core::mem::offset_of!(MultiBootParam, system_work) - 0usize];
    ["Offset of field: MultiBootParam::handshake_data"]
        [::core::mem::offset_of!(MultiBootParam, handshake_data) - 20usize];
    ["Offset of field: MultiBootParam::handshake_timeout"]
        [::core::mem::offset_of!(MultiBootParam, handshake_timeout) - 22usize];
    ["Offset of field: MultiBootParam::probe_count"]
        [::core::mem::offset_of!(MultiBootParam, probe_count) - 24usize];
    ["Offset of field: MultiBootParam::client_data"]
        [::core::mem::offset_of!(MultiBootParam, client_data) - 25usize];
    ["Offset of field: MultiBootParam::palette_data"]
        [::core::mem::offset_of!(MultiBootParam, palette_data) - 28usize];
    ["Offset of field: MultiBootParam::response_bit"]
        [::core::mem::offset_of!(MultiBootParam, response_bit) - 29usize];
    ["Offset of field: MultiBootParam::client_bit"]
        [::core::mem::offset_of!(MultiBootParam, client_bit) - 30usize];
    ["Offset of field: MultiBootParam::reserved1"]
        [::core::mem::offset_of!(MultiBootParam, reserved1) - 31usize];
    ["Offset of field: MultiBootParam::boot_srcp"]
        [::core::mem::offset_of!(MultiBootParam, boot_srcp) - 32usize];
    ["Offset of field: MultiBootParam::boot_endp"]
        [::core::mem::offset_of!(MultiBootParam, boot_endp) - 36usize];
    ["Offset of field: MultiBootParam::masterp"]
        [::core::mem::offset_of!(MultiBootParam, masterp) - 40usize];
    ["Offset of field: MultiBootParam::reserved2"]
        [::core::mem::offset_of!(MultiBootParam, reserved2) - 44usize];
    ["Offset of field: MultiBootParam::system_work2"]
        [::core::mem::offset_of!(MultiBootParam, system_work2) - 56usize];
    ["Offset of field: MultiBootParam::sendflag"]
        [::core::mem::offset_of!(MultiBootParam, sendflag) - 72usize];
    ["Offset of field: MultiBootParam::probe_target_bit"]
        [::core::mem::offset_of!(MultiBootParam, probe_target_bit) - 73usize];
    ["Offset of field: MultiBootParam::check_wait"]
        [::core::mem::offset_of!(MultiBootParam, check_wait) - 74usize];
    ["Offset of field: MultiBootParam::server_type"]
        [::core::mem::offset_of!(MultiBootParam, server_type) - 75usize];
};
unsafe extern "C" {
    pub fn SoftReset(resetFlags: u32_);
}
unsafe extern "C" {
    pub fn RegisterRamReset(resetFlags: u32_);
}
unsafe extern "C" {
    pub fn VBlankIntrWait();
}
unsafe extern "C" {
    pub fn Sqrt(num: u32_) -> u16_;
}
unsafe extern "C" {
    pub fn ArcTan2(x: s16, y: s16) -> u16_;
}
unsafe extern "C" {
    pub fn CpuSet(src: *const ::core::ffi::c_void, dest: *mut ::core::ffi::c_void, control: u32_);
}
unsafe extern "C" {
    pub fn CpuFastSet(
        src: *const ::core::ffi::c_void,
        dest: *mut ::core::ffi::c_void,
        control: u32_,
    );
}
unsafe extern "C" {
    pub fn BgAffineSet(src: *mut BgAffineSrcData, dest: *mut BgAffineDstData, count: s32);
}
unsafe extern "C" {
    pub fn ObjAffineSet(
        src: *mut ObjAffineSrcData,
        dest: *mut ::core::ffi::c_void,
        count: s32,
        offset: s32,
    );
}
unsafe extern "C" {
    pub fn LZ77UnCompWram(src: *const u32_, dest: *mut ::core::ffi::c_void);
}
unsafe extern "C" {
    pub fn LZ77UnCompVram(src: *const u32_, dest: *mut ::core::ffi::c_void);
}
unsafe extern "C" {
    pub fn RLUnCompWram(src: *const ::core::ffi::c_void, dest: *mut ::core::ffi::c_void);
}
unsafe extern "C" {
    pub fn RLUnCompVram(src: *const ::core::ffi::c_void, dest: *mut ::core::ffi::c_void);
}
unsafe extern "C" {
    pub fn MultiBoot(mp: *mut MultiBootParam) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn Div(num: s32, denom: s32) -> s32;
}
unsafe extern "C" {
    pub fn MgbaOpen() -> bool32;
}
unsafe extern "C" {
    pub fn MgbaClose();
}
unsafe extern "C" {
    pub fn MgbaPrintf(level: s32, pBuf: *const ::core::ffi::c_char, ...);
}
unsafe extern "C" {
    pub fn MgbaAssert(
        pFile: *const ::core::ffi::c_char,
        nLine: s32,
        pExpression: *const ::core::ffi::c_char,
        nStopProgram: bool32,
    );
}
unsafe extern "C" {
    pub fn NoCashGBAPrintf(pBuf: *const ::core::ffi::c_char, ...);
}
unsafe extern "C" {
    pub fn NoCashGBAAssert(
        pFile: *const ::core::ffi::c_char,
        nLine: s32,
        pExpression: *const ::core::ffi::c_char,
        nStopProgram: bool32,
    );
}
unsafe extern "C" {
    pub fn AGBPrintf(pBuf: *const ::core::ffi::c_char, ...);
}
unsafe extern "C" {
    pub fn AGBAssert(
        pFile: *const ::core::ffi::c_char,
        nLine: ::core::ffi::c_int,
        pExpression: *const ::core::ffi::c_char,
        nStopProgram: ::core::ffi::c_int,
    );
}
unsafe extern "C" {
    pub fn AGBPrintInit();
}
pub type q4_12_t = s16;
pub type uq4_12_t = u32_;
pub const REMATCH_ROSE: _bindgen_ty_1 = 0;
pub const REMATCH_ANDRES: _bindgen_ty_1 = 1;
pub const REMATCH_DUSTY: _bindgen_ty_1 = 2;
pub const REMATCH_LOLA: _bindgen_ty_1 = 3;
pub const REMATCH_RICKY: _bindgen_ty_1 = 4;
pub const REMATCH_LILA_AND_ROY: _bindgen_ty_1 = 5;
pub const REMATCH_CRISTIN: _bindgen_ty_1 = 6;
pub const REMATCH_BROOKE: _bindgen_ty_1 = 7;
pub const REMATCH_WILTON: _bindgen_ty_1 = 8;
pub const REMATCH_VALERIE: _bindgen_ty_1 = 9;
pub const REMATCH_CINDY: _bindgen_ty_1 = 10;
pub const REMATCH_THALIA: _bindgen_ty_1 = 11;
pub const REMATCH_JESSICA: _bindgen_ty_1 = 12;
pub const REMATCH_WINSTON: _bindgen_ty_1 = 13;
pub const REMATCH_STEVE: _bindgen_ty_1 = 14;
pub const REMATCH_TONY: _bindgen_ty_1 = 15;
pub const REMATCH_NOB: _bindgen_ty_1 = 16;
pub const REMATCH_KOJI: _bindgen_ty_1 = 17;
pub const REMATCH_FERNANDO: _bindgen_ty_1 = 18;
pub const REMATCH_DALTON: _bindgen_ty_1 = 19;
pub const REMATCH_BERNIE: _bindgen_ty_1 = 20;
pub const REMATCH_ETHAN: _bindgen_ty_1 = 21;
pub const REMATCH_JOHN_AND_JAY: _bindgen_ty_1 = 22;
pub const REMATCH_JEFFREY: _bindgen_ty_1 = 23;
pub const REMATCH_CAMERON: _bindgen_ty_1 = 24;
pub const REMATCH_JACKI: _bindgen_ty_1 = 25;
pub const REMATCH_WALTER: _bindgen_ty_1 = 26;
pub const REMATCH_KAREN: _bindgen_ty_1 = 27;
pub const REMATCH_JERRY: _bindgen_ty_1 = 28;
pub const REMATCH_ANNA_AND_MEG: _bindgen_ty_1 = 29;
pub const REMATCH_ISABEL: _bindgen_ty_1 = 30;
pub const REMATCH_MIGUEL: _bindgen_ty_1 = 31;
pub const REMATCH_TIMOTHY: _bindgen_ty_1 = 32;
pub const REMATCH_SHELBY: _bindgen_ty_1 = 33;
pub const REMATCH_CALVIN: _bindgen_ty_1 = 34;
pub const REMATCH_ELLIOT: _bindgen_ty_1 = 35;
pub const REMATCH_ISAIAH: _bindgen_ty_1 = 36;
pub const REMATCH_MARIA: _bindgen_ty_1 = 37;
pub const REMATCH_ABIGAIL: _bindgen_ty_1 = 38;
pub const REMATCH_DYLAN: _bindgen_ty_1 = 39;
pub const REMATCH_KATELYN: _bindgen_ty_1 = 40;
pub const REMATCH_BENJAMIN: _bindgen_ty_1 = 41;
pub const REMATCH_PABLO: _bindgen_ty_1 = 42;
pub const REMATCH_NICOLAS: _bindgen_ty_1 = 43;
pub const REMATCH_ROBERT: _bindgen_ty_1 = 44;
pub const REMATCH_LAO: _bindgen_ty_1 = 45;
pub const REMATCH_CYNDY: _bindgen_ty_1 = 46;
pub const REMATCH_MADELINE: _bindgen_ty_1 = 47;
pub const REMATCH_JENNY: _bindgen_ty_1 = 48;
pub const REMATCH_DIANA: _bindgen_ty_1 = 49;
pub const REMATCH_AMY_AND_LIV: _bindgen_ty_1 = 50;
pub const REMATCH_ERNEST: _bindgen_ty_1 = 51;
pub const REMATCH_CORY: _bindgen_ty_1 = 52;
pub const REMATCH_EDWIN: _bindgen_ty_1 = 53;
pub const REMATCH_LYDIA: _bindgen_ty_1 = 54;
pub const REMATCH_ISAAC: _bindgen_ty_1 = 55;
pub const REMATCH_GABRIELLE: _bindgen_ty_1 = 56;
pub const REMATCH_CATHERINE: _bindgen_ty_1 = 57;
pub const REMATCH_JACKSON: _bindgen_ty_1 = 58;
pub const REMATCH_HALEY: _bindgen_ty_1 = 59;
pub const REMATCH_JAMES: _bindgen_ty_1 = 60;
pub const REMATCH_TRENT: _bindgen_ty_1 = 61;
pub const REMATCH_SAWYER: _bindgen_ty_1 = 62;
pub const REMATCH_KIRA_AND_DAN: _bindgen_ty_1 = 63;
pub const REMATCH_WALLY_VR: _bindgen_ty_1 = 64;
pub const REMATCH_ROXANNE: _bindgen_ty_1 = 65;
pub const REMATCH_BRAWLY: _bindgen_ty_1 = 66;
pub const REMATCH_WATTSON: _bindgen_ty_1 = 67;
pub const REMATCH_FLANNERY: _bindgen_ty_1 = 68;
pub const REMATCH_NORMAN: _bindgen_ty_1 = 69;
pub const REMATCH_WINONA: _bindgen_ty_1 = 70;
pub const REMATCH_TATE_AND_LIZA: _bindgen_ty_1 = 71;
pub const REMATCH_JUAN: _bindgen_ty_1 = 72;
pub const REMATCH_SIDNEY: _bindgen_ty_1 = 73;
pub const REMATCH_PHOEBE: _bindgen_ty_1 = 74;
pub const REMATCH_GLACIA: _bindgen_ty_1 = 75;
pub const REMATCH_DRAKE: _bindgen_ty_1 = 76;
pub const REMATCH_WALLACE: _bindgen_ty_1 = 77;
pub const REMATCH_TABLE_ENTRIES: _bindgen_ty_1 = 78;
pub type _bindgen_ty_1 = ::core::ffi::c_uint;
pub const NATIONAL_DEX_NONE: _bindgen_ty_2 = 0;
pub const NATIONAL_DEX_BULBASAUR: _bindgen_ty_2 = 1;
pub const NATIONAL_DEX_IVYSAUR: _bindgen_ty_2 = 2;
pub const NATIONAL_DEX_VENUSAUR: _bindgen_ty_2 = 3;
pub const NATIONAL_DEX_CHARMANDER: _bindgen_ty_2 = 4;
pub const NATIONAL_DEX_CHARMELEON: _bindgen_ty_2 = 5;
pub const NATIONAL_DEX_CHARIZARD: _bindgen_ty_2 = 6;
pub const NATIONAL_DEX_SQUIRTLE: _bindgen_ty_2 = 7;
pub const NATIONAL_DEX_WARTORTLE: _bindgen_ty_2 = 8;
pub const NATIONAL_DEX_BLASTOISE: _bindgen_ty_2 = 9;
pub const NATIONAL_DEX_CATERPIE: _bindgen_ty_2 = 10;
pub const NATIONAL_DEX_METAPOD: _bindgen_ty_2 = 11;
pub const NATIONAL_DEX_BUTTERFREE: _bindgen_ty_2 = 12;
pub const NATIONAL_DEX_WEEDLE: _bindgen_ty_2 = 13;
pub const NATIONAL_DEX_KAKUNA: _bindgen_ty_2 = 14;
pub const NATIONAL_DEX_BEEDRILL: _bindgen_ty_2 = 15;
pub const NATIONAL_DEX_PIDGEY: _bindgen_ty_2 = 16;
pub const NATIONAL_DEX_PIDGEOTTO: _bindgen_ty_2 = 17;
pub const NATIONAL_DEX_PIDGEOT: _bindgen_ty_2 = 18;
pub const NATIONAL_DEX_RATTATA: _bindgen_ty_2 = 19;
pub const NATIONAL_DEX_RATICATE: _bindgen_ty_2 = 20;
pub const NATIONAL_DEX_SPEAROW: _bindgen_ty_2 = 21;
pub const NATIONAL_DEX_FEAROW: _bindgen_ty_2 = 22;
pub const NATIONAL_DEX_EKANS: _bindgen_ty_2 = 23;
pub const NATIONAL_DEX_ARBOK: _bindgen_ty_2 = 24;
pub const NATIONAL_DEX_PIKACHU: _bindgen_ty_2 = 25;
pub const NATIONAL_DEX_RAICHU: _bindgen_ty_2 = 26;
pub const NATIONAL_DEX_SANDSHREW: _bindgen_ty_2 = 27;
pub const NATIONAL_DEX_SANDSLASH: _bindgen_ty_2 = 28;
pub const NATIONAL_DEX_NIDORAN_F: _bindgen_ty_2 = 29;
pub const NATIONAL_DEX_NIDORINA: _bindgen_ty_2 = 30;
pub const NATIONAL_DEX_NIDOQUEEN: _bindgen_ty_2 = 31;
pub const NATIONAL_DEX_NIDORAN_M: _bindgen_ty_2 = 32;
pub const NATIONAL_DEX_NIDORINO: _bindgen_ty_2 = 33;
pub const NATIONAL_DEX_NIDOKING: _bindgen_ty_2 = 34;
pub const NATIONAL_DEX_CLEFAIRY: _bindgen_ty_2 = 35;
pub const NATIONAL_DEX_CLEFABLE: _bindgen_ty_2 = 36;
pub const NATIONAL_DEX_VULPIX: _bindgen_ty_2 = 37;
pub const NATIONAL_DEX_NINETALES: _bindgen_ty_2 = 38;
pub const NATIONAL_DEX_JIGGLYPUFF: _bindgen_ty_2 = 39;
pub const NATIONAL_DEX_WIGGLYTUFF: _bindgen_ty_2 = 40;
pub const NATIONAL_DEX_ZUBAT: _bindgen_ty_2 = 41;
pub const NATIONAL_DEX_GOLBAT: _bindgen_ty_2 = 42;
pub const NATIONAL_DEX_ODDISH: _bindgen_ty_2 = 43;
pub const NATIONAL_DEX_GLOOM: _bindgen_ty_2 = 44;
pub const NATIONAL_DEX_VILEPLUME: _bindgen_ty_2 = 45;
pub const NATIONAL_DEX_PARAS: _bindgen_ty_2 = 46;
pub const NATIONAL_DEX_PARASECT: _bindgen_ty_2 = 47;
pub const NATIONAL_DEX_VENONAT: _bindgen_ty_2 = 48;
pub const NATIONAL_DEX_VENOMOTH: _bindgen_ty_2 = 49;
pub const NATIONAL_DEX_DIGLETT: _bindgen_ty_2 = 50;
pub const NATIONAL_DEX_DUGTRIO: _bindgen_ty_2 = 51;
pub const NATIONAL_DEX_MEOWTH: _bindgen_ty_2 = 52;
pub const NATIONAL_DEX_PERSIAN: _bindgen_ty_2 = 53;
pub const NATIONAL_DEX_PSYDUCK: _bindgen_ty_2 = 54;
pub const NATIONAL_DEX_GOLDUCK: _bindgen_ty_2 = 55;
pub const NATIONAL_DEX_MANKEY: _bindgen_ty_2 = 56;
pub const NATIONAL_DEX_PRIMEAPE: _bindgen_ty_2 = 57;
pub const NATIONAL_DEX_GROWLITHE: _bindgen_ty_2 = 58;
pub const NATIONAL_DEX_ARCANINE: _bindgen_ty_2 = 59;
pub const NATIONAL_DEX_POLIWAG: _bindgen_ty_2 = 60;
pub const NATIONAL_DEX_POLIWHIRL: _bindgen_ty_2 = 61;
pub const NATIONAL_DEX_POLIWRATH: _bindgen_ty_2 = 62;
pub const NATIONAL_DEX_ABRA: _bindgen_ty_2 = 63;
pub const NATIONAL_DEX_KADABRA: _bindgen_ty_2 = 64;
pub const NATIONAL_DEX_ALAKAZAM: _bindgen_ty_2 = 65;
pub const NATIONAL_DEX_MACHOP: _bindgen_ty_2 = 66;
pub const NATIONAL_DEX_MACHOKE: _bindgen_ty_2 = 67;
pub const NATIONAL_DEX_MACHAMP: _bindgen_ty_2 = 68;
pub const NATIONAL_DEX_BELLSPROUT: _bindgen_ty_2 = 69;
pub const NATIONAL_DEX_WEEPINBELL: _bindgen_ty_2 = 70;
pub const NATIONAL_DEX_VICTREEBEL: _bindgen_ty_2 = 71;
pub const NATIONAL_DEX_TENTACOOL: _bindgen_ty_2 = 72;
pub const NATIONAL_DEX_TENTACRUEL: _bindgen_ty_2 = 73;
pub const NATIONAL_DEX_GEODUDE: _bindgen_ty_2 = 74;
pub const NATIONAL_DEX_GRAVELER: _bindgen_ty_2 = 75;
pub const NATIONAL_DEX_GOLEM: _bindgen_ty_2 = 76;
pub const NATIONAL_DEX_PONYTA: _bindgen_ty_2 = 77;
pub const NATIONAL_DEX_RAPIDASH: _bindgen_ty_2 = 78;
pub const NATIONAL_DEX_SLOWPOKE: _bindgen_ty_2 = 79;
pub const NATIONAL_DEX_SLOWBRO: _bindgen_ty_2 = 80;
pub const NATIONAL_DEX_MAGNEMITE: _bindgen_ty_2 = 81;
pub const NATIONAL_DEX_MAGNETON: _bindgen_ty_2 = 82;
pub const NATIONAL_DEX_FARFETCHD: _bindgen_ty_2 = 83;
pub const NATIONAL_DEX_DODUO: _bindgen_ty_2 = 84;
pub const NATIONAL_DEX_DODRIO: _bindgen_ty_2 = 85;
pub const NATIONAL_DEX_SEEL: _bindgen_ty_2 = 86;
pub const NATIONAL_DEX_DEWGONG: _bindgen_ty_2 = 87;
pub const NATIONAL_DEX_GRIMER: _bindgen_ty_2 = 88;
pub const NATIONAL_DEX_MUK: _bindgen_ty_2 = 89;
pub const NATIONAL_DEX_SHELLDER: _bindgen_ty_2 = 90;
pub const NATIONAL_DEX_CLOYSTER: _bindgen_ty_2 = 91;
pub const NATIONAL_DEX_GASTLY: _bindgen_ty_2 = 92;
pub const NATIONAL_DEX_HAUNTER: _bindgen_ty_2 = 93;
pub const NATIONAL_DEX_GENGAR: _bindgen_ty_2 = 94;
pub const NATIONAL_DEX_ONIX: _bindgen_ty_2 = 95;
pub const NATIONAL_DEX_DROWZEE: _bindgen_ty_2 = 96;
pub const NATIONAL_DEX_HYPNO: _bindgen_ty_2 = 97;
pub const NATIONAL_DEX_KRABBY: _bindgen_ty_2 = 98;
pub const NATIONAL_DEX_KINGLER: _bindgen_ty_2 = 99;
pub const NATIONAL_DEX_VOLTORB: _bindgen_ty_2 = 100;
pub const NATIONAL_DEX_ELECTRODE: _bindgen_ty_2 = 101;
pub const NATIONAL_DEX_EXEGGCUTE: _bindgen_ty_2 = 102;
pub const NATIONAL_DEX_EXEGGUTOR: _bindgen_ty_2 = 103;
pub const NATIONAL_DEX_CUBONE: _bindgen_ty_2 = 104;
pub const NATIONAL_DEX_MAROWAK: _bindgen_ty_2 = 105;
pub const NATIONAL_DEX_HITMONLEE: _bindgen_ty_2 = 106;
pub const NATIONAL_DEX_HITMONCHAN: _bindgen_ty_2 = 107;
pub const NATIONAL_DEX_LICKITUNG: _bindgen_ty_2 = 108;
pub const NATIONAL_DEX_KOFFING: _bindgen_ty_2 = 109;
pub const NATIONAL_DEX_WEEZING: _bindgen_ty_2 = 110;
pub const NATIONAL_DEX_RHYHORN: _bindgen_ty_2 = 111;
pub const NATIONAL_DEX_RHYDON: _bindgen_ty_2 = 112;
pub const NATIONAL_DEX_CHANSEY: _bindgen_ty_2 = 113;
pub const NATIONAL_DEX_TANGELA: _bindgen_ty_2 = 114;
pub const NATIONAL_DEX_KANGASKHAN: _bindgen_ty_2 = 115;
pub const NATIONAL_DEX_HORSEA: _bindgen_ty_2 = 116;
pub const NATIONAL_DEX_SEADRA: _bindgen_ty_2 = 117;
pub const NATIONAL_DEX_GOLDEEN: _bindgen_ty_2 = 118;
pub const NATIONAL_DEX_SEAKING: _bindgen_ty_2 = 119;
pub const NATIONAL_DEX_STARYU: _bindgen_ty_2 = 120;
pub const NATIONAL_DEX_STARMIE: _bindgen_ty_2 = 121;
pub const NATIONAL_DEX_MR_MIME: _bindgen_ty_2 = 122;
pub const NATIONAL_DEX_SCYTHER: _bindgen_ty_2 = 123;
pub const NATIONAL_DEX_JYNX: _bindgen_ty_2 = 124;
pub const NATIONAL_DEX_ELECTABUZZ: _bindgen_ty_2 = 125;
pub const NATIONAL_DEX_MAGMAR: _bindgen_ty_2 = 126;
pub const NATIONAL_DEX_PINSIR: _bindgen_ty_2 = 127;
pub const NATIONAL_DEX_TAUROS: _bindgen_ty_2 = 128;
pub const NATIONAL_DEX_MAGIKARP: _bindgen_ty_2 = 129;
pub const NATIONAL_DEX_GYARADOS: _bindgen_ty_2 = 130;
pub const NATIONAL_DEX_LAPRAS: _bindgen_ty_2 = 131;
pub const NATIONAL_DEX_DITTO: _bindgen_ty_2 = 132;
pub const NATIONAL_DEX_EEVEE: _bindgen_ty_2 = 133;
pub const NATIONAL_DEX_VAPOREON: _bindgen_ty_2 = 134;
pub const NATIONAL_DEX_JOLTEON: _bindgen_ty_2 = 135;
pub const NATIONAL_DEX_FLAREON: _bindgen_ty_2 = 136;
pub const NATIONAL_DEX_PORYGON: _bindgen_ty_2 = 137;
pub const NATIONAL_DEX_OMANYTE: _bindgen_ty_2 = 138;
pub const NATIONAL_DEX_OMASTAR: _bindgen_ty_2 = 139;
pub const NATIONAL_DEX_KABUTO: _bindgen_ty_2 = 140;
pub const NATIONAL_DEX_KABUTOPS: _bindgen_ty_2 = 141;
pub const NATIONAL_DEX_AERODACTYL: _bindgen_ty_2 = 142;
pub const NATIONAL_DEX_SNORLAX: _bindgen_ty_2 = 143;
pub const NATIONAL_DEX_ARTICUNO: _bindgen_ty_2 = 144;
pub const NATIONAL_DEX_ZAPDOS: _bindgen_ty_2 = 145;
pub const NATIONAL_DEX_MOLTRES: _bindgen_ty_2 = 146;
pub const NATIONAL_DEX_DRATINI: _bindgen_ty_2 = 147;
pub const NATIONAL_DEX_DRAGONAIR: _bindgen_ty_2 = 148;
pub const NATIONAL_DEX_DRAGONITE: _bindgen_ty_2 = 149;
pub const NATIONAL_DEX_MEWTWO: _bindgen_ty_2 = 150;
pub const NATIONAL_DEX_MEW: _bindgen_ty_2 = 151;
pub const NATIONAL_DEX_CHIKORITA: _bindgen_ty_2 = 152;
pub const NATIONAL_DEX_BAYLEEF: _bindgen_ty_2 = 153;
pub const NATIONAL_DEX_MEGANIUM: _bindgen_ty_2 = 154;
pub const NATIONAL_DEX_CYNDAQUIL: _bindgen_ty_2 = 155;
pub const NATIONAL_DEX_QUILAVA: _bindgen_ty_2 = 156;
pub const NATIONAL_DEX_TYPHLOSION: _bindgen_ty_2 = 157;
pub const NATIONAL_DEX_TOTODILE: _bindgen_ty_2 = 158;
pub const NATIONAL_DEX_CROCONAW: _bindgen_ty_2 = 159;
pub const NATIONAL_DEX_FERALIGATR: _bindgen_ty_2 = 160;
pub const NATIONAL_DEX_SENTRET: _bindgen_ty_2 = 161;
pub const NATIONAL_DEX_FURRET: _bindgen_ty_2 = 162;
pub const NATIONAL_DEX_HOOTHOOT: _bindgen_ty_2 = 163;
pub const NATIONAL_DEX_NOCTOWL: _bindgen_ty_2 = 164;
pub const NATIONAL_DEX_LEDYBA: _bindgen_ty_2 = 165;
pub const NATIONAL_DEX_LEDIAN: _bindgen_ty_2 = 166;
pub const NATIONAL_DEX_SPINARAK: _bindgen_ty_2 = 167;
pub const NATIONAL_DEX_ARIADOS: _bindgen_ty_2 = 168;
pub const NATIONAL_DEX_CROBAT: _bindgen_ty_2 = 169;
pub const NATIONAL_DEX_CHINCHOU: _bindgen_ty_2 = 170;
pub const NATIONAL_DEX_LANTURN: _bindgen_ty_2 = 171;
pub const NATIONAL_DEX_PICHU: _bindgen_ty_2 = 172;
pub const NATIONAL_DEX_CLEFFA: _bindgen_ty_2 = 173;
pub const NATIONAL_DEX_IGGLYBUFF: _bindgen_ty_2 = 174;
pub const NATIONAL_DEX_TOGEPI: _bindgen_ty_2 = 175;
pub const NATIONAL_DEX_TOGETIC: _bindgen_ty_2 = 176;
pub const NATIONAL_DEX_NATU: _bindgen_ty_2 = 177;
pub const NATIONAL_DEX_XATU: _bindgen_ty_2 = 178;
pub const NATIONAL_DEX_MAREEP: _bindgen_ty_2 = 179;
pub const NATIONAL_DEX_FLAAFFY: _bindgen_ty_2 = 180;
pub const NATIONAL_DEX_AMPHAROS: _bindgen_ty_2 = 181;
pub const NATIONAL_DEX_BELLOSSOM: _bindgen_ty_2 = 182;
pub const NATIONAL_DEX_MARILL: _bindgen_ty_2 = 183;
pub const NATIONAL_DEX_AZUMARILL: _bindgen_ty_2 = 184;
pub const NATIONAL_DEX_SUDOWOODO: _bindgen_ty_2 = 185;
pub const NATIONAL_DEX_POLITOED: _bindgen_ty_2 = 186;
pub const NATIONAL_DEX_HOPPIP: _bindgen_ty_2 = 187;
pub const NATIONAL_DEX_SKIPLOOM: _bindgen_ty_2 = 188;
pub const NATIONAL_DEX_JUMPLUFF: _bindgen_ty_2 = 189;
pub const NATIONAL_DEX_AIPOM: _bindgen_ty_2 = 190;
pub const NATIONAL_DEX_SUNKERN: _bindgen_ty_2 = 191;
pub const NATIONAL_DEX_SUNFLORA: _bindgen_ty_2 = 192;
pub const NATIONAL_DEX_YANMA: _bindgen_ty_2 = 193;
pub const NATIONAL_DEX_WOOPER: _bindgen_ty_2 = 194;
pub const NATIONAL_DEX_QUAGSIRE: _bindgen_ty_2 = 195;
pub const NATIONAL_DEX_ESPEON: _bindgen_ty_2 = 196;
pub const NATIONAL_DEX_UMBREON: _bindgen_ty_2 = 197;
pub const NATIONAL_DEX_MURKROW: _bindgen_ty_2 = 198;
pub const NATIONAL_DEX_SLOWKING: _bindgen_ty_2 = 199;
pub const NATIONAL_DEX_MISDREAVUS: _bindgen_ty_2 = 200;
pub const NATIONAL_DEX_UNOWN: _bindgen_ty_2 = 201;
pub const NATIONAL_DEX_WOBBUFFET: _bindgen_ty_2 = 202;
pub const NATIONAL_DEX_GIRAFARIG: _bindgen_ty_2 = 203;
pub const NATIONAL_DEX_PINECO: _bindgen_ty_2 = 204;
pub const NATIONAL_DEX_FORRETRESS: _bindgen_ty_2 = 205;
pub const NATIONAL_DEX_DUNSPARCE: _bindgen_ty_2 = 206;
pub const NATIONAL_DEX_GLIGAR: _bindgen_ty_2 = 207;
pub const NATIONAL_DEX_STEELIX: _bindgen_ty_2 = 208;
pub const NATIONAL_DEX_SNUBBULL: _bindgen_ty_2 = 209;
pub const NATIONAL_DEX_GRANBULL: _bindgen_ty_2 = 210;
pub const NATIONAL_DEX_QWILFISH: _bindgen_ty_2 = 211;
pub const NATIONAL_DEX_SCIZOR: _bindgen_ty_2 = 212;
pub const NATIONAL_DEX_SHUCKLE: _bindgen_ty_2 = 213;
pub const NATIONAL_DEX_HERACROSS: _bindgen_ty_2 = 214;
pub const NATIONAL_DEX_SNEASEL: _bindgen_ty_2 = 215;
pub const NATIONAL_DEX_TEDDIURSA: _bindgen_ty_2 = 216;
pub const NATIONAL_DEX_URSARING: _bindgen_ty_2 = 217;
pub const NATIONAL_DEX_SLUGMA: _bindgen_ty_2 = 218;
pub const NATIONAL_DEX_MAGCARGO: _bindgen_ty_2 = 219;
pub const NATIONAL_DEX_SWINUB: _bindgen_ty_2 = 220;
pub const NATIONAL_DEX_PILOSWINE: _bindgen_ty_2 = 221;
pub const NATIONAL_DEX_CORSOLA: _bindgen_ty_2 = 222;
pub const NATIONAL_DEX_REMORAID: _bindgen_ty_2 = 223;
pub const NATIONAL_DEX_OCTILLERY: _bindgen_ty_2 = 224;
pub const NATIONAL_DEX_DELIBIRD: _bindgen_ty_2 = 225;
pub const NATIONAL_DEX_MANTINE: _bindgen_ty_2 = 226;
pub const NATIONAL_DEX_SKARMORY: _bindgen_ty_2 = 227;
pub const NATIONAL_DEX_HOUNDOUR: _bindgen_ty_2 = 228;
pub const NATIONAL_DEX_HOUNDOOM: _bindgen_ty_2 = 229;
pub const NATIONAL_DEX_KINGDRA: _bindgen_ty_2 = 230;
pub const NATIONAL_DEX_PHANPY: _bindgen_ty_2 = 231;
pub const NATIONAL_DEX_DONPHAN: _bindgen_ty_2 = 232;
pub const NATIONAL_DEX_PORYGON2: _bindgen_ty_2 = 233;
pub const NATIONAL_DEX_STANTLER: _bindgen_ty_2 = 234;
pub const NATIONAL_DEX_SMEARGLE: _bindgen_ty_2 = 235;
pub const NATIONAL_DEX_TYROGUE: _bindgen_ty_2 = 236;
pub const NATIONAL_DEX_HITMONTOP: _bindgen_ty_2 = 237;
pub const NATIONAL_DEX_SMOOCHUM: _bindgen_ty_2 = 238;
pub const NATIONAL_DEX_ELEKID: _bindgen_ty_2 = 239;
pub const NATIONAL_DEX_MAGBY: _bindgen_ty_2 = 240;
pub const NATIONAL_DEX_MILTANK: _bindgen_ty_2 = 241;
pub const NATIONAL_DEX_BLISSEY: _bindgen_ty_2 = 242;
pub const NATIONAL_DEX_RAIKOU: _bindgen_ty_2 = 243;
pub const NATIONAL_DEX_ENTEI: _bindgen_ty_2 = 244;
pub const NATIONAL_DEX_SUICUNE: _bindgen_ty_2 = 245;
pub const NATIONAL_DEX_LARVITAR: _bindgen_ty_2 = 246;
pub const NATIONAL_DEX_PUPITAR: _bindgen_ty_2 = 247;
pub const NATIONAL_DEX_TYRANITAR: _bindgen_ty_2 = 248;
pub const NATIONAL_DEX_LUGIA: _bindgen_ty_2 = 249;
pub const NATIONAL_DEX_HO_OH: _bindgen_ty_2 = 250;
pub const NATIONAL_DEX_CELEBI: _bindgen_ty_2 = 251;
pub const NATIONAL_DEX_TREECKO: _bindgen_ty_2 = 252;
pub const NATIONAL_DEX_GROVYLE: _bindgen_ty_2 = 253;
pub const NATIONAL_DEX_SCEPTILE: _bindgen_ty_2 = 254;
pub const NATIONAL_DEX_TORCHIC: _bindgen_ty_2 = 255;
pub const NATIONAL_DEX_COMBUSKEN: _bindgen_ty_2 = 256;
pub const NATIONAL_DEX_BLAZIKEN: _bindgen_ty_2 = 257;
pub const NATIONAL_DEX_MUDKIP: _bindgen_ty_2 = 258;
pub const NATIONAL_DEX_MARSHTOMP: _bindgen_ty_2 = 259;
pub const NATIONAL_DEX_SWAMPERT: _bindgen_ty_2 = 260;
pub const NATIONAL_DEX_POOCHYENA: _bindgen_ty_2 = 261;
pub const NATIONAL_DEX_MIGHTYENA: _bindgen_ty_2 = 262;
pub const NATIONAL_DEX_ZIGZAGOON: _bindgen_ty_2 = 263;
pub const NATIONAL_DEX_LINOONE: _bindgen_ty_2 = 264;
pub const NATIONAL_DEX_WURMPLE: _bindgen_ty_2 = 265;
pub const NATIONAL_DEX_SILCOON: _bindgen_ty_2 = 266;
pub const NATIONAL_DEX_BEAUTIFLY: _bindgen_ty_2 = 267;
pub const NATIONAL_DEX_CASCOON: _bindgen_ty_2 = 268;
pub const NATIONAL_DEX_DUSTOX: _bindgen_ty_2 = 269;
pub const NATIONAL_DEX_LOTAD: _bindgen_ty_2 = 270;
pub const NATIONAL_DEX_LOMBRE: _bindgen_ty_2 = 271;
pub const NATIONAL_DEX_LUDICOLO: _bindgen_ty_2 = 272;
pub const NATIONAL_DEX_SEEDOT: _bindgen_ty_2 = 273;
pub const NATIONAL_DEX_NUZLEAF: _bindgen_ty_2 = 274;
pub const NATIONAL_DEX_SHIFTRY: _bindgen_ty_2 = 275;
pub const NATIONAL_DEX_TAILLOW: _bindgen_ty_2 = 276;
pub const NATIONAL_DEX_SWELLOW: _bindgen_ty_2 = 277;
pub const NATIONAL_DEX_WINGULL: _bindgen_ty_2 = 278;
pub const NATIONAL_DEX_PELIPPER: _bindgen_ty_2 = 279;
pub const NATIONAL_DEX_RALTS: _bindgen_ty_2 = 280;
pub const NATIONAL_DEX_KIRLIA: _bindgen_ty_2 = 281;
pub const NATIONAL_DEX_GARDEVOIR: _bindgen_ty_2 = 282;
pub const NATIONAL_DEX_SURSKIT: _bindgen_ty_2 = 283;
pub const NATIONAL_DEX_MASQUERAIN: _bindgen_ty_2 = 284;
pub const NATIONAL_DEX_SHROOMISH: _bindgen_ty_2 = 285;
pub const NATIONAL_DEX_BRELOOM: _bindgen_ty_2 = 286;
pub const NATIONAL_DEX_SLAKOTH: _bindgen_ty_2 = 287;
pub const NATIONAL_DEX_VIGOROTH: _bindgen_ty_2 = 288;
pub const NATIONAL_DEX_SLAKING: _bindgen_ty_2 = 289;
pub const NATIONAL_DEX_NINCADA: _bindgen_ty_2 = 290;
pub const NATIONAL_DEX_NINJASK: _bindgen_ty_2 = 291;
pub const NATIONAL_DEX_SHEDINJA: _bindgen_ty_2 = 292;
pub const NATIONAL_DEX_WHISMUR: _bindgen_ty_2 = 293;
pub const NATIONAL_DEX_LOUDRED: _bindgen_ty_2 = 294;
pub const NATIONAL_DEX_EXPLOUD: _bindgen_ty_2 = 295;
pub const NATIONAL_DEX_MAKUHITA: _bindgen_ty_2 = 296;
pub const NATIONAL_DEX_HARIYAMA: _bindgen_ty_2 = 297;
pub const NATIONAL_DEX_AZURILL: _bindgen_ty_2 = 298;
pub const NATIONAL_DEX_NOSEPASS: _bindgen_ty_2 = 299;
pub const NATIONAL_DEX_SKITTY: _bindgen_ty_2 = 300;
pub const NATIONAL_DEX_DELCATTY: _bindgen_ty_2 = 301;
pub const NATIONAL_DEX_SABLEYE: _bindgen_ty_2 = 302;
pub const NATIONAL_DEX_MAWILE: _bindgen_ty_2 = 303;
pub const NATIONAL_DEX_ARON: _bindgen_ty_2 = 304;
pub const NATIONAL_DEX_LAIRON: _bindgen_ty_2 = 305;
pub const NATIONAL_DEX_AGGRON: _bindgen_ty_2 = 306;
pub const NATIONAL_DEX_MEDITITE: _bindgen_ty_2 = 307;
pub const NATIONAL_DEX_MEDICHAM: _bindgen_ty_2 = 308;
pub const NATIONAL_DEX_ELECTRIKE: _bindgen_ty_2 = 309;
pub const NATIONAL_DEX_MANECTRIC: _bindgen_ty_2 = 310;
pub const NATIONAL_DEX_PLUSLE: _bindgen_ty_2 = 311;
pub const NATIONAL_DEX_MINUN: _bindgen_ty_2 = 312;
pub const NATIONAL_DEX_VOLBEAT: _bindgen_ty_2 = 313;
pub const NATIONAL_DEX_ILLUMISE: _bindgen_ty_2 = 314;
pub const NATIONAL_DEX_ROSELIA: _bindgen_ty_2 = 315;
pub const NATIONAL_DEX_GULPIN: _bindgen_ty_2 = 316;
pub const NATIONAL_DEX_SWALOT: _bindgen_ty_2 = 317;
pub const NATIONAL_DEX_CARVANHA: _bindgen_ty_2 = 318;
pub const NATIONAL_DEX_SHARPEDO: _bindgen_ty_2 = 319;
pub const NATIONAL_DEX_WAILMER: _bindgen_ty_2 = 320;
pub const NATIONAL_DEX_WAILORD: _bindgen_ty_2 = 321;
pub const NATIONAL_DEX_NUMEL: _bindgen_ty_2 = 322;
pub const NATIONAL_DEX_CAMERUPT: _bindgen_ty_2 = 323;
pub const NATIONAL_DEX_TORKOAL: _bindgen_ty_2 = 324;
pub const NATIONAL_DEX_SPOINK: _bindgen_ty_2 = 325;
pub const NATIONAL_DEX_GRUMPIG: _bindgen_ty_2 = 326;
pub const NATIONAL_DEX_SPINDA: _bindgen_ty_2 = 327;
pub const NATIONAL_DEX_TRAPINCH: _bindgen_ty_2 = 328;
pub const NATIONAL_DEX_VIBRAVA: _bindgen_ty_2 = 329;
pub const NATIONAL_DEX_FLYGON: _bindgen_ty_2 = 330;
pub const NATIONAL_DEX_CACNEA: _bindgen_ty_2 = 331;
pub const NATIONAL_DEX_CACTURNE: _bindgen_ty_2 = 332;
pub const NATIONAL_DEX_SWABLU: _bindgen_ty_2 = 333;
pub const NATIONAL_DEX_ALTARIA: _bindgen_ty_2 = 334;
pub const NATIONAL_DEX_ZANGOOSE: _bindgen_ty_2 = 335;
pub const NATIONAL_DEX_SEVIPER: _bindgen_ty_2 = 336;
pub const NATIONAL_DEX_LUNATONE: _bindgen_ty_2 = 337;
pub const NATIONAL_DEX_SOLROCK: _bindgen_ty_2 = 338;
pub const NATIONAL_DEX_BARBOACH: _bindgen_ty_2 = 339;
pub const NATIONAL_DEX_WHISCASH: _bindgen_ty_2 = 340;
pub const NATIONAL_DEX_CORPHISH: _bindgen_ty_2 = 341;
pub const NATIONAL_DEX_CRAWDAUNT: _bindgen_ty_2 = 342;
pub const NATIONAL_DEX_BALTOY: _bindgen_ty_2 = 343;
pub const NATIONAL_DEX_CLAYDOL: _bindgen_ty_2 = 344;
pub const NATIONAL_DEX_LILEEP: _bindgen_ty_2 = 345;
pub const NATIONAL_DEX_CRADILY: _bindgen_ty_2 = 346;
pub const NATIONAL_DEX_ANORITH: _bindgen_ty_2 = 347;
pub const NATIONAL_DEX_ARMALDO: _bindgen_ty_2 = 348;
pub const NATIONAL_DEX_FEEBAS: _bindgen_ty_2 = 349;
pub const NATIONAL_DEX_MILOTIC: _bindgen_ty_2 = 350;
pub const NATIONAL_DEX_CASTFORM: _bindgen_ty_2 = 351;
pub const NATIONAL_DEX_KECLEON: _bindgen_ty_2 = 352;
pub const NATIONAL_DEX_SHUPPET: _bindgen_ty_2 = 353;
pub const NATIONAL_DEX_BANETTE: _bindgen_ty_2 = 354;
pub const NATIONAL_DEX_DUSKULL: _bindgen_ty_2 = 355;
pub const NATIONAL_DEX_DUSCLOPS: _bindgen_ty_2 = 356;
pub const NATIONAL_DEX_TROPIUS: _bindgen_ty_2 = 357;
pub const NATIONAL_DEX_CHIMECHO: _bindgen_ty_2 = 358;
pub const NATIONAL_DEX_ABSOL: _bindgen_ty_2 = 359;
pub const NATIONAL_DEX_WYNAUT: _bindgen_ty_2 = 360;
pub const NATIONAL_DEX_SNORUNT: _bindgen_ty_2 = 361;
pub const NATIONAL_DEX_GLALIE: _bindgen_ty_2 = 362;
pub const NATIONAL_DEX_SPHEAL: _bindgen_ty_2 = 363;
pub const NATIONAL_DEX_SEALEO: _bindgen_ty_2 = 364;
pub const NATIONAL_DEX_WALREIN: _bindgen_ty_2 = 365;
pub const NATIONAL_DEX_CLAMPERL: _bindgen_ty_2 = 366;
pub const NATIONAL_DEX_HUNTAIL: _bindgen_ty_2 = 367;
pub const NATIONAL_DEX_GOREBYSS: _bindgen_ty_2 = 368;
pub const NATIONAL_DEX_RELICANTH: _bindgen_ty_2 = 369;
pub const NATIONAL_DEX_LUVDISC: _bindgen_ty_2 = 370;
pub const NATIONAL_DEX_BAGON: _bindgen_ty_2 = 371;
pub const NATIONAL_DEX_SHELGON: _bindgen_ty_2 = 372;
pub const NATIONAL_DEX_SALAMENCE: _bindgen_ty_2 = 373;
pub const NATIONAL_DEX_BELDUM: _bindgen_ty_2 = 374;
pub const NATIONAL_DEX_METANG: _bindgen_ty_2 = 375;
pub const NATIONAL_DEX_METAGROSS: _bindgen_ty_2 = 376;
pub const NATIONAL_DEX_REGIROCK: _bindgen_ty_2 = 377;
pub const NATIONAL_DEX_REGICE: _bindgen_ty_2 = 378;
pub const NATIONAL_DEX_REGISTEEL: _bindgen_ty_2 = 379;
pub const NATIONAL_DEX_LATIAS: _bindgen_ty_2 = 380;
pub const NATIONAL_DEX_LATIOS: _bindgen_ty_2 = 381;
pub const NATIONAL_DEX_KYOGRE: _bindgen_ty_2 = 382;
pub const NATIONAL_DEX_GROUDON: _bindgen_ty_2 = 383;
pub const NATIONAL_DEX_RAYQUAZA: _bindgen_ty_2 = 384;
pub const NATIONAL_DEX_JIRACHI: _bindgen_ty_2 = 385;
pub const NATIONAL_DEX_DEOXYS: _bindgen_ty_2 = 386;
pub const NATIONAL_DEX_TURTWIG: _bindgen_ty_2 = 387;
pub const NATIONAL_DEX_GROTLE: _bindgen_ty_2 = 388;
pub const NATIONAL_DEX_TORTERRA: _bindgen_ty_2 = 389;
pub const NATIONAL_DEX_CHIMCHAR: _bindgen_ty_2 = 390;
pub const NATIONAL_DEX_MONFERNO: _bindgen_ty_2 = 391;
pub const NATIONAL_DEX_INFERNAPE: _bindgen_ty_2 = 392;
pub const NATIONAL_DEX_PIPLUP: _bindgen_ty_2 = 393;
pub const NATIONAL_DEX_PRINPLUP: _bindgen_ty_2 = 394;
pub const NATIONAL_DEX_EMPOLEON: _bindgen_ty_2 = 395;
pub const NATIONAL_DEX_STARLY: _bindgen_ty_2 = 396;
pub const NATIONAL_DEX_STARAVIA: _bindgen_ty_2 = 397;
pub const NATIONAL_DEX_STARAPTOR: _bindgen_ty_2 = 398;
pub const NATIONAL_DEX_BIDOOF: _bindgen_ty_2 = 399;
pub const NATIONAL_DEX_BIBAREL: _bindgen_ty_2 = 400;
pub const NATIONAL_DEX_KRICKETOT: _bindgen_ty_2 = 401;
pub const NATIONAL_DEX_KRICKETUNE: _bindgen_ty_2 = 402;
pub const NATIONAL_DEX_SHINX: _bindgen_ty_2 = 403;
pub const NATIONAL_DEX_LUXIO: _bindgen_ty_2 = 404;
pub const NATIONAL_DEX_LUXRAY: _bindgen_ty_2 = 405;
pub const NATIONAL_DEX_BUDEW: _bindgen_ty_2 = 406;
pub const NATIONAL_DEX_ROSERADE: _bindgen_ty_2 = 407;
pub const NATIONAL_DEX_CRANIDOS: _bindgen_ty_2 = 408;
pub const NATIONAL_DEX_RAMPARDOS: _bindgen_ty_2 = 409;
pub const NATIONAL_DEX_SHIELDON: _bindgen_ty_2 = 410;
pub const NATIONAL_DEX_BASTIODON: _bindgen_ty_2 = 411;
pub const NATIONAL_DEX_BURMY: _bindgen_ty_2 = 412;
pub const NATIONAL_DEX_WORMADAM: _bindgen_ty_2 = 413;
pub const NATIONAL_DEX_MOTHIM: _bindgen_ty_2 = 414;
pub const NATIONAL_DEX_COMBEE: _bindgen_ty_2 = 415;
pub const NATIONAL_DEX_VESPIQUEN: _bindgen_ty_2 = 416;
pub const NATIONAL_DEX_PACHIRISU: _bindgen_ty_2 = 417;
pub const NATIONAL_DEX_BUIZEL: _bindgen_ty_2 = 418;
pub const NATIONAL_DEX_FLOATZEL: _bindgen_ty_2 = 419;
pub const NATIONAL_DEX_CHERUBI: _bindgen_ty_2 = 420;
pub const NATIONAL_DEX_CHERRIM: _bindgen_ty_2 = 421;
pub const NATIONAL_DEX_SHELLOS: _bindgen_ty_2 = 422;
pub const NATIONAL_DEX_GASTRODON: _bindgen_ty_2 = 423;
pub const NATIONAL_DEX_AMBIPOM: _bindgen_ty_2 = 424;
pub const NATIONAL_DEX_DRIFLOON: _bindgen_ty_2 = 425;
pub const NATIONAL_DEX_DRIFBLIM: _bindgen_ty_2 = 426;
pub const NATIONAL_DEX_BUNEARY: _bindgen_ty_2 = 427;
pub const NATIONAL_DEX_LOPUNNY: _bindgen_ty_2 = 428;
pub const NATIONAL_DEX_MISMAGIUS: _bindgen_ty_2 = 429;
pub const NATIONAL_DEX_HONCHKROW: _bindgen_ty_2 = 430;
pub const NATIONAL_DEX_GLAMEOW: _bindgen_ty_2 = 431;
pub const NATIONAL_DEX_PURUGLY: _bindgen_ty_2 = 432;
pub const NATIONAL_DEX_CHINGLING: _bindgen_ty_2 = 433;
pub const NATIONAL_DEX_STUNKY: _bindgen_ty_2 = 434;
pub const NATIONAL_DEX_SKUNTANK: _bindgen_ty_2 = 435;
pub const NATIONAL_DEX_BRONZOR: _bindgen_ty_2 = 436;
pub const NATIONAL_DEX_BRONZONG: _bindgen_ty_2 = 437;
pub const NATIONAL_DEX_BONSLY: _bindgen_ty_2 = 438;
pub const NATIONAL_DEX_MIME_JR: _bindgen_ty_2 = 439;
pub const NATIONAL_DEX_HAPPINY: _bindgen_ty_2 = 440;
pub const NATIONAL_DEX_CHATOT: _bindgen_ty_2 = 441;
pub const NATIONAL_DEX_SPIRITOMB: _bindgen_ty_2 = 442;
pub const NATIONAL_DEX_GIBLE: _bindgen_ty_2 = 443;
pub const NATIONAL_DEX_GABITE: _bindgen_ty_2 = 444;
pub const NATIONAL_DEX_GARCHOMP: _bindgen_ty_2 = 445;
pub const NATIONAL_DEX_MUNCHLAX: _bindgen_ty_2 = 446;
pub const NATIONAL_DEX_RIOLU: _bindgen_ty_2 = 447;
pub const NATIONAL_DEX_LUCARIO: _bindgen_ty_2 = 448;
pub const NATIONAL_DEX_HIPPOPOTAS: _bindgen_ty_2 = 449;
pub const NATIONAL_DEX_HIPPOWDON: _bindgen_ty_2 = 450;
pub const NATIONAL_DEX_SKORUPI: _bindgen_ty_2 = 451;
pub const NATIONAL_DEX_DRAPION: _bindgen_ty_2 = 452;
pub const NATIONAL_DEX_CROAGUNK: _bindgen_ty_2 = 453;
pub const NATIONAL_DEX_TOXICROAK: _bindgen_ty_2 = 454;
pub const NATIONAL_DEX_CARNIVINE: _bindgen_ty_2 = 455;
pub const NATIONAL_DEX_FINNEON: _bindgen_ty_2 = 456;
pub const NATIONAL_DEX_LUMINEON: _bindgen_ty_2 = 457;
pub const NATIONAL_DEX_MANTYKE: _bindgen_ty_2 = 458;
pub const NATIONAL_DEX_SNOVER: _bindgen_ty_2 = 459;
pub const NATIONAL_DEX_ABOMASNOW: _bindgen_ty_2 = 460;
pub const NATIONAL_DEX_WEAVILE: _bindgen_ty_2 = 461;
pub const NATIONAL_DEX_MAGNEZONE: _bindgen_ty_2 = 462;
pub const NATIONAL_DEX_LICKILICKY: _bindgen_ty_2 = 463;
pub const NATIONAL_DEX_RHYPERIOR: _bindgen_ty_2 = 464;
pub const NATIONAL_DEX_TANGROWTH: _bindgen_ty_2 = 465;
pub const NATIONAL_DEX_ELECTIVIRE: _bindgen_ty_2 = 466;
pub const NATIONAL_DEX_MAGMORTAR: _bindgen_ty_2 = 467;
pub const NATIONAL_DEX_TOGEKISS: _bindgen_ty_2 = 468;
pub const NATIONAL_DEX_YANMEGA: _bindgen_ty_2 = 469;
pub const NATIONAL_DEX_LEAFEON: _bindgen_ty_2 = 470;
pub const NATIONAL_DEX_GLACEON: _bindgen_ty_2 = 471;
pub const NATIONAL_DEX_GLISCOR: _bindgen_ty_2 = 472;
pub const NATIONAL_DEX_MAMOSWINE: _bindgen_ty_2 = 473;
pub const NATIONAL_DEX_PORYGON_Z: _bindgen_ty_2 = 474;
pub const NATIONAL_DEX_GALLADE: _bindgen_ty_2 = 475;
pub const NATIONAL_DEX_PROBOPASS: _bindgen_ty_2 = 476;
pub const NATIONAL_DEX_DUSKNOIR: _bindgen_ty_2 = 477;
pub const NATIONAL_DEX_FROSLASS: _bindgen_ty_2 = 478;
pub const NATIONAL_DEX_ROTOM: _bindgen_ty_2 = 479;
pub const NATIONAL_DEX_UXIE: _bindgen_ty_2 = 480;
pub const NATIONAL_DEX_MESPRIT: _bindgen_ty_2 = 481;
pub const NATIONAL_DEX_AZELF: _bindgen_ty_2 = 482;
pub const NATIONAL_DEX_DIALGA: _bindgen_ty_2 = 483;
pub const NATIONAL_DEX_PALKIA: _bindgen_ty_2 = 484;
pub const NATIONAL_DEX_HEATRAN: _bindgen_ty_2 = 485;
pub const NATIONAL_DEX_REGIGIGAS: _bindgen_ty_2 = 486;
pub const NATIONAL_DEX_GIRATINA: _bindgen_ty_2 = 487;
pub const NATIONAL_DEX_CRESSELIA: _bindgen_ty_2 = 488;
pub const NATIONAL_DEX_PHIONE: _bindgen_ty_2 = 489;
pub const NATIONAL_DEX_MANAPHY: _bindgen_ty_2 = 490;
pub const NATIONAL_DEX_DARKRAI: _bindgen_ty_2 = 491;
pub const NATIONAL_DEX_SHAYMIN: _bindgen_ty_2 = 492;
pub const NATIONAL_DEX_ARCEUS: _bindgen_ty_2 = 493;
pub const NATIONAL_DEX_VICTINI: _bindgen_ty_2 = 494;
pub const NATIONAL_DEX_SNIVY: _bindgen_ty_2 = 495;
pub const NATIONAL_DEX_SERVINE: _bindgen_ty_2 = 496;
pub const NATIONAL_DEX_SERPERIOR: _bindgen_ty_2 = 497;
pub const NATIONAL_DEX_TEPIG: _bindgen_ty_2 = 498;
pub const NATIONAL_DEX_PIGNITE: _bindgen_ty_2 = 499;
pub const NATIONAL_DEX_EMBOAR: _bindgen_ty_2 = 500;
pub const NATIONAL_DEX_OSHAWOTT: _bindgen_ty_2 = 501;
pub const NATIONAL_DEX_DEWOTT: _bindgen_ty_2 = 502;
pub const NATIONAL_DEX_SAMUROTT: _bindgen_ty_2 = 503;
pub const NATIONAL_DEX_PATRAT: _bindgen_ty_2 = 504;
pub const NATIONAL_DEX_WATCHOG: _bindgen_ty_2 = 505;
pub const NATIONAL_DEX_LILLIPUP: _bindgen_ty_2 = 506;
pub const NATIONAL_DEX_HERDIER: _bindgen_ty_2 = 507;
pub const NATIONAL_DEX_STOUTLAND: _bindgen_ty_2 = 508;
pub const NATIONAL_DEX_PURRLOIN: _bindgen_ty_2 = 509;
pub const NATIONAL_DEX_LIEPARD: _bindgen_ty_2 = 510;
pub const NATIONAL_DEX_PANSAGE: _bindgen_ty_2 = 511;
pub const NATIONAL_DEX_SIMISAGE: _bindgen_ty_2 = 512;
pub const NATIONAL_DEX_PANSEAR: _bindgen_ty_2 = 513;
pub const NATIONAL_DEX_SIMISEAR: _bindgen_ty_2 = 514;
pub const NATIONAL_DEX_PANPOUR: _bindgen_ty_2 = 515;
pub const NATIONAL_DEX_SIMIPOUR: _bindgen_ty_2 = 516;
pub const NATIONAL_DEX_MUNNA: _bindgen_ty_2 = 517;
pub const NATIONAL_DEX_MUSHARNA: _bindgen_ty_2 = 518;
pub const NATIONAL_DEX_PIDOVE: _bindgen_ty_2 = 519;
pub const NATIONAL_DEX_TRANQUILL: _bindgen_ty_2 = 520;
pub const NATIONAL_DEX_UNFEZANT: _bindgen_ty_2 = 521;
pub const NATIONAL_DEX_BLITZLE: _bindgen_ty_2 = 522;
pub const NATIONAL_DEX_ZEBSTRIKA: _bindgen_ty_2 = 523;
pub const NATIONAL_DEX_ROGGENROLA: _bindgen_ty_2 = 524;
pub const NATIONAL_DEX_BOLDORE: _bindgen_ty_2 = 525;
pub const NATIONAL_DEX_GIGALITH: _bindgen_ty_2 = 526;
pub const NATIONAL_DEX_WOOBAT: _bindgen_ty_2 = 527;
pub const NATIONAL_DEX_SWOOBAT: _bindgen_ty_2 = 528;
pub const NATIONAL_DEX_DRILBUR: _bindgen_ty_2 = 529;
pub const NATIONAL_DEX_EXCADRILL: _bindgen_ty_2 = 530;
pub const NATIONAL_DEX_AUDINO: _bindgen_ty_2 = 531;
pub const NATIONAL_DEX_TIMBURR: _bindgen_ty_2 = 532;
pub const NATIONAL_DEX_GURDURR: _bindgen_ty_2 = 533;
pub const NATIONAL_DEX_CONKELDURR: _bindgen_ty_2 = 534;
pub const NATIONAL_DEX_TYMPOLE: _bindgen_ty_2 = 535;
pub const NATIONAL_DEX_PALPITOAD: _bindgen_ty_2 = 536;
pub const NATIONAL_DEX_SEISMITOAD: _bindgen_ty_2 = 537;
pub const NATIONAL_DEX_THROH: _bindgen_ty_2 = 538;
pub const NATIONAL_DEX_SAWK: _bindgen_ty_2 = 539;
pub const NATIONAL_DEX_SEWADDLE: _bindgen_ty_2 = 540;
pub const NATIONAL_DEX_SWADLOON: _bindgen_ty_2 = 541;
pub const NATIONAL_DEX_LEAVANNY: _bindgen_ty_2 = 542;
pub const NATIONAL_DEX_VENIPEDE: _bindgen_ty_2 = 543;
pub const NATIONAL_DEX_WHIRLIPEDE: _bindgen_ty_2 = 544;
pub const NATIONAL_DEX_SCOLIPEDE: _bindgen_ty_2 = 545;
pub const NATIONAL_DEX_COTTONEE: _bindgen_ty_2 = 546;
pub const NATIONAL_DEX_WHIMSICOTT: _bindgen_ty_2 = 547;
pub const NATIONAL_DEX_PETILIL: _bindgen_ty_2 = 548;
pub const NATIONAL_DEX_LILLIGANT: _bindgen_ty_2 = 549;
pub const NATIONAL_DEX_BASCULIN: _bindgen_ty_2 = 550;
pub const NATIONAL_DEX_SANDILE: _bindgen_ty_2 = 551;
pub const NATIONAL_DEX_KROKOROK: _bindgen_ty_2 = 552;
pub const NATIONAL_DEX_KROOKODILE: _bindgen_ty_2 = 553;
pub const NATIONAL_DEX_DARUMAKA: _bindgen_ty_2 = 554;
pub const NATIONAL_DEX_DARMANITAN: _bindgen_ty_2 = 555;
pub const NATIONAL_DEX_MARACTUS: _bindgen_ty_2 = 556;
pub const NATIONAL_DEX_DWEBBLE: _bindgen_ty_2 = 557;
pub const NATIONAL_DEX_CRUSTLE: _bindgen_ty_2 = 558;
pub const NATIONAL_DEX_SCRAGGY: _bindgen_ty_2 = 559;
pub const NATIONAL_DEX_SCRAFTY: _bindgen_ty_2 = 560;
pub const NATIONAL_DEX_SIGILYPH: _bindgen_ty_2 = 561;
pub const NATIONAL_DEX_YAMASK: _bindgen_ty_2 = 562;
pub const NATIONAL_DEX_COFAGRIGUS: _bindgen_ty_2 = 563;
pub const NATIONAL_DEX_TIRTOUGA: _bindgen_ty_2 = 564;
pub const NATIONAL_DEX_CARRACOSTA: _bindgen_ty_2 = 565;
pub const NATIONAL_DEX_ARCHEN: _bindgen_ty_2 = 566;
pub const NATIONAL_DEX_ARCHEOPS: _bindgen_ty_2 = 567;
pub const NATIONAL_DEX_TRUBBISH: _bindgen_ty_2 = 568;
pub const NATIONAL_DEX_GARBODOR: _bindgen_ty_2 = 569;
pub const NATIONAL_DEX_ZORUA: _bindgen_ty_2 = 570;
pub const NATIONAL_DEX_ZOROARK: _bindgen_ty_2 = 571;
pub const NATIONAL_DEX_MINCCINO: _bindgen_ty_2 = 572;
pub const NATIONAL_DEX_CINCCINO: _bindgen_ty_2 = 573;
pub const NATIONAL_DEX_GOTHITA: _bindgen_ty_2 = 574;
pub const NATIONAL_DEX_GOTHORITA: _bindgen_ty_2 = 575;
pub const NATIONAL_DEX_GOTHITELLE: _bindgen_ty_2 = 576;
pub const NATIONAL_DEX_SOLOSIS: _bindgen_ty_2 = 577;
pub const NATIONAL_DEX_DUOSION: _bindgen_ty_2 = 578;
pub const NATIONAL_DEX_REUNICLUS: _bindgen_ty_2 = 579;
pub const NATIONAL_DEX_DUCKLETT: _bindgen_ty_2 = 580;
pub const NATIONAL_DEX_SWANNA: _bindgen_ty_2 = 581;
pub const NATIONAL_DEX_VANILLITE: _bindgen_ty_2 = 582;
pub const NATIONAL_DEX_VANILLISH: _bindgen_ty_2 = 583;
pub const NATIONAL_DEX_VANILLUXE: _bindgen_ty_2 = 584;
pub const NATIONAL_DEX_DEERLING: _bindgen_ty_2 = 585;
pub const NATIONAL_DEX_SAWSBUCK: _bindgen_ty_2 = 586;
pub const NATIONAL_DEX_EMOLGA: _bindgen_ty_2 = 587;
pub const NATIONAL_DEX_KARRABLAST: _bindgen_ty_2 = 588;
pub const NATIONAL_DEX_ESCAVALIER: _bindgen_ty_2 = 589;
pub const NATIONAL_DEX_FOONGUS: _bindgen_ty_2 = 590;
pub const NATIONAL_DEX_AMOONGUSS: _bindgen_ty_2 = 591;
pub const NATIONAL_DEX_FRILLISH: _bindgen_ty_2 = 592;
pub const NATIONAL_DEX_JELLICENT: _bindgen_ty_2 = 593;
pub const NATIONAL_DEX_ALOMOMOLA: _bindgen_ty_2 = 594;
pub const NATIONAL_DEX_JOLTIK: _bindgen_ty_2 = 595;
pub const NATIONAL_DEX_GALVANTULA: _bindgen_ty_2 = 596;
pub const NATIONAL_DEX_FERROSEED: _bindgen_ty_2 = 597;
pub const NATIONAL_DEX_FERROTHORN: _bindgen_ty_2 = 598;
pub const NATIONAL_DEX_KLINK: _bindgen_ty_2 = 599;
pub const NATIONAL_DEX_KLANG: _bindgen_ty_2 = 600;
pub const NATIONAL_DEX_KLINKLANG: _bindgen_ty_2 = 601;
pub const NATIONAL_DEX_TYNAMO: _bindgen_ty_2 = 602;
pub const NATIONAL_DEX_EELEKTRIK: _bindgen_ty_2 = 603;
pub const NATIONAL_DEX_EELEKTROSS: _bindgen_ty_2 = 604;
pub const NATIONAL_DEX_ELGYEM: _bindgen_ty_2 = 605;
pub const NATIONAL_DEX_BEHEEYEM: _bindgen_ty_2 = 606;
pub const NATIONAL_DEX_LITWICK: _bindgen_ty_2 = 607;
pub const NATIONAL_DEX_LAMPENT: _bindgen_ty_2 = 608;
pub const NATIONAL_DEX_CHANDELURE: _bindgen_ty_2 = 609;
pub const NATIONAL_DEX_AXEW: _bindgen_ty_2 = 610;
pub const NATIONAL_DEX_FRAXURE: _bindgen_ty_2 = 611;
pub const NATIONAL_DEX_HAXORUS: _bindgen_ty_2 = 612;
pub const NATIONAL_DEX_CUBCHOO: _bindgen_ty_2 = 613;
pub const NATIONAL_DEX_BEARTIC: _bindgen_ty_2 = 614;
pub const NATIONAL_DEX_CRYOGONAL: _bindgen_ty_2 = 615;
pub const NATIONAL_DEX_SHELMET: _bindgen_ty_2 = 616;
pub const NATIONAL_DEX_ACCELGOR: _bindgen_ty_2 = 617;
pub const NATIONAL_DEX_STUNFISK: _bindgen_ty_2 = 618;
pub const NATIONAL_DEX_MIENFOO: _bindgen_ty_2 = 619;
pub const NATIONAL_DEX_MIENSHAO: _bindgen_ty_2 = 620;
pub const NATIONAL_DEX_DRUDDIGON: _bindgen_ty_2 = 621;
pub const NATIONAL_DEX_GOLETT: _bindgen_ty_2 = 622;
pub const NATIONAL_DEX_GOLURK: _bindgen_ty_2 = 623;
pub const NATIONAL_DEX_PAWNIARD: _bindgen_ty_2 = 624;
pub const NATIONAL_DEX_BISHARP: _bindgen_ty_2 = 625;
pub const NATIONAL_DEX_BOUFFALANT: _bindgen_ty_2 = 626;
pub const NATIONAL_DEX_RUFFLET: _bindgen_ty_2 = 627;
pub const NATIONAL_DEX_BRAVIARY: _bindgen_ty_2 = 628;
pub const NATIONAL_DEX_VULLABY: _bindgen_ty_2 = 629;
pub const NATIONAL_DEX_MANDIBUZZ: _bindgen_ty_2 = 630;
pub const NATIONAL_DEX_HEATMOR: _bindgen_ty_2 = 631;
pub const NATIONAL_DEX_DURANT: _bindgen_ty_2 = 632;
pub const NATIONAL_DEX_DEINO: _bindgen_ty_2 = 633;
pub const NATIONAL_DEX_ZWEILOUS: _bindgen_ty_2 = 634;
pub const NATIONAL_DEX_HYDREIGON: _bindgen_ty_2 = 635;
pub const NATIONAL_DEX_LARVESTA: _bindgen_ty_2 = 636;
pub const NATIONAL_DEX_VOLCARONA: _bindgen_ty_2 = 637;
pub const NATIONAL_DEX_COBALION: _bindgen_ty_2 = 638;
pub const NATIONAL_DEX_TERRAKION: _bindgen_ty_2 = 639;
pub const NATIONAL_DEX_VIRIZION: _bindgen_ty_2 = 640;
pub const NATIONAL_DEX_TORNADUS: _bindgen_ty_2 = 641;
pub const NATIONAL_DEX_THUNDURUS: _bindgen_ty_2 = 642;
pub const NATIONAL_DEX_RESHIRAM: _bindgen_ty_2 = 643;
pub const NATIONAL_DEX_ZEKROM: _bindgen_ty_2 = 644;
pub const NATIONAL_DEX_LANDORUS: _bindgen_ty_2 = 645;
pub const NATIONAL_DEX_KYUREM: _bindgen_ty_2 = 646;
pub const NATIONAL_DEX_KELDEO: _bindgen_ty_2 = 647;
pub const NATIONAL_DEX_MELOETTA: _bindgen_ty_2 = 648;
pub const NATIONAL_DEX_GENESECT: _bindgen_ty_2 = 649;
pub const NATIONAL_DEX_CHESPIN: _bindgen_ty_2 = 650;
pub const NATIONAL_DEX_QUILLADIN: _bindgen_ty_2 = 651;
pub const NATIONAL_DEX_CHESNAUGHT: _bindgen_ty_2 = 652;
pub const NATIONAL_DEX_FENNEKIN: _bindgen_ty_2 = 653;
pub const NATIONAL_DEX_BRAIXEN: _bindgen_ty_2 = 654;
pub const NATIONAL_DEX_DELPHOX: _bindgen_ty_2 = 655;
pub const NATIONAL_DEX_FROAKIE: _bindgen_ty_2 = 656;
pub const NATIONAL_DEX_FROGADIER: _bindgen_ty_2 = 657;
pub const NATIONAL_DEX_GRENINJA: _bindgen_ty_2 = 658;
pub const NATIONAL_DEX_BUNNELBY: _bindgen_ty_2 = 659;
pub const NATIONAL_DEX_DIGGERSBY: _bindgen_ty_2 = 660;
pub const NATIONAL_DEX_FLETCHLING: _bindgen_ty_2 = 661;
pub const NATIONAL_DEX_FLETCHINDER: _bindgen_ty_2 = 662;
pub const NATIONAL_DEX_TALONFLAME: _bindgen_ty_2 = 663;
pub const NATIONAL_DEX_SCATTERBUG: _bindgen_ty_2 = 664;
pub const NATIONAL_DEX_SPEWPA: _bindgen_ty_2 = 665;
pub const NATIONAL_DEX_VIVILLON: _bindgen_ty_2 = 666;
pub const NATIONAL_DEX_LITLEO: _bindgen_ty_2 = 667;
pub const NATIONAL_DEX_PYROAR: _bindgen_ty_2 = 668;
pub const NATIONAL_DEX_FLABEBE: _bindgen_ty_2 = 669;
pub const NATIONAL_DEX_FLOETTE: _bindgen_ty_2 = 670;
pub const NATIONAL_DEX_FLORGES: _bindgen_ty_2 = 671;
pub const NATIONAL_DEX_SKIDDO: _bindgen_ty_2 = 672;
pub const NATIONAL_DEX_GOGOAT: _bindgen_ty_2 = 673;
pub const NATIONAL_DEX_PANCHAM: _bindgen_ty_2 = 674;
pub const NATIONAL_DEX_PANGORO: _bindgen_ty_2 = 675;
pub const NATIONAL_DEX_FURFROU: _bindgen_ty_2 = 676;
pub const NATIONAL_DEX_ESPURR: _bindgen_ty_2 = 677;
pub const NATIONAL_DEX_MEOWSTIC: _bindgen_ty_2 = 678;
pub const NATIONAL_DEX_HONEDGE: _bindgen_ty_2 = 679;
pub const NATIONAL_DEX_DOUBLADE: _bindgen_ty_2 = 680;
pub const NATIONAL_DEX_AEGISLASH: _bindgen_ty_2 = 681;
pub const NATIONAL_DEX_SPRITZEE: _bindgen_ty_2 = 682;
pub const NATIONAL_DEX_AROMATISSE: _bindgen_ty_2 = 683;
pub const NATIONAL_DEX_SWIRLIX: _bindgen_ty_2 = 684;
pub const NATIONAL_DEX_SLURPUFF: _bindgen_ty_2 = 685;
pub const NATIONAL_DEX_INKAY: _bindgen_ty_2 = 686;
pub const NATIONAL_DEX_MALAMAR: _bindgen_ty_2 = 687;
pub const NATIONAL_DEX_BINACLE: _bindgen_ty_2 = 688;
pub const NATIONAL_DEX_BARBARACLE: _bindgen_ty_2 = 689;
pub const NATIONAL_DEX_SKRELP: _bindgen_ty_2 = 690;
pub const NATIONAL_DEX_DRAGALGE: _bindgen_ty_2 = 691;
pub const NATIONAL_DEX_CLAUNCHER: _bindgen_ty_2 = 692;
pub const NATIONAL_DEX_CLAWITZER: _bindgen_ty_2 = 693;
pub const NATIONAL_DEX_HELIOPTILE: _bindgen_ty_2 = 694;
pub const NATIONAL_DEX_HELIOLISK: _bindgen_ty_2 = 695;
pub const NATIONAL_DEX_TYRUNT: _bindgen_ty_2 = 696;
pub const NATIONAL_DEX_TYRANTRUM: _bindgen_ty_2 = 697;
pub const NATIONAL_DEX_AMAURA: _bindgen_ty_2 = 698;
pub const NATIONAL_DEX_AURORUS: _bindgen_ty_2 = 699;
pub const NATIONAL_DEX_SYLVEON: _bindgen_ty_2 = 700;
pub const NATIONAL_DEX_HAWLUCHA: _bindgen_ty_2 = 701;
pub const NATIONAL_DEX_DEDENNE: _bindgen_ty_2 = 702;
pub const NATIONAL_DEX_CARBINK: _bindgen_ty_2 = 703;
pub const NATIONAL_DEX_GOOMY: _bindgen_ty_2 = 704;
pub const NATIONAL_DEX_SLIGGOO: _bindgen_ty_2 = 705;
pub const NATIONAL_DEX_GOODRA: _bindgen_ty_2 = 706;
pub const NATIONAL_DEX_KLEFKI: _bindgen_ty_2 = 707;
pub const NATIONAL_DEX_PHANTUMP: _bindgen_ty_2 = 708;
pub const NATIONAL_DEX_TREVENANT: _bindgen_ty_2 = 709;
pub const NATIONAL_DEX_PUMPKABOO: _bindgen_ty_2 = 710;
pub const NATIONAL_DEX_GOURGEIST: _bindgen_ty_2 = 711;
pub const NATIONAL_DEX_BERGMITE: _bindgen_ty_2 = 712;
pub const NATIONAL_DEX_AVALUGG: _bindgen_ty_2 = 713;
pub const NATIONAL_DEX_NOIBAT: _bindgen_ty_2 = 714;
pub const NATIONAL_DEX_NOIVERN: _bindgen_ty_2 = 715;
pub const NATIONAL_DEX_XERNEAS: _bindgen_ty_2 = 716;
pub const NATIONAL_DEX_YVELTAL: _bindgen_ty_2 = 717;
pub const NATIONAL_DEX_ZYGARDE: _bindgen_ty_2 = 718;
pub const NATIONAL_DEX_DIANCIE: _bindgen_ty_2 = 719;
pub const NATIONAL_DEX_HOOPA: _bindgen_ty_2 = 720;
pub const NATIONAL_DEX_VOLCANION: _bindgen_ty_2 = 721;
pub const NATIONAL_DEX_ROWLET: _bindgen_ty_2 = 722;
pub const NATIONAL_DEX_DARTRIX: _bindgen_ty_2 = 723;
pub const NATIONAL_DEX_DECIDUEYE: _bindgen_ty_2 = 724;
pub const NATIONAL_DEX_LITTEN: _bindgen_ty_2 = 725;
pub const NATIONAL_DEX_TORRACAT: _bindgen_ty_2 = 726;
pub const NATIONAL_DEX_INCINEROAR: _bindgen_ty_2 = 727;
pub const NATIONAL_DEX_POPPLIO: _bindgen_ty_2 = 728;
pub const NATIONAL_DEX_BRIONNE: _bindgen_ty_2 = 729;
pub const NATIONAL_DEX_PRIMARINA: _bindgen_ty_2 = 730;
pub const NATIONAL_DEX_PIKIPEK: _bindgen_ty_2 = 731;
pub const NATIONAL_DEX_TRUMBEAK: _bindgen_ty_2 = 732;
pub const NATIONAL_DEX_TOUCANNON: _bindgen_ty_2 = 733;
pub const NATIONAL_DEX_YUNGOOS: _bindgen_ty_2 = 734;
pub const NATIONAL_DEX_GUMSHOOS: _bindgen_ty_2 = 735;
pub const NATIONAL_DEX_GRUBBIN: _bindgen_ty_2 = 736;
pub const NATIONAL_DEX_CHARJABUG: _bindgen_ty_2 = 737;
pub const NATIONAL_DEX_VIKAVOLT: _bindgen_ty_2 = 738;
pub const NATIONAL_DEX_CRABRAWLER: _bindgen_ty_2 = 739;
pub const NATIONAL_DEX_CRABOMINABLE: _bindgen_ty_2 = 740;
pub const NATIONAL_DEX_ORICORIO: _bindgen_ty_2 = 741;
pub const NATIONAL_DEX_CUTIEFLY: _bindgen_ty_2 = 742;
pub const NATIONAL_DEX_RIBOMBEE: _bindgen_ty_2 = 743;
pub const NATIONAL_DEX_ROCKRUFF: _bindgen_ty_2 = 744;
pub const NATIONAL_DEX_LYCANROC: _bindgen_ty_2 = 745;
pub const NATIONAL_DEX_WISHIWASHI: _bindgen_ty_2 = 746;
pub const NATIONAL_DEX_MAREANIE: _bindgen_ty_2 = 747;
pub const NATIONAL_DEX_TOXAPEX: _bindgen_ty_2 = 748;
pub const NATIONAL_DEX_MUDBRAY: _bindgen_ty_2 = 749;
pub const NATIONAL_DEX_MUDSDALE: _bindgen_ty_2 = 750;
pub const NATIONAL_DEX_DEWPIDER: _bindgen_ty_2 = 751;
pub const NATIONAL_DEX_ARAQUANID: _bindgen_ty_2 = 752;
pub const NATIONAL_DEX_FOMANTIS: _bindgen_ty_2 = 753;
pub const NATIONAL_DEX_LURANTIS: _bindgen_ty_2 = 754;
pub const NATIONAL_DEX_MORELULL: _bindgen_ty_2 = 755;
pub const NATIONAL_DEX_SHIINOTIC: _bindgen_ty_2 = 756;
pub const NATIONAL_DEX_SALANDIT: _bindgen_ty_2 = 757;
pub const NATIONAL_DEX_SALAZZLE: _bindgen_ty_2 = 758;
pub const NATIONAL_DEX_STUFFUL: _bindgen_ty_2 = 759;
pub const NATIONAL_DEX_BEWEAR: _bindgen_ty_2 = 760;
pub const NATIONAL_DEX_BOUNSWEET: _bindgen_ty_2 = 761;
pub const NATIONAL_DEX_STEENEE: _bindgen_ty_2 = 762;
pub const NATIONAL_DEX_TSAREENA: _bindgen_ty_2 = 763;
pub const NATIONAL_DEX_COMFEY: _bindgen_ty_2 = 764;
pub const NATIONAL_DEX_ORANGURU: _bindgen_ty_2 = 765;
pub const NATIONAL_DEX_PASSIMIAN: _bindgen_ty_2 = 766;
pub const NATIONAL_DEX_WIMPOD: _bindgen_ty_2 = 767;
pub const NATIONAL_DEX_GOLISOPOD: _bindgen_ty_2 = 768;
pub const NATIONAL_DEX_SANDYGAST: _bindgen_ty_2 = 769;
pub const NATIONAL_DEX_PALOSSAND: _bindgen_ty_2 = 770;
pub const NATIONAL_DEX_PYUKUMUKU: _bindgen_ty_2 = 771;
pub const NATIONAL_DEX_TYPE_NULL: _bindgen_ty_2 = 772;
pub const NATIONAL_DEX_SILVALLY: _bindgen_ty_2 = 773;
pub const NATIONAL_DEX_MINIOR: _bindgen_ty_2 = 774;
pub const NATIONAL_DEX_KOMALA: _bindgen_ty_2 = 775;
pub const NATIONAL_DEX_TURTONATOR: _bindgen_ty_2 = 776;
pub const NATIONAL_DEX_TOGEDEMARU: _bindgen_ty_2 = 777;
pub const NATIONAL_DEX_MIMIKYU: _bindgen_ty_2 = 778;
pub const NATIONAL_DEX_BRUXISH: _bindgen_ty_2 = 779;
pub const NATIONAL_DEX_DRAMPA: _bindgen_ty_2 = 780;
pub const NATIONAL_DEX_DHELMISE: _bindgen_ty_2 = 781;
pub const NATIONAL_DEX_JANGMO_O: _bindgen_ty_2 = 782;
pub const NATIONAL_DEX_HAKAMO_O: _bindgen_ty_2 = 783;
pub const NATIONAL_DEX_KOMMO_O: _bindgen_ty_2 = 784;
pub const NATIONAL_DEX_TAPU_KOKO: _bindgen_ty_2 = 785;
pub const NATIONAL_DEX_TAPU_LELE: _bindgen_ty_2 = 786;
pub const NATIONAL_DEX_TAPU_BULU: _bindgen_ty_2 = 787;
pub const NATIONAL_DEX_TAPU_FINI: _bindgen_ty_2 = 788;
pub const NATIONAL_DEX_COSMOG: _bindgen_ty_2 = 789;
pub const NATIONAL_DEX_COSMOEM: _bindgen_ty_2 = 790;
pub const NATIONAL_DEX_SOLGALEO: _bindgen_ty_2 = 791;
pub const NATIONAL_DEX_LUNALA: _bindgen_ty_2 = 792;
pub const NATIONAL_DEX_NIHILEGO: _bindgen_ty_2 = 793;
pub const NATIONAL_DEX_BUZZWOLE: _bindgen_ty_2 = 794;
pub const NATIONAL_DEX_PHEROMOSA: _bindgen_ty_2 = 795;
pub const NATIONAL_DEX_XURKITREE: _bindgen_ty_2 = 796;
pub const NATIONAL_DEX_CELESTEELA: _bindgen_ty_2 = 797;
pub const NATIONAL_DEX_KARTANA: _bindgen_ty_2 = 798;
pub const NATIONAL_DEX_GUZZLORD: _bindgen_ty_2 = 799;
pub const NATIONAL_DEX_NECROZMA: _bindgen_ty_2 = 800;
pub const NATIONAL_DEX_MAGEARNA: _bindgen_ty_2 = 801;
pub const NATIONAL_DEX_MARSHADOW: _bindgen_ty_2 = 802;
pub const NATIONAL_DEX_POIPOLE: _bindgen_ty_2 = 803;
pub const NATIONAL_DEX_NAGANADEL: _bindgen_ty_2 = 804;
pub const NATIONAL_DEX_STAKATAKA: _bindgen_ty_2 = 805;
pub const NATIONAL_DEX_BLACEPHALON: _bindgen_ty_2 = 806;
pub const NATIONAL_DEX_ZERAORA: _bindgen_ty_2 = 807;
pub const NATIONAL_DEX_MELTAN: _bindgen_ty_2 = 808;
pub const NATIONAL_DEX_MELMETAL: _bindgen_ty_2 = 809;
pub const NATIONAL_DEX_GROOKEY: _bindgen_ty_2 = 810;
pub const NATIONAL_DEX_THWACKEY: _bindgen_ty_2 = 811;
pub const NATIONAL_DEX_RILLABOOM: _bindgen_ty_2 = 812;
pub const NATIONAL_DEX_SCORBUNNY: _bindgen_ty_2 = 813;
pub const NATIONAL_DEX_RABOOT: _bindgen_ty_2 = 814;
pub const NATIONAL_DEX_CINDERACE: _bindgen_ty_2 = 815;
pub const NATIONAL_DEX_SOBBLE: _bindgen_ty_2 = 816;
pub const NATIONAL_DEX_DRIZZILE: _bindgen_ty_2 = 817;
pub const NATIONAL_DEX_INTELEON: _bindgen_ty_2 = 818;
pub const NATIONAL_DEX_SKWOVET: _bindgen_ty_2 = 819;
pub const NATIONAL_DEX_GREEDENT: _bindgen_ty_2 = 820;
pub const NATIONAL_DEX_ROOKIDEE: _bindgen_ty_2 = 821;
pub const NATIONAL_DEX_CORVISQUIRE: _bindgen_ty_2 = 822;
pub const NATIONAL_DEX_CORVIKNIGHT: _bindgen_ty_2 = 823;
pub const NATIONAL_DEX_BLIPBUG: _bindgen_ty_2 = 824;
pub const NATIONAL_DEX_DOTTLER: _bindgen_ty_2 = 825;
pub const NATIONAL_DEX_ORBEETLE: _bindgen_ty_2 = 826;
pub const NATIONAL_DEX_NICKIT: _bindgen_ty_2 = 827;
pub const NATIONAL_DEX_THIEVUL: _bindgen_ty_2 = 828;
pub const NATIONAL_DEX_GOSSIFLEUR: _bindgen_ty_2 = 829;
pub const NATIONAL_DEX_ELDEGOSS: _bindgen_ty_2 = 830;
pub const NATIONAL_DEX_WOOLOO: _bindgen_ty_2 = 831;
pub const NATIONAL_DEX_DUBWOOL: _bindgen_ty_2 = 832;
pub const NATIONAL_DEX_CHEWTLE: _bindgen_ty_2 = 833;
pub const NATIONAL_DEX_DREDNAW: _bindgen_ty_2 = 834;
pub const NATIONAL_DEX_YAMPER: _bindgen_ty_2 = 835;
pub const NATIONAL_DEX_BOLTUND: _bindgen_ty_2 = 836;
pub const NATIONAL_DEX_ROLYCOLY: _bindgen_ty_2 = 837;
pub const NATIONAL_DEX_CARKOL: _bindgen_ty_2 = 838;
pub const NATIONAL_DEX_COALOSSAL: _bindgen_ty_2 = 839;
pub const NATIONAL_DEX_APPLIN: _bindgen_ty_2 = 840;
pub const NATIONAL_DEX_FLAPPLE: _bindgen_ty_2 = 841;
pub const NATIONAL_DEX_APPLETUN: _bindgen_ty_2 = 842;
pub const NATIONAL_DEX_SILICOBRA: _bindgen_ty_2 = 843;
pub const NATIONAL_DEX_SANDACONDA: _bindgen_ty_2 = 844;
pub const NATIONAL_DEX_CRAMORANT: _bindgen_ty_2 = 845;
pub const NATIONAL_DEX_ARROKUDA: _bindgen_ty_2 = 846;
pub const NATIONAL_DEX_BARRASKEWDA: _bindgen_ty_2 = 847;
pub const NATIONAL_DEX_TOXEL: _bindgen_ty_2 = 848;
pub const NATIONAL_DEX_TOXTRICITY: _bindgen_ty_2 = 849;
pub const NATIONAL_DEX_SIZZLIPEDE: _bindgen_ty_2 = 850;
pub const NATIONAL_DEX_CENTISKORCH: _bindgen_ty_2 = 851;
pub const NATIONAL_DEX_CLOBBOPUS: _bindgen_ty_2 = 852;
pub const NATIONAL_DEX_GRAPPLOCT: _bindgen_ty_2 = 853;
pub const NATIONAL_DEX_SINISTEA: _bindgen_ty_2 = 854;
pub const NATIONAL_DEX_POLTEAGEIST: _bindgen_ty_2 = 855;
pub const NATIONAL_DEX_HATENNA: _bindgen_ty_2 = 856;
pub const NATIONAL_DEX_HATTREM: _bindgen_ty_2 = 857;
pub const NATIONAL_DEX_HATTERENE: _bindgen_ty_2 = 858;
pub const NATIONAL_DEX_IMPIDIMP: _bindgen_ty_2 = 859;
pub const NATIONAL_DEX_MORGREM: _bindgen_ty_2 = 860;
pub const NATIONAL_DEX_GRIMMSNARL: _bindgen_ty_2 = 861;
pub const NATIONAL_DEX_OBSTAGOON: _bindgen_ty_2 = 862;
pub const NATIONAL_DEX_PERRSERKER: _bindgen_ty_2 = 863;
pub const NATIONAL_DEX_CURSOLA: _bindgen_ty_2 = 864;
pub const NATIONAL_DEX_SIRFETCHD: _bindgen_ty_2 = 865;
pub const NATIONAL_DEX_MR_RIME: _bindgen_ty_2 = 866;
pub const NATIONAL_DEX_RUNERIGUS: _bindgen_ty_2 = 867;
pub const NATIONAL_DEX_MILCERY: _bindgen_ty_2 = 868;
pub const NATIONAL_DEX_ALCREMIE: _bindgen_ty_2 = 869;
pub const NATIONAL_DEX_FALINKS: _bindgen_ty_2 = 870;
pub const NATIONAL_DEX_PINCURCHIN: _bindgen_ty_2 = 871;
pub const NATIONAL_DEX_SNOM: _bindgen_ty_2 = 872;
pub const NATIONAL_DEX_FROSMOTH: _bindgen_ty_2 = 873;
pub const NATIONAL_DEX_STONJOURNER: _bindgen_ty_2 = 874;
pub const NATIONAL_DEX_EISCUE: _bindgen_ty_2 = 875;
pub const NATIONAL_DEX_INDEEDEE: _bindgen_ty_2 = 876;
pub const NATIONAL_DEX_MORPEKO: _bindgen_ty_2 = 877;
pub const NATIONAL_DEX_CUFANT: _bindgen_ty_2 = 878;
pub const NATIONAL_DEX_COPPERAJAH: _bindgen_ty_2 = 879;
pub const NATIONAL_DEX_DRACOZOLT: _bindgen_ty_2 = 880;
pub const NATIONAL_DEX_ARCTOZOLT: _bindgen_ty_2 = 881;
pub const NATIONAL_DEX_DRACOVISH: _bindgen_ty_2 = 882;
pub const NATIONAL_DEX_ARCTOVISH: _bindgen_ty_2 = 883;
pub const NATIONAL_DEX_DURALUDON: _bindgen_ty_2 = 884;
pub const NATIONAL_DEX_DREEPY: _bindgen_ty_2 = 885;
pub const NATIONAL_DEX_DRAKLOAK: _bindgen_ty_2 = 886;
pub const NATIONAL_DEX_DRAGAPULT: _bindgen_ty_2 = 887;
pub const NATIONAL_DEX_ZACIAN: _bindgen_ty_2 = 888;
pub const NATIONAL_DEX_ZAMAZENTA: _bindgen_ty_2 = 889;
pub const NATIONAL_DEX_ETERNATUS: _bindgen_ty_2 = 890;
pub const NATIONAL_DEX_KUBFU: _bindgen_ty_2 = 891;
pub const NATIONAL_DEX_URSHIFU: _bindgen_ty_2 = 892;
pub const NATIONAL_DEX_ZARUDE: _bindgen_ty_2 = 893;
pub const NATIONAL_DEX_REGIELEKI: _bindgen_ty_2 = 894;
pub const NATIONAL_DEX_REGIDRAGO: _bindgen_ty_2 = 895;
pub const NATIONAL_DEX_GLASTRIER: _bindgen_ty_2 = 896;
pub const NATIONAL_DEX_SPECTRIER: _bindgen_ty_2 = 897;
pub const NATIONAL_DEX_CALYREX: _bindgen_ty_2 = 898;
pub const NATIONAL_DEX_WYRDEER: _bindgen_ty_2 = 899;
pub const NATIONAL_DEX_KLEAVOR: _bindgen_ty_2 = 900;
pub const NATIONAL_DEX_URSALUNA: _bindgen_ty_2 = 901;
pub const NATIONAL_DEX_BASCULEGION: _bindgen_ty_2 = 902;
pub const NATIONAL_DEX_SNEASLER: _bindgen_ty_2 = 903;
pub const NATIONAL_DEX_OVERQWIL: _bindgen_ty_2 = 904;
pub const NATIONAL_DEX_ENAMORUS: _bindgen_ty_2 = 905;
pub const NATIONAL_DEX_SPRIGATITO: _bindgen_ty_2 = 906;
pub const NATIONAL_DEX_FLORAGATO: _bindgen_ty_2 = 907;
pub const NATIONAL_DEX_MEOWSCARADA: _bindgen_ty_2 = 908;
pub const NATIONAL_DEX_FUECOCO: _bindgen_ty_2 = 909;
pub const NATIONAL_DEX_CROCALOR: _bindgen_ty_2 = 910;
pub const NATIONAL_DEX_SKELEDIRGE: _bindgen_ty_2 = 911;
pub const NATIONAL_DEX_QUAXLY: _bindgen_ty_2 = 912;
pub const NATIONAL_DEX_QUAXWELL: _bindgen_ty_2 = 913;
pub const NATIONAL_DEX_QUAQUAVAL: _bindgen_ty_2 = 914;
pub const NATIONAL_DEX_LECHONK: _bindgen_ty_2 = 915;
pub const NATIONAL_DEX_OINKOLOGNE: _bindgen_ty_2 = 916;
pub const NATIONAL_DEX_TAROUNTULA: _bindgen_ty_2 = 917;
pub const NATIONAL_DEX_SPIDOPS: _bindgen_ty_2 = 918;
pub const NATIONAL_DEX_NYMBLE: _bindgen_ty_2 = 919;
pub const NATIONAL_DEX_LOKIX: _bindgen_ty_2 = 920;
pub const NATIONAL_DEX_PAWMI: _bindgen_ty_2 = 921;
pub const NATIONAL_DEX_PAWMO: _bindgen_ty_2 = 922;
pub const NATIONAL_DEX_PAWMOT: _bindgen_ty_2 = 923;
pub const NATIONAL_DEX_TANDEMAUS: _bindgen_ty_2 = 924;
pub const NATIONAL_DEX_MAUSHOLD: _bindgen_ty_2 = 925;
pub const NATIONAL_DEX_FIDOUGH: _bindgen_ty_2 = 926;
pub const NATIONAL_DEX_DACHSBUN: _bindgen_ty_2 = 927;
pub const NATIONAL_DEX_SMOLIV: _bindgen_ty_2 = 928;
pub const NATIONAL_DEX_DOLLIV: _bindgen_ty_2 = 929;
pub const NATIONAL_DEX_ARBOLIVA: _bindgen_ty_2 = 930;
pub const NATIONAL_DEX_SQUAWKABILLY: _bindgen_ty_2 = 931;
pub const NATIONAL_DEX_NACLI: _bindgen_ty_2 = 932;
pub const NATIONAL_DEX_NACLSTACK: _bindgen_ty_2 = 933;
pub const NATIONAL_DEX_GARGANACL: _bindgen_ty_2 = 934;
pub const NATIONAL_DEX_CHARCADET: _bindgen_ty_2 = 935;
pub const NATIONAL_DEX_ARMAROUGE: _bindgen_ty_2 = 936;
pub const NATIONAL_DEX_CERULEDGE: _bindgen_ty_2 = 937;
pub const NATIONAL_DEX_TADBULB: _bindgen_ty_2 = 938;
pub const NATIONAL_DEX_BELLIBOLT: _bindgen_ty_2 = 939;
pub const NATIONAL_DEX_WATTREL: _bindgen_ty_2 = 940;
pub const NATIONAL_DEX_KILOWATTREL: _bindgen_ty_2 = 941;
pub const NATIONAL_DEX_MASCHIFF: _bindgen_ty_2 = 942;
pub const NATIONAL_DEX_MABOSSTIFF: _bindgen_ty_2 = 943;
pub const NATIONAL_DEX_SHROODLE: _bindgen_ty_2 = 944;
pub const NATIONAL_DEX_GRAFAIAI: _bindgen_ty_2 = 945;
pub const NATIONAL_DEX_BRAMBLIN: _bindgen_ty_2 = 946;
pub const NATIONAL_DEX_BRAMBLEGHAST: _bindgen_ty_2 = 947;
pub const NATIONAL_DEX_TOEDSCOOL: _bindgen_ty_2 = 948;
pub const NATIONAL_DEX_TOEDSCRUEL: _bindgen_ty_2 = 949;
pub const NATIONAL_DEX_KLAWF: _bindgen_ty_2 = 950;
pub const NATIONAL_DEX_CAPSAKID: _bindgen_ty_2 = 951;
pub const NATIONAL_DEX_SCOVILLAIN: _bindgen_ty_2 = 952;
pub const NATIONAL_DEX_RELLOR: _bindgen_ty_2 = 953;
pub const NATIONAL_DEX_RABSCA: _bindgen_ty_2 = 954;
pub const NATIONAL_DEX_FLITTLE: _bindgen_ty_2 = 955;
pub const NATIONAL_DEX_ESPATHRA: _bindgen_ty_2 = 956;
pub const NATIONAL_DEX_TINKATINK: _bindgen_ty_2 = 957;
pub const NATIONAL_DEX_TINKATUFF: _bindgen_ty_2 = 958;
pub const NATIONAL_DEX_TINKATON: _bindgen_ty_2 = 959;
pub const NATIONAL_DEX_WIGLETT: _bindgen_ty_2 = 960;
pub const NATIONAL_DEX_WUGTRIO: _bindgen_ty_2 = 961;
pub const NATIONAL_DEX_BOMBIRDIER: _bindgen_ty_2 = 962;
pub const NATIONAL_DEX_FINIZEN: _bindgen_ty_2 = 963;
pub const NATIONAL_DEX_PALAFIN: _bindgen_ty_2 = 964;
pub const NATIONAL_DEX_VAROOM: _bindgen_ty_2 = 965;
pub const NATIONAL_DEX_REVAVROOM: _bindgen_ty_2 = 966;
pub const NATIONAL_DEX_CYCLIZAR: _bindgen_ty_2 = 967;
pub const NATIONAL_DEX_ORTHWORM: _bindgen_ty_2 = 968;
pub const NATIONAL_DEX_GLIMMET: _bindgen_ty_2 = 969;
pub const NATIONAL_DEX_GLIMMORA: _bindgen_ty_2 = 970;
pub const NATIONAL_DEX_GREAVARD: _bindgen_ty_2 = 971;
pub const NATIONAL_DEX_HOUNDSTONE: _bindgen_ty_2 = 972;
pub const NATIONAL_DEX_FLAMIGO: _bindgen_ty_2 = 973;
pub const NATIONAL_DEX_CETODDLE: _bindgen_ty_2 = 974;
pub const NATIONAL_DEX_CETITAN: _bindgen_ty_2 = 975;
pub const NATIONAL_DEX_VELUZA: _bindgen_ty_2 = 976;
pub const NATIONAL_DEX_DONDOZO: _bindgen_ty_2 = 977;
pub const NATIONAL_DEX_TATSUGIRI: _bindgen_ty_2 = 978;
pub const NATIONAL_DEX_ANNIHILAPE: _bindgen_ty_2 = 979;
pub const NATIONAL_DEX_CLODSIRE: _bindgen_ty_2 = 980;
pub const NATIONAL_DEX_FARIGIRAF: _bindgen_ty_2 = 981;
pub const NATIONAL_DEX_DUDUNSPARCE: _bindgen_ty_2 = 982;
pub const NATIONAL_DEX_KINGAMBIT: _bindgen_ty_2 = 983;
pub const NATIONAL_DEX_GREAT_TUSK: _bindgen_ty_2 = 984;
pub const NATIONAL_DEX_SCREAM_TAIL: _bindgen_ty_2 = 985;
pub const NATIONAL_DEX_BRUTE_BONNET: _bindgen_ty_2 = 986;
pub const NATIONAL_DEX_FLUTTER_MANE: _bindgen_ty_2 = 987;
pub const NATIONAL_DEX_SLITHER_WING: _bindgen_ty_2 = 988;
pub const NATIONAL_DEX_SANDY_SHOCKS: _bindgen_ty_2 = 989;
pub const NATIONAL_DEX_IRON_TREADS: _bindgen_ty_2 = 990;
pub const NATIONAL_DEX_IRON_BUNDLE: _bindgen_ty_2 = 991;
pub const NATIONAL_DEX_IRON_HANDS: _bindgen_ty_2 = 992;
pub const NATIONAL_DEX_IRON_JUGULIS: _bindgen_ty_2 = 993;
pub const NATIONAL_DEX_IRON_MOTH: _bindgen_ty_2 = 994;
pub const NATIONAL_DEX_IRON_THORNS: _bindgen_ty_2 = 995;
pub const NATIONAL_DEX_FRIGIBAX: _bindgen_ty_2 = 996;
pub const NATIONAL_DEX_ARCTIBAX: _bindgen_ty_2 = 997;
pub const NATIONAL_DEX_BAXCALIBUR: _bindgen_ty_2 = 998;
pub const NATIONAL_DEX_GIMMIGHOUL: _bindgen_ty_2 = 999;
pub const NATIONAL_DEX_GHOLDENGO: _bindgen_ty_2 = 1000;
pub const NATIONAL_DEX_WO_CHIEN: _bindgen_ty_2 = 1001;
pub const NATIONAL_DEX_CHIEN_PAO: _bindgen_ty_2 = 1002;
pub const NATIONAL_DEX_TING_LU: _bindgen_ty_2 = 1003;
pub const NATIONAL_DEX_CHI_YU: _bindgen_ty_2 = 1004;
pub const NATIONAL_DEX_ROARING_MOON: _bindgen_ty_2 = 1005;
pub const NATIONAL_DEX_IRON_VALIANT: _bindgen_ty_2 = 1006;
pub const NATIONAL_DEX_KORAIDON: _bindgen_ty_2 = 1007;
pub const NATIONAL_DEX_MIRAIDON: _bindgen_ty_2 = 1008;
pub const NATIONAL_DEX_WALKING_WAKE: _bindgen_ty_2 = 1009;
pub const NATIONAL_DEX_IRON_LEAVES: _bindgen_ty_2 = 1010;
pub const NATIONAL_DEX_DIPPLIN: _bindgen_ty_2 = 1011;
pub const NATIONAL_DEX_POLTCHAGEIST: _bindgen_ty_2 = 1012;
pub const NATIONAL_DEX_SINISTCHA: _bindgen_ty_2 = 1013;
pub const NATIONAL_DEX_OKIDOGI: _bindgen_ty_2 = 1014;
pub const NATIONAL_DEX_MUNKIDORI: _bindgen_ty_2 = 1015;
pub const NATIONAL_DEX_FEZANDIPITI: _bindgen_ty_2 = 1016;
pub const NATIONAL_DEX_OGERPON: _bindgen_ty_2 = 1017;
pub const NATIONAL_DEX_ARCHALUDON: _bindgen_ty_2 = 1018;
pub const NATIONAL_DEX_HYDRAPPLE: _bindgen_ty_2 = 1019;
pub const NATIONAL_DEX_GOUGING_FIRE: _bindgen_ty_2 = 1020;
pub const NATIONAL_DEX_RAGING_BOLT: _bindgen_ty_2 = 1021;
pub const NATIONAL_DEX_IRON_BOULDER: _bindgen_ty_2 = 1022;
pub const NATIONAL_DEX_IRON_CROWN: _bindgen_ty_2 = 1023;
pub const NATIONAL_DEX_TERAPAGOS: _bindgen_ty_2 = 1024;
pub const NATIONAL_DEX_PECHARUNT: _bindgen_ty_2 = 1025;
pub type _bindgen_ty_2 = ::core::ffi::c_uint;
pub const HOENN_DEX_NONE: _bindgen_ty_3 = 0;
pub const HOENN_DEX_TREECKO: _bindgen_ty_3 = 1;
pub const HOENN_DEX_GROVYLE: _bindgen_ty_3 = 2;
pub const HOENN_DEX_SCEPTILE: _bindgen_ty_3 = 3;
pub const HOENN_DEX_TORCHIC: _bindgen_ty_3 = 4;
pub const HOENN_DEX_COMBUSKEN: _bindgen_ty_3 = 5;
pub const HOENN_DEX_BLAZIKEN: _bindgen_ty_3 = 6;
pub const HOENN_DEX_MUDKIP: _bindgen_ty_3 = 7;
pub const HOENN_DEX_MARSHTOMP: _bindgen_ty_3 = 8;
pub const HOENN_DEX_SWAMPERT: _bindgen_ty_3 = 9;
pub const HOENN_DEX_POOCHYENA: _bindgen_ty_3 = 10;
pub const HOENN_DEX_MIGHTYENA: _bindgen_ty_3 = 11;
pub const HOENN_DEX_ZIGZAGOON: _bindgen_ty_3 = 12;
pub const HOENN_DEX_LINOONE: _bindgen_ty_3 = 13;
pub const HOENN_DEX_OBSTAGOON: _bindgen_ty_3 = 14;
pub const HOENN_DEX_WURMPLE: _bindgen_ty_3 = 15;
pub const HOENN_DEX_SILCOON: _bindgen_ty_3 = 16;
pub const HOENN_DEX_BEAUTIFLY: _bindgen_ty_3 = 17;
pub const HOENN_DEX_CASCOON: _bindgen_ty_3 = 18;
pub const HOENN_DEX_DUSTOX: _bindgen_ty_3 = 19;
pub const HOENN_DEX_LOTAD: _bindgen_ty_3 = 20;
pub const HOENN_DEX_LOMBRE: _bindgen_ty_3 = 21;
pub const HOENN_DEX_LUDICOLO: _bindgen_ty_3 = 22;
pub const HOENN_DEX_SEEDOT: _bindgen_ty_3 = 23;
pub const HOENN_DEX_NUZLEAF: _bindgen_ty_3 = 24;
pub const HOENN_DEX_SHIFTRY: _bindgen_ty_3 = 25;
pub const HOENN_DEX_TAILLOW: _bindgen_ty_3 = 26;
pub const HOENN_DEX_SWELLOW: _bindgen_ty_3 = 27;
pub const HOENN_DEX_WINGULL: _bindgen_ty_3 = 28;
pub const HOENN_DEX_PELIPPER: _bindgen_ty_3 = 29;
pub const HOENN_DEX_RALTS: _bindgen_ty_3 = 30;
pub const HOENN_DEX_KIRLIA: _bindgen_ty_3 = 31;
pub const HOENN_DEX_GARDEVOIR: _bindgen_ty_3 = 32;
pub const HOENN_DEX_GALLADE: _bindgen_ty_3 = 33;
pub const HOENN_DEX_SURSKIT: _bindgen_ty_3 = 34;
pub const HOENN_DEX_MASQUERAIN: _bindgen_ty_3 = 35;
pub const HOENN_DEX_SHROOMISH: _bindgen_ty_3 = 36;
pub const HOENN_DEX_BRELOOM: _bindgen_ty_3 = 37;
pub const HOENN_DEX_SLAKOTH: _bindgen_ty_3 = 38;
pub const HOENN_DEX_VIGOROTH: _bindgen_ty_3 = 39;
pub const HOENN_DEX_SLAKING: _bindgen_ty_3 = 40;
pub const HOENN_DEX_ABRA: _bindgen_ty_3 = 41;
pub const HOENN_DEX_KADABRA: _bindgen_ty_3 = 42;
pub const HOENN_DEX_ALAKAZAM: _bindgen_ty_3 = 43;
pub const HOENN_DEX_NINCADA: _bindgen_ty_3 = 44;
pub const HOENN_DEX_NINJASK: _bindgen_ty_3 = 45;
pub const HOENN_DEX_SHEDINJA: _bindgen_ty_3 = 46;
pub const HOENN_DEX_WHISMUR: _bindgen_ty_3 = 47;
pub const HOENN_DEX_LOUDRED: _bindgen_ty_3 = 48;
pub const HOENN_DEX_EXPLOUD: _bindgen_ty_3 = 49;
pub const HOENN_DEX_MAKUHITA: _bindgen_ty_3 = 50;
pub const HOENN_DEX_HARIYAMA: _bindgen_ty_3 = 51;
pub const HOENN_DEX_GOLDEEN: _bindgen_ty_3 = 52;
pub const HOENN_DEX_SEAKING: _bindgen_ty_3 = 53;
pub const HOENN_DEX_MAGIKARP: _bindgen_ty_3 = 54;
pub const HOENN_DEX_GYARADOS: _bindgen_ty_3 = 55;
pub const HOENN_DEX_AZURILL: _bindgen_ty_3 = 56;
pub const HOENN_DEX_MARILL: _bindgen_ty_3 = 57;
pub const HOENN_DEX_AZUMARILL: _bindgen_ty_3 = 58;
pub const HOENN_DEX_GEODUDE: _bindgen_ty_3 = 59;
pub const HOENN_DEX_GRAVELER: _bindgen_ty_3 = 60;
pub const HOENN_DEX_GOLEM: _bindgen_ty_3 = 61;
pub const HOENN_DEX_NOSEPASS: _bindgen_ty_3 = 62;
pub const HOENN_DEX_PROBOPASS: _bindgen_ty_3 = 63;
pub const HOENN_DEX_SKITTY: _bindgen_ty_3 = 64;
pub const HOENN_DEX_DELCATTY: _bindgen_ty_3 = 65;
pub const HOENN_DEX_ZUBAT: _bindgen_ty_3 = 66;
pub const HOENN_DEX_GOLBAT: _bindgen_ty_3 = 67;
pub const HOENN_DEX_CROBAT: _bindgen_ty_3 = 68;
pub const HOENN_DEX_TENTACOOL: _bindgen_ty_3 = 69;
pub const HOENN_DEX_TENTACRUEL: _bindgen_ty_3 = 70;
pub const HOENN_DEX_SABLEYE: _bindgen_ty_3 = 71;
pub const HOENN_DEX_MAWILE: _bindgen_ty_3 = 72;
pub const HOENN_DEX_ARON: _bindgen_ty_3 = 73;
pub const HOENN_DEX_LAIRON: _bindgen_ty_3 = 74;
pub const HOENN_DEX_AGGRON: _bindgen_ty_3 = 75;
pub const HOENN_DEX_MACHOP: _bindgen_ty_3 = 76;
pub const HOENN_DEX_MACHOKE: _bindgen_ty_3 = 77;
pub const HOENN_DEX_MACHAMP: _bindgen_ty_3 = 78;
pub const HOENN_DEX_MEDITITE: _bindgen_ty_3 = 79;
pub const HOENN_DEX_MEDICHAM: _bindgen_ty_3 = 80;
pub const HOENN_DEX_ELECTRIKE: _bindgen_ty_3 = 81;
pub const HOENN_DEX_MANECTRIC: _bindgen_ty_3 = 82;
pub const HOENN_DEX_PLUSLE: _bindgen_ty_3 = 83;
pub const HOENN_DEX_MINUN: _bindgen_ty_3 = 84;
pub const HOENN_DEX_MAGNEMITE: _bindgen_ty_3 = 85;
pub const HOENN_DEX_MAGNETON: _bindgen_ty_3 = 86;
pub const HOENN_DEX_MAGNEZONE: _bindgen_ty_3 = 87;
pub const HOENN_DEX_VOLTORB: _bindgen_ty_3 = 88;
pub const HOENN_DEX_ELECTRODE: _bindgen_ty_3 = 89;
pub const HOENN_DEX_VOLBEAT: _bindgen_ty_3 = 90;
pub const HOENN_DEX_ILLUMISE: _bindgen_ty_3 = 91;
pub const HOENN_DEX_ODDISH: _bindgen_ty_3 = 92;
pub const HOENN_DEX_GLOOM: _bindgen_ty_3 = 93;
pub const HOENN_DEX_VILEPLUME: _bindgen_ty_3 = 94;
pub const HOENN_DEX_BELLOSSOM: _bindgen_ty_3 = 95;
pub const HOENN_DEX_DODUO: _bindgen_ty_3 = 96;
pub const HOENN_DEX_DODRIO: _bindgen_ty_3 = 97;
pub const HOENN_DEX_BUDEW: _bindgen_ty_3 = 98;
pub const HOENN_DEX_ROSELIA: _bindgen_ty_3 = 99;
pub const HOENN_DEX_ROSERADE: _bindgen_ty_3 = 100;
pub const HOENN_DEX_GULPIN: _bindgen_ty_3 = 101;
pub const HOENN_DEX_SWALOT: _bindgen_ty_3 = 102;
pub const HOENN_DEX_CARVANHA: _bindgen_ty_3 = 103;
pub const HOENN_DEX_SHARPEDO: _bindgen_ty_3 = 104;
pub const HOENN_DEX_WAILMER: _bindgen_ty_3 = 105;
pub const HOENN_DEX_WAILORD: _bindgen_ty_3 = 106;
pub const HOENN_DEX_NUMEL: _bindgen_ty_3 = 107;
pub const HOENN_DEX_CAMERUPT: _bindgen_ty_3 = 108;
pub const HOENN_DEX_SLUGMA: _bindgen_ty_3 = 109;
pub const HOENN_DEX_MAGCARGO: _bindgen_ty_3 = 110;
pub const HOENN_DEX_TORKOAL: _bindgen_ty_3 = 111;
pub const HOENN_DEX_GRIMER: _bindgen_ty_3 = 112;
pub const HOENN_DEX_MUK: _bindgen_ty_3 = 113;
pub const HOENN_DEX_KOFFING: _bindgen_ty_3 = 114;
pub const HOENN_DEX_WEEZING: _bindgen_ty_3 = 115;
pub const HOENN_DEX_SPOINK: _bindgen_ty_3 = 116;
pub const HOENN_DEX_GRUMPIG: _bindgen_ty_3 = 117;
pub const HOENN_DEX_SANDSHREW: _bindgen_ty_3 = 118;
pub const HOENN_DEX_SANDSLASH: _bindgen_ty_3 = 119;
pub const HOENN_DEX_SPINDA: _bindgen_ty_3 = 120;
pub const HOENN_DEX_SKARMORY: _bindgen_ty_3 = 121;
pub const HOENN_DEX_TRAPINCH: _bindgen_ty_3 = 122;
pub const HOENN_DEX_VIBRAVA: _bindgen_ty_3 = 123;
pub const HOENN_DEX_FLYGON: _bindgen_ty_3 = 124;
pub const HOENN_DEX_CACNEA: _bindgen_ty_3 = 125;
pub const HOENN_DEX_CACTURNE: _bindgen_ty_3 = 126;
pub const HOENN_DEX_SWABLU: _bindgen_ty_3 = 127;
pub const HOENN_DEX_ALTARIA: _bindgen_ty_3 = 128;
pub const HOENN_DEX_ZANGOOSE: _bindgen_ty_3 = 129;
pub const HOENN_DEX_SEVIPER: _bindgen_ty_3 = 130;
pub const HOENN_DEX_LUNATONE: _bindgen_ty_3 = 131;
pub const HOENN_DEX_SOLROCK: _bindgen_ty_3 = 132;
pub const HOENN_DEX_BARBOACH: _bindgen_ty_3 = 133;
pub const HOENN_DEX_WHISCASH: _bindgen_ty_3 = 134;
pub const HOENN_DEX_CORPHISH: _bindgen_ty_3 = 135;
pub const HOENN_DEX_CRAWDAUNT: _bindgen_ty_3 = 136;
pub const HOENN_DEX_BALTOY: _bindgen_ty_3 = 137;
pub const HOENN_DEX_CLAYDOL: _bindgen_ty_3 = 138;
pub const HOENN_DEX_LILEEP: _bindgen_ty_3 = 139;
pub const HOENN_DEX_CRADILY: _bindgen_ty_3 = 140;
pub const HOENN_DEX_ANORITH: _bindgen_ty_3 = 141;
pub const HOENN_DEX_ARMALDO: _bindgen_ty_3 = 142;
pub const HOENN_DEX_IGGLYBUFF: _bindgen_ty_3 = 143;
pub const HOENN_DEX_JIGGLYPUFF: _bindgen_ty_3 = 144;
pub const HOENN_DEX_WIGGLYTUFF: _bindgen_ty_3 = 145;
pub const HOENN_DEX_FEEBAS: _bindgen_ty_3 = 146;
pub const HOENN_DEX_MILOTIC: _bindgen_ty_3 = 147;
pub const HOENN_DEX_CASTFORM: _bindgen_ty_3 = 148;
pub const HOENN_DEX_STARYU: _bindgen_ty_3 = 149;
pub const HOENN_DEX_STARMIE: _bindgen_ty_3 = 150;
pub const HOENN_DEX_KECLEON: _bindgen_ty_3 = 151;
pub const HOENN_DEX_SHUPPET: _bindgen_ty_3 = 152;
pub const HOENN_DEX_BANETTE: _bindgen_ty_3 = 153;
pub const HOENN_DEX_DUSKULL: _bindgen_ty_3 = 154;
pub const HOENN_DEX_DUSCLOPS: _bindgen_ty_3 = 155;
pub const HOENN_DEX_DUSKNOIR: _bindgen_ty_3 = 156;
pub const HOENN_DEX_TROPIUS: _bindgen_ty_3 = 157;
pub const HOENN_DEX_CHINGLING: _bindgen_ty_3 = 158;
pub const HOENN_DEX_CHIMECHO: _bindgen_ty_3 = 159;
pub const HOENN_DEX_ABSOL: _bindgen_ty_3 = 160;
pub const HOENN_DEX_VULPIX: _bindgen_ty_3 = 161;
pub const HOENN_DEX_NINETALES: _bindgen_ty_3 = 162;
pub const HOENN_DEX_PICHU: _bindgen_ty_3 = 163;
pub const HOENN_DEX_PIKACHU: _bindgen_ty_3 = 164;
pub const HOENN_DEX_RAICHU: _bindgen_ty_3 = 165;
pub const HOENN_DEX_PSYDUCK: _bindgen_ty_3 = 166;
pub const HOENN_DEX_GOLDUCK: _bindgen_ty_3 = 167;
pub const HOENN_DEX_WYNAUT: _bindgen_ty_3 = 168;
pub const HOENN_DEX_WOBBUFFET: _bindgen_ty_3 = 169;
pub const HOENN_DEX_NATU: _bindgen_ty_3 = 170;
pub const HOENN_DEX_XATU: _bindgen_ty_3 = 171;
pub const HOENN_DEX_GIRAFARIG: _bindgen_ty_3 = 172;
pub const HOENN_DEX_FARIGIRAF: _bindgen_ty_3 = 173;
pub const HOENN_DEX_PHANPY: _bindgen_ty_3 = 174;
pub const HOENN_DEX_DONPHAN: _bindgen_ty_3 = 175;
pub const HOENN_DEX_PINSIR: _bindgen_ty_3 = 176;
pub const HOENN_DEX_HERACROSS: _bindgen_ty_3 = 177;
pub const HOENN_DEX_RHYHORN: _bindgen_ty_3 = 178;
pub const HOENN_DEX_RHYDON: _bindgen_ty_3 = 179;
pub const HOENN_DEX_RHYPERIOR: _bindgen_ty_3 = 180;
pub const HOENN_DEX_SNORUNT: _bindgen_ty_3 = 181;
pub const HOENN_DEX_GLALIE: _bindgen_ty_3 = 182;
pub const HOENN_DEX_FROSLASS: _bindgen_ty_3 = 183;
pub const HOENN_DEX_SPHEAL: _bindgen_ty_3 = 184;
pub const HOENN_DEX_SEALEO: _bindgen_ty_3 = 185;
pub const HOENN_DEX_WALREIN: _bindgen_ty_3 = 186;
pub const HOENN_DEX_CLAMPERL: _bindgen_ty_3 = 187;
pub const HOENN_DEX_HUNTAIL: _bindgen_ty_3 = 188;
pub const HOENN_DEX_GOREBYSS: _bindgen_ty_3 = 189;
pub const HOENN_DEX_RELICANTH: _bindgen_ty_3 = 190;
pub const HOENN_DEX_CORSOLA: _bindgen_ty_3 = 191;
pub const HOENN_DEX_CURSOLA: _bindgen_ty_3 = 192;
pub const HOENN_DEX_CHINCHOU: _bindgen_ty_3 = 193;
pub const HOENN_DEX_LANTURN: _bindgen_ty_3 = 194;
pub const HOENN_DEX_LUVDISC: _bindgen_ty_3 = 195;
pub const HOENN_DEX_HORSEA: _bindgen_ty_3 = 196;
pub const HOENN_DEX_SEADRA: _bindgen_ty_3 = 197;
pub const HOENN_DEX_KINGDRA: _bindgen_ty_3 = 198;
pub const HOENN_DEX_BAGON: _bindgen_ty_3 = 199;
pub const HOENN_DEX_SHELGON: _bindgen_ty_3 = 200;
pub const HOENN_DEX_SALAMENCE: _bindgen_ty_3 = 201;
pub const HOENN_DEX_BELDUM: _bindgen_ty_3 = 202;
pub const HOENN_DEX_METANG: _bindgen_ty_3 = 203;
pub const HOENN_DEX_METAGROSS: _bindgen_ty_3 = 204;
pub const HOENN_DEX_REGIROCK: _bindgen_ty_3 = 205;
pub const HOENN_DEX_REGICE: _bindgen_ty_3 = 206;
pub const HOENN_DEX_REGISTEEL: _bindgen_ty_3 = 207;
pub const HOENN_DEX_LATIAS: _bindgen_ty_3 = 208;
pub const HOENN_DEX_LATIOS: _bindgen_ty_3 = 209;
pub const HOENN_DEX_KYOGRE: _bindgen_ty_3 = 210;
pub const HOENN_DEX_GROUDON: _bindgen_ty_3 = 211;
pub const HOENN_DEX_RAYQUAZA: _bindgen_ty_3 = 212;
pub const HOENN_DEX_JIRACHI: _bindgen_ty_3 = 213;
pub const HOENN_DEX_DEOXYS: _bindgen_ty_3 = 214;
pub type _bindgen_ty_3 = ::core::ffi::c_uint;
pub const DEX_MODE_HOENN: _bindgen_ty_4 = 0;
pub const DEX_MODE_NATIONAL: _bindgen_ty_4 = 1;
pub type _bindgen_ty_4 = ::core::ffi::c_uint;
pub const FLAG_GET_SEEN: _bindgen_ty_5 = 0;
pub const FLAG_GET_CAUGHT: _bindgen_ty_5 = 1;
pub const FLAG_SET_SEEN: _bindgen_ty_5 = 2;
pub const FLAG_SET_CAUGHT: _bindgen_ty_5 = 3;
pub type _bindgen_ty_5 = ::core::ffi::c_uint;
pub const EvolutionMethods_EVO_NONE: EvolutionMethods = 0;
pub const EvolutionMethods_EVO_FRIENDSHIP: EvolutionMethods = 1;
pub const EvolutionMethods_EVO_FRIENDSHIP_DAY: EvolutionMethods = 2;
pub const EvolutionMethods_EVO_FRIENDSHIP_NIGHT: EvolutionMethods = 3;
pub const EvolutionMethods_EVO_LEVEL: EvolutionMethods = 4;
pub const EvolutionMethods_EVO_TRADE: EvolutionMethods = 5;
pub const EvolutionMethods_EVO_TRADE_ITEM: EvolutionMethods = 6;
pub const EvolutionMethods_EVO_ITEM: EvolutionMethods = 7;
pub const EvolutionMethods_EVO_LEVEL_ATK_GT_DEF: EvolutionMethods = 8;
pub const EvolutionMethods_EVO_LEVEL_ATK_EQ_DEF: EvolutionMethods = 9;
pub const EvolutionMethods_EVO_LEVEL_ATK_LT_DEF: EvolutionMethods = 10;
pub const EvolutionMethods_EVO_LEVEL_SILCOON: EvolutionMethods = 11;
pub const EvolutionMethods_EVO_LEVEL_CASCOON: EvolutionMethods = 12;
pub const EvolutionMethods_EVO_LEVEL_NINJASK: EvolutionMethods = 13;
pub const EvolutionMethods_EVO_LEVEL_SHEDINJA: EvolutionMethods = 14;
pub const EvolutionMethods_EVO_BEAUTY: EvolutionMethods = 15;
pub const EvolutionMethods_EVO_LEVEL_FEMALE: EvolutionMethods = 16;
pub const EvolutionMethods_EVO_LEVEL_MALE: EvolutionMethods = 17;
pub const EvolutionMethods_EVO_LEVEL_NIGHT: EvolutionMethods = 18;
pub const EvolutionMethods_EVO_LEVEL_DAY: EvolutionMethods = 19;
pub const EvolutionMethods_EVO_LEVEL_DUSK: EvolutionMethods = 20;
pub const EvolutionMethods_EVO_ITEM_HOLD_DAY: EvolutionMethods = 21;
pub const EvolutionMethods_EVO_ITEM_HOLD_NIGHT: EvolutionMethods = 22;
pub const EvolutionMethods_EVO_MOVE: EvolutionMethods = 23;
pub const EvolutionMethods_EVO_FRIENDSHIP_MOVE_TYPE: EvolutionMethods = 24;
pub const EvolutionMethods_EVO_MAPSEC: EvolutionMethods = 25;
pub const EvolutionMethods_EVO_ITEM_MALE: EvolutionMethods = 26;
pub const EvolutionMethods_EVO_ITEM_FEMALE: EvolutionMethods = 27;
pub const EvolutionMethods_EVO_LEVEL_RAIN: EvolutionMethods = 28;
pub const EvolutionMethods_EVO_SPECIFIC_MON_IN_PARTY: EvolutionMethods = 29;
pub const EvolutionMethods_EVO_LEVEL_DARK_TYPE_MON_IN_PARTY: EvolutionMethods = 30;
pub const EvolutionMethods_EVO_TRADE_SPECIFIC_MON: EvolutionMethods = 31;
pub const EvolutionMethods_EVO_SPECIFIC_MAP: EvolutionMethods = 32;
pub const EvolutionMethods_EVO_LEVEL_NATURE_AMPED: EvolutionMethods = 33;
pub const EvolutionMethods_EVO_LEVEL_NATURE_LOW_KEY: EvolutionMethods = 34;
pub const EvolutionMethods_EVO_CRITICAL_HITS: EvolutionMethods = 35;
pub const EvolutionMethods_EVO_SCRIPT_TRIGGER_DMG: EvolutionMethods = 36;
pub const EvolutionMethods_EVO_DARK_SCROLL: EvolutionMethods = 37;
pub const EvolutionMethods_EVO_WATER_SCROLL: EvolutionMethods = 38;
pub const EvolutionMethods_EVO_ITEM_NIGHT: EvolutionMethods = 39;
pub const EvolutionMethods_EVO_ITEM_DAY: EvolutionMethods = 40;
pub const EvolutionMethods_EVO_ITEM_HOLD: EvolutionMethods = 41;
pub const EvolutionMethods_EVO_LEVEL_FOG: EvolutionMethods = 42;
pub const EvolutionMethods_EVO_MOVE_TWO_SEGMENT: EvolutionMethods = 43;
pub const EvolutionMethods_EVO_MOVE_THREE_SEGMENT: EvolutionMethods = 44;
pub const EvolutionMethods_EVO_LEVEL_FAMILY_OF_THREE: EvolutionMethods = 45;
pub const EvolutionMethods_EVO_LEVEL_FAMILY_OF_FOUR: EvolutionMethods = 46;
pub const EvolutionMethods_EVO_USE_MOVE_TWENTY_TIMES: EvolutionMethods = 47;
pub const EvolutionMethods_EVO_RECOIL_DAMAGE_MALE: EvolutionMethods = 48;
pub const EvolutionMethods_EVO_RECOIL_DAMAGE_FEMALE: EvolutionMethods = 49;
pub const EvolutionMethods_EVO_ITEM_COUNT_999: EvolutionMethods = 50;
pub const EvolutionMethods_EVO_DEFEAT_THREE_WITH_ITEM: EvolutionMethods = 51;
pub const EvolutionMethods_EVO_OVERWORLD_STEPS: EvolutionMethods = 52;
pub type EvolutionMethods = ::core::ffi::c_uint;
pub const EvolutionMode_EVO_MODE_NORMAL: EvolutionMode = 0;
pub const EvolutionMode_EVO_MODE_CANT_STOP: EvolutionMode = 1;
pub const EvolutionMode_EVO_MODE_TRADE: EvolutionMode = 2;
pub const EvolutionMode_EVO_MODE_ITEM_USE: EvolutionMode = 3;
pub const EvolutionMode_EVO_MODE_ITEM_CHECK: EvolutionMode = 4;
pub const EvolutionMode_EVO_MODE_BATTLE_SPECIAL: EvolutionMode = 5;
pub const EvolutionMode_EVO_MODE_OVERWORLD_SPECIAL: EvolutionMode = 6;
pub const EvolutionMode_EVO_MODE_BATTLE_ONLY: EvolutionMode = 7;
pub type EvolutionMode = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Coords8 {
    pub x: s8,
    pub y: s8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Coords8"][::core::mem::size_of::<Coords8>() - 2usize];
    ["Alignment of Coords8"][::core::mem::align_of::<Coords8>() - 1usize];
    ["Offset of field: Coords8::x"][::core::mem::offset_of!(Coords8, x) - 0usize];
    ["Offset of field: Coords8::y"][::core::mem::offset_of!(Coords8, y) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UCoords8 {
    pub x: u8_,
    pub y: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UCoords8"][::core::mem::size_of::<UCoords8>() - 2usize];
    ["Alignment of UCoords8"][::core::mem::align_of::<UCoords8>() - 1usize];
    ["Offset of field: UCoords8::x"][::core::mem::offset_of!(UCoords8, x) - 0usize];
    ["Offset of field: UCoords8::y"][::core::mem::offset_of!(UCoords8, y) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Coords16 {
    pub x: s16,
    pub y: s16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Coords16"][::core::mem::size_of::<Coords16>() - 4usize];
    ["Alignment of Coords16"][::core::mem::align_of::<Coords16>() - 2usize];
    ["Offset of field: Coords16::x"][::core::mem::offset_of!(Coords16, x) - 0usize];
    ["Offset of field: Coords16::y"][::core::mem::offset_of!(Coords16, y) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UCoords16 {
    pub x: u16_,
    pub y: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UCoords16"][::core::mem::size_of::<UCoords16>() - 4usize];
    ["Alignment of UCoords16"][::core::mem::align_of::<UCoords16>() - 2usize];
    ["Offset of field: UCoords16::x"][::core::mem::offset_of!(UCoords16, x) - 0usize];
    ["Offset of field: UCoords16::y"][::core::mem::offset_of!(UCoords16, y) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Coords32 {
    pub x: s32,
    pub y: s32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Coords32"][::core::mem::size_of::<Coords32>() - 8usize];
    ["Alignment of Coords32"][::core::mem::align_of::<Coords32>() - 4usize];
    ["Offset of field: Coords32::x"][::core::mem::offset_of!(Coords32, x) - 0usize];
    ["Offset of field: Coords32::y"][::core::mem::offset_of!(Coords32, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UCoords32 {
    pub x: u32_,
    pub y: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UCoords32"][::core::mem::size_of::<UCoords32>() - 8usize];
    ["Alignment of UCoords32"][::core::mem::align_of::<UCoords32>() - 4usize];
    ["Offset of field: UCoords32::x"][::core::mem::offset_of!(UCoords32, x) - 0usize];
    ["Offset of field: UCoords32::y"][::core::mem::offset_of!(UCoords32, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Time {
    pub days: s16,
    pub hours: s8,
    pub minutes: s8,
    pub seconds: s8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Time"][::core::mem::size_of::<Time>() - 6usize];
    ["Alignment of Time"][::core::mem::align_of::<Time>() - 2usize];
    ["Offset of field: Time::days"][::core::mem::offset_of!(Time, days) - 0usize];
    ["Offset of field: Time::hours"][::core::mem::offset_of!(Time, hours) - 2usize];
    ["Offset of field: Time::minutes"][::core::mem::offset_of!(Time, minutes) - 3usize];
    ["Offset of field: Time::seconds"][::core::mem::offset_of!(Time, seconds) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SaveBlock3 {
    pub test: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SaveBlock3"][::core::mem::size_of::<SaveBlock3>() - 1usize];
    ["Alignment of SaveBlock3"][::core::mem::align_of::<SaveBlock3>() - 1usize];
    ["Offset of field: SaveBlock3::test"][::core::mem::offset_of!(SaveBlock3, test) - 0usize];
};
unsafe extern "C" {
    pub static mut gSaveBlock3Ptr: *mut SaveBlock3;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Pokedex {
    pub order: u8_,
    pub mode: u8_,
    pub nationalMagic: u8_,
    pub unknown2: u8_,
    pub unownPersonality: u32_,
    pub spindaPersonality: u32_,
    pub unknown3: u32_,
    pub filler: [u8_; 104usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Pokedex"][::core::mem::size_of::<Pokedex>() - 120usize];
    ["Alignment of Pokedex"][::core::mem::align_of::<Pokedex>() - 4usize];
    ["Offset of field: Pokedex::order"][::core::mem::offset_of!(Pokedex, order) - 0usize];
    ["Offset of field: Pokedex::mode"][::core::mem::offset_of!(Pokedex, mode) - 1usize];
    ["Offset of field: Pokedex::nationalMagic"]
        [::core::mem::offset_of!(Pokedex, nationalMagic) - 2usize];
    ["Offset of field: Pokedex::unknown2"][::core::mem::offset_of!(Pokedex, unknown2) - 3usize];
    ["Offset of field: Pokedex::unownPersonality"]
        [::core::mem::offset_of!(Pokedex, unownPersonality) - 4usize];
    ["Offset of field: Pokedex::spindaPersonality"]
        [::core::mem::offset_of!(Pokedex, spindaPersonality) - 8usize];
    ["Offset of field: Pokedex::unknown3"][::core::mem::offset_of!(Pokedex, unknown3) - 12usize];
    ["Offset of field: Pokedex::filler"][::core::mem::offset_of!(Pokedex, filler) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PokemonJumpRecords {
    pub jumpsInRow: u16_,
    pub unused1: u16_,
    pub excellentsInRow: u16_,
    pub gamesWithMaxPlayers: u16_,
    pub unused2: u32_,
    pub bestJumpScore: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PokemonJumpRecords"][::core::mem::size_of::<PokemonJumpRecords>() - 16usize];
    ["Alignment of PokemonJumpRecords"][::core::mem::align_of::<PokemonJumpRecords>() - 4usize];
    ["Offset of field: PokemonJumpRecords::jumpsInRow"]
        [::core::mem::offset_of!(PokemonJumpRecords, jumpsInRow) - 0usize];
    ["Offset of field: PokemonJumpRecords::unused1"]
        [::core::mem::offset_of!(PokemonJumpRecords, unused1) - 2usize];
    ["Offset of field: PokemonJumpRecords::excellentsInRow"]
        [::core::mem::offset_of!(PokemonJumpRecords, excellentsInRow) - 4usize];
    ["Offset of field: PokemonJumpRecords::gamesWithMaxPlayers"]
        [::core::mem::offset_of!(PokemonJumpRecords, gamesWithMaxPlayers) - 6usize];
    ["Offset of field: PokemonJumpRecords::unused2"]
        [::core::mem::offset_of!(PokemonJumpRecords, unused2) - 8usize];
    ["Offset of field: PokemonJumpRecords::bestJumpScore"]
        [::core::mem::offset_of!(PokemonJumpRecords, bestJumpScore) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BerryPickingResults {
    pub bestScore: u32_,
    pub berriesPicked: u16_,
    pub berriesPickedInRow: u16_,
    pub field_8: u8_,
    pub field_9: u8_,
    pub field_A: u8_,
    pub field_B: u8_,
    pub field_C: u8_,
    pub field_D: u8_,
    pub field_E: u8_,
    pub field_F: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BerryPickingResults"][::core::mem::size_of::<BerryPickingResults>() - 16usize];
    ["Alignment of BerryPickingResults"][::core::mem::align_of::<BerryPickingResults>() - 4usize];
    ["Offset of field: BerryPickingResults::bestScore"]
        [::core::mem::offset_of!(BerryPickingResults, bestScore) - 0usize];
    ["Offset of field: BerryPickingResults::berriesPicked"]
        [::core::mem::offset_of!(BerryPickingResults, berriesPicked) - 4usize];
    ["Offset of field: BerryPickingResults::berriesPickedInRow"]
        [::core::mem::offset_of!(BerryPickingResults, berriesPickedInRow) - 6usize];
    ["Offset of field: BerryPickingResults::field_8"]
        [::core::mem::offset_of!(BerryPickingResults, field_8) - 8usize];
    ["Offset of field: BerryPickingResults::field_9"]
        [::core::mem::offset_of!(BerryPickingResults, field_9) - 9usize];
    ["Offset of field: BerryPickingResults::field_A"]
        [::core::mem::offset_of!(BerryPickingResults, field_A) - 10usize];
    ["Offset of field: BerryPickingResults::field_B"]
        [::core::mem::offset_of!(BerryPickingResults, field_B) - 11usize];
    ["Offset of field: BerryPickingResults::field_C"]
        [::core::mem::offset_of!(BerryPickingResults, field_C) - 12usize];
    ["Offset of field: BerryPickingResults::field_D"]
        [::core::mem::offset_of!(BerryPickingResults, field_D) - 13usize];
    ["Offset of field: BerryPickingResults::field_E"]
        [::core::mem::offset_of!(BerryPickingResults, field_E) - 14usize];
    ["Offset of field: BerryPickingResults::field_F"]
        [::core::mem::offset_of!(BerryPickingResults, field_F) - 15usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyramidBag {
    pub itemId: [[u16_; 10usize]; 2usize],
    pub quantity: [[u8_; 10usize]; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PyramidBag"][::core::mem::size_of::<PyramidBag>() - 60usize];
    ["Alignment of PyramidBag"][::core::mem::align_of::<PyramidBag>() - 2usize];
    ["Offset of field: PyramidBag::itemId"][::core::mem::offset_of!(PyramidBag, itemId) - 0usize];
    ["Offset of field: PyramidBag::quantity"]
        [::core::mem::offset_of!(PyramidBag, quantity) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BerryCrush {
    pub pressingSpeeds: [u16_; 4usize],
    pub berryPowderAmount: u32_,
    pub unk: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BerryCrush"][::core::mem::size_of::<BerryCrush>() - 16usize];
    ["Alignment of BerryCrush"][::core::mem::align_of::<BerryCrush>() - 4usize];
    ["Offset of field: BerryCrush::pressingSpeeds"]
        [::core::mem::offset_of!(BerryCrush, pressingSpeeds) - 0usize];
    ["Offset of field: BerryCrush::berryPowderAmount"]
        [::core::mem::offset_of!(BerryCrush, berryPowderAmount) - 8usize];
    ["Offset of field: BerryCrush::unk"][::core::mem::offset_of!(BerryCrush, unk) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ApprenticeMon {
    pub species: u16_,
    pub moves: [u16_; 4usize],
    pub item: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ApprenticeMon"][::core::mem::size_of::<ApprenticeMon>() - 12usize];
    ["Alignment of ApprenticeMon"][::core::mem::align_of::<ApprenticeMon>() - 2usize];
    ["Offset of field: ApprenticeMon::species"]
        [::core::mem::offset_of!(ApprenticeMon, species) - 0usize];
    ["Offset of field: ApprenticeMon::moves"]
        [::core::mem::offset_of!(ApprenticeMon, moves) - 2usize];
    ["Offset of field: ApprenticeMon::item"]
        [::core::mem::offset_of!(ApprenticeMon, item) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Apprentice {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub numQuestions: u8_,
    pub number: u8_,
    pub party: [ApprenticeMon; 3usize],
    pub speechWon: [u16_; 6usize],
    pub playerId: [u8_; 4usize],
    pub playerName: [u8_; 7usize],
    pub language: u8_,
    pub checksum: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Apprentice"][::core::mem::size_of::<Apprentice>() - 68usize];
    ["Alignment of Apprentice"][::core::mem::align_of::<Apprentice>() - 4usize];
    ["Offset of field: Apprentice::numQuestions"]
        [::core::mem::offset_of!(Apprentice, numQuestions) - 1usize];
    ["Offset of field: Apprentice::number"][::core::mem::offset_of!(Apprentice, number) - 2usize];
    ["Offset of field: Apprentice::party"][::core::mem::offset_of!(Apprentice, party) - 4usize];
    ["Offset of field: Apprentice::speechWon"]
        [::core::mem::offset_of!(Apprentice, speechWon) - 40usize];
    ["Offset of field: Apprentice::playerId"]
        [::core::mem::offset_of!(Apprentice, playerId) - 52usize];
    ["Offset of field: Apprentice::playerName"]
        [::core::mem::offset_of!(Apprentice, playerName) - 56usize];
    ["Offset of field: Apprentice::language"]
        [::core::mem::offset_of!(Apprentice, language) - 63usize];
    ["Offset of field: Apprentice::checksum"]
        [::core::mem::offset_of!(Apprentice, checksum) - 64usize];
};
impl Apprentice {
    #[inline]
    pub fn id(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_id(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn id_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                5u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_id_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn lvlMode(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_lvlMode(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn lvlMode_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_lvlMode_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(id: u8_, lvlMode: u8_) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let id: u8 = unsafe { ::core::mem::transmute(id) };
            id as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let lvlMode: u8 = unsafe { ::core::mem::transmute(lvlMode) };
            lvlMode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BattleTowerPokemon {
    pub species: u16_,
    pub heldItem: u16_,
    pub moves: [u16_; 4usize],
    pub level: u8_,
    pub ppBonuses: u8_,
    pub hpEV: u8_,
    pub attackEV: u8_,
    pub defenseEV: u8_,
    pub speedEV: u8_,
    pub spAttackEV: u8_,
    pub spDefenseEV: u8_,
    pub otId: u32_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub personality: u32_,
    pub nickname: [u8_; 11usize],
    pub friendship: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BattleTowerPokemon"][::core::mem::size_of::<BattleTowerPokemon>() - 44usize];
    ["Alignment of BattleTowerPokemon"][::core::mem::align_of::<BattleTowerPokemon>() - 4usize];
    ["Offset of field: BattleTowerPokemon::species"]
        [::core::mem::offset_of!(BattleTowerPokemon, species) - 0usize];
    ["Offset of field: BattleTowerPokemon::heldItem"]
        [::core::mem::offset_of!(BattleTowerPokemon, heldItem) - 2usize];
    ["Offset of field: BattleTowerPokemon::moves"]
        [::core::mem::offset_of!(BattleTowerPokemon, moves) - 4usize];
    ["Offset of field: BattleTowerPokemon::level"]
        [::core::mem::offset_of!(BattleTowerPokemon, level) - 12usize];
    ["Offset of field: BattleTowerPokemon::ppBonuses"]
        [::core::mem::offset_of!(BattleTowerPokemon, ppBonuses) - 13usize];
    ["Offset of field: BattleTowerPokemon::hpEV"]
        [::core::mem::offset_of!(BattleTowerPokemon, hpEV) - 14usize];
    ["Offset of field: BattleTowerPokemon::attackEV"]
        [::core::mem::offset_of!(BattleTowerPokemon, attackEV) - 15usize];
    ["Offset of field: BattleTowerPokemon::defenseEV"]
        [::core::mem::offset_of!(BattleTowerPokemon, defenseEV) - 16usize];
    ["Offset of field: BattleTowerPokemon::speedEV"]
        [::core::mem::offset_of!(BattleTowerPokemon, speedEV) - 17usize];
    ["Offset of field: BattleTowerPokemon::spAttackEV"]
        [::core::mem::offset_of!(BattleTowerPokemon, spAttackEV) - 18usize];
    ["Offset of field: BattleTowerPokemon::spDefenseEV"]
        [::core::mem::offset_of!(BattleTowerPokemon, spDefenseEV) - 19usize];
    ["Offset of field: BattleTowerPokemon::otId"]
        [::core::mem::offset_of!(BattleTowerPokemon, otId) - 20usize];
    ["Offset of field: BattleTowerPokemon::personality"]
        [::core::mem::offset_of!(BattleTowerPokemon, personality) - 28usize];
    ["Offset of field: BattleTowerPokemon::nickname"]
        [::core::mem::offset_of!(BattleTowerPokemon, nickname) - 32usize];
    ["Offset of field: BattleTowerPokemon::friendship"]
        [::core::mem::offset_of!(BattleTowerPokemon, friendship) - 43usize];
};
impl BattleTowerPokemon {
    #[inline]
    pub fn hpIV(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_hpIV(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn hpIV_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_hpIV_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn attackIV(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_attackIV(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn attackIV_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_attackIV_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn defenseIV(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_defenseIV(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn defenseIV_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_defenseIV_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn speedIV(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_speedIV(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn speedIV_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_speedIV_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn spAttackIV(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_spAttackIV(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn spAttackIV_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_spAttackIV_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn spDefenseIV(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_spDefenseIV(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn spDefenseIV_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                25usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_spDefenseIV_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                25usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn gap(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_gap(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn gap_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                30usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_gap_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                30usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn abilityNum(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_abilityNum(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn abilityNum_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                31usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_abilityNum_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                31usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        hpIV: u32_,
        attackIV: u32_,
        defenseIV: u32_,
        speedIV: u32_,
        spAttackIV: u32_,
        spDefenseIV: u32_,
        gap: u32_,
        abilityNum: u32_,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let hpIV: u32 = unsafe { ::core::mem::transmute(hpIV) };
            hpIV as u64
        });
        __bindgen_bitfield_unit.set(5usize, 5u8, {
            let attackIV: u32 = unsafe { ::core::mem::transmute(attackIV) };
            attackIV as u64
        });
        __bindgen_bitfield_unit.set(10usize, 5u8, {
            let defenseIV: u32 = unsafe { ::core::mem::transmute(defenseIV) };
            defenseIV as u64
        });
        __bindgen_bitfield_unit.set(15usize, 5u8, {
            let speedIV: u32 = unsafe { ::core::mem::transmute(speedIV) };
            speedIV as u64
        });
        __bindgen_bitfield_unit.set(20usize, 5u8, {
            let spAttackIV: u32 = unsafe { ::core::mem::transmute(spAttackIV) };
            spAttackIV as u64
        });
        __bindgen_bitfield_unit.set(25usize, 5u8, {
            let spDefenseIV: u32 = unsafe { ::core::mem::transmute(spDefenseIV) };
            spDefenseIV as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let gap: u32 = unsafe { ::core::mem::transmute(gap) };
            gap as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let abilityNum: u32 = unsafe { ::core::mem::transmute(abilityNum) };
            abilityNum as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmeraldBattleTowerRecord {
    pub lvlMode: u8_,
    pub facilityClass: u8_,
    pub winStreak: u16_,
    pub name: [u8_; 8usize],
    pub trainerId: [u8_; 4usize],
    pub greeting: [u16_; 6usize],
    pub speechWon: [u16_; 6usize],
    pub speechLost: [u16_; 6usize],
    pub party: [BattleTowerPokemon; 4usize],
    pub language: u8_,
    pub checksum: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EmeraldBattleTowerRecord"]
        [::core::mem::size_of::<EmeraldBattleTowerRecord>() - 236usize];
    ["Alignment of EmeraldBattleTowerRecord"]
        [::core::mem::align_of::<EmeraldBattleTowerRecord>() - 4usize];
    ["Offset of field: EmeraldBattleTowerRecord::lvlMode"]
        [::core::mem::offset_of!(EmeraldBattleTowerRecord, lvlMode) - 0usize];
    ["Offset of field: EmeraldBattleTowerRecord::facilityClass"]
        [::core::mem::offset_of!(EmeraldBattleTowerRecord, facilityClass) - 1usize];
    ["Offset of field: EmeraldBattleTowerRecord::winStreak"]
        [::core::mem::offset_of!(EmeraldBattleTowerRecord, winStreak) - 2usize];
    ["Offset of field: EmeraldBattleTowerRecord::name"]
        [::core::mem::offset_of!(EmeraldBattleTowerRecord, name) - 4usize];
    ["Offset of field: EmeraldBattleTowerRecord::trainerId"]
        [::core::mem::offset_of!(EmeraldBattleTowerRecord, trainerId) - 12usize];
    ["Offset of field: EmeraldBattleTowerRecord::greeting"]
        [::core::mem::offset_of!(EmeraldBattleTowerRecord, greeting) - 16usize];
    ["Offset of field: EmeraldBattleTowerRecord::speechWon"]
        [::core::mem::offset_of!(EmeraldBattleTowerRecord, speechWon) - 28usize];
    ["Offset of field: EmeraldBattleTowerRecord::speechLost"]
        [::core::mem::offset_of!(EmeraldBattleTowerRecord, speechLost) - 40usize];
    ["Offset of field: EmeraldBattleTowerRecord::party"]
        [::core::mem::offset_of!(EmeraldBattleTowerRecord, party) - 52usize];
    ["Offset of field: EmeraldBattleTowerRecord::language"]
        [::core::mem::offset_of!(EmeraldBattleTowerRecord, language) - 228usize];
    ["Offset of field: EmeraldBattleTowerRecord::checksum"]
        [::core::mem::offset_of!(EmeraldBattleTowerRecord, checksum) - 232usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BattleTowerInterview {
    pub playerSpecies: u16_,
    pub opponentSpecies: u16_,
    pub opponentName: [u8_; 8usize],
    pub opponentMonNickname: [u8_; 11usize],
    pub opponentLanguage: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BattleTowerInterview"][::core::mem::size_of::<BattleTowerInterview>() - 24usize];
    ["Alignment of BattleTowerInterview"][::core::mem::align_of::<BattleTowerInterview>() - 2usize];
    ["Offset of field: BattleTowerInterview::playerSpecies"]
        [::core::mem::offset_of!(BattleTowerInterview, playerSpecies) - 0usize];
    ["Offset of field: BattleTowerInterview::opponentSpecies"]
        [::core::mem::offset_of!(BattleTowerInterview, opponentSpecies) - 2usize];
    ["Offset of field: BattleTowerInterview::opponentName"]
        [::core::mem::offset_of!(BattleTowerInterview, opponentName) - 4usize];
    ["Offset of field: BattleTowerInterview::opponentMonNickname"]
        [::core::mem::offset_of!(BattleTowerInterview, opponentMonNickname) - 12usize];
    ["Offset of field: BattleTowerInterview::opponentLanguage"]
        [::core::mem::offset_of!(BattleTowerInterview, opponentLanguage) - 23usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BattleTowerEReaderTrainer {
    pub unk0: u8_,
    pub facilityClass: u8_,
    pub winStreak: u16_,
    pub name: [u8_; 8usize],
    pub trainerId: [u8_; 4usize],
    pub greeting: [u16_; 6usize],
    pub farewellPlayerLost: [u16_; 6usize],
    pub farewellPlayerWon: [u16_; 6usize],
    pub party: [BattleTowerPokemon; 3usize],
    pub checksum: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BattleTowerEReaderTrainer"]
        [::core::mem::size_of::<BattleTowerEReaderTrainer>() - 188usize];
    ["Alignment of BattleTowerEReaderTrainer"]
        [::core::mem::align_of::<BattleTowerEReaderTrainer>() - 4usize];
    ["Offset of field: BattleTowerEReaderTrainer::unk0"]
        [::core::mem::offset_of!(BattleTowerEReaderTrainer, unk0) - 0usize];
    ["Offset of field: BattleTowerEReaderTrainer::facilityClass"]
        [::core::mem::offset_of!(BattleTowerEReaderTrainer, facilityClass) - 1usize];
    ["Offset of field: BattleTowerEReaderTrainer::winStreak"]
        [::core::mem::offset_of!(BattleTowerEReaderTrainer, winStreak) - 2usize];
    ["Offset of field: BattleTowerEReaderTrainer::name"]
        [::core::mem::offset_of!(BattleTowerEReaderTrainer, name) - 4usize];
    ["Offset of field: BattleTowerEReaderTrainer::trainerId"]
        [::core::mem::offset_of!(BattleTowerEReaderTrainer, trainerId) - 12usize];
    ["Offset of field: BattleTowerEReaderTrainer::greeting"]
        [::core::mem::offset_of!(BattleTowerEReaderTrainer, greeting) - 16usize];
    ["Offset of field: BattleTowerEReaderTrainer::farewellPlayerLost"]
        [::core::mem::offset_of!(BattleTowerEReaderTrainer, farewellPlayerLost) - 28usize];
    ["Offset of field: BattleTowerEReaderTrainer::farewellPlayerWon"]
        [::core::mem::offset_of!(BattleTowerEReaderTrainer, farewellPlayerWon) - 40usize];
    ["Offset of field: BattleTowerEReaderTrainer::party"]
        [::core::mem::offset_of!(BattleTowerEReaderTrainer, party) - 52usize];
    ["Offset of field: BattleTowerEReaderTrainer::checksum"]
        [::core::mem::offset_of!(BattleTowerEReaderTrainer, checksum) - 184usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DomeMonData {
    pub moves: [u16_; 4usize],
    pub evs: [u8_; 6usize],
    pub nature: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DomeMonData"][::core::mem::size_of::<DomeMonData>() - 16usize];
    ["Alignment of DomeMonData"][::core::mem::align_of::<DomeMonData>() - 2usize];
    ["Offset of field: DomeMonData::moves"][::core::mem::offset_of!(DomeMonData, moves) - 0usize];
    ["Offset of field: DomeMonData::evs"][::core::mem::offset_of!(DomeMonData, evs) - 8usize];
    ["Offset of field: DomeMonData::nature"]
        [::core::mem::offset_of!(DomeMonData, nature) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RentalMon {
    pub monId: u16_,
    pub personality: u32_,
    pub ivs: u8_,
    pub abilityNum: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RentalMon"][::core::mem::size_of::<RentalMon>() - 12usize];
    ["Alignment of RentalMon"][::core::mem::align_of::<RentalMon>() - 4usize];
    ["Offset of field: RentalMon::monId"][::core::mem::offset_of!(RentalMon, monId) - 0usize];
    ["Offset of field: RentalMon::personality"]
        [::core::mem::offset_of!(RentalMon, personality) - 4usize];
    ["Offset of field: RentalMon::ivs"][::core::mem::offset_of!(RentalMon, ivs) - 8usize];
    ["Offset of field: RentalMon::abilityNum"]
        [::core::mem::offset_of!(RentalMon, abilityNum) - 9usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BattleDomeTrainer {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BattleDomeTrainer"][::core::mem::size_of::<BattleDomeTrainer>() - 2usize];
    ["Alignment of BattleDomeTrainer"][::core::mem::align_of::<BattleDomeTrainer>() - 2usize];
};
impl BattleDomeTrainer {
    #[inline]
    pub fn trainerId(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 10u8) as u16) }
    }
    #[inline]
    pub fn set_trainerId(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn trainerId_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                10u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_trainerId_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                10u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn isEliminated(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_isEliminated(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isEliminated_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_isEliminated_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn eliminatedAt(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_eliminatedAt(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn eliminatedAt_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_eliminatedAt_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn forfeited(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_forfeited(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn forfeited_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                3u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_forfeited_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        trainerId: u16_,
        isEliminated: u16_,
        eliminatedAt: u16_,
        forfeited: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 10u8, {
            let trainerId: u16 = unsafe { ::core::mem::transmute(trainerId) };
            trainerId as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let isEliminated: u16 = unsafe { ::core::mem::transmute(isEliminated) };
            isEliminated as u64
        });
        __bindgen_bitfield_unit.set(11usize, 2u8, {
            let eliminatedAt: u16 = unsafe { ::core::mem::transmute(eliminatedAt) };
            eliminatedAt as u64
        });
        __bindgen_bitfield_unit.set(13usize, 3u8, {
            let forfeited: u16 = unsafe { ::core::mem::transmute(forfeited) };
            forfeited as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BattleFrontier {
    pub towerPlayer: EmeraldBattleTowerRecord,
    pub towerRecords: [EmeraldBattleTowerRecord; 5usize],
    pub towerInterview: BattleTowerInterview,
    pub ereaderTrainer: BattleTowerEReaderTrainer,
    pub challengeStatus: u8_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub selectedPartyMons: [u16_; 4usize],
    pub curChallengeBattleNum: u16_,
    pub trainerIds: [u16_; 20usize],
    pub winStreakActiveFlags: u32_,
    pub towerWinStreaks: [[u16_; 2usize]; 4usize],
    pub towerRecordWinStreaks: [[u16_; 2usize]; 4usize],
    pub battledBrainFlags: u16_,
    pub towerSinglesStreak: u16_,
    pub towerNumWins: u16_,
    pub towerBattleOutcome: u8_,
    pub towerLvlMode: u8_,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub domeUnused: u8_,
    pub domeLvlMode: u8_,
    pub domeBattleMode: u8_,
    pub domeWinStreaks: [[u16_; 2usize]; 2usize],
    pub domeRecordWinStreaks: [[u16_; 2usize]; 2usize],
    pub domeTotalChampionships: [[u16_; 2usize]; 2usize],
    pub domeTrainers: [BattleDomeTrainer; 16usize],
    pub domeMonIds: [[u16_; 3usize]; 16usize],
    pub unused_DC4: u16_,
    pub palacePrize: u16_,
    pub palaceWinStreaks: [[u16_; 2usize]; 2usize],
    pub palaceRecordWinStreaks: [[u16_; 2usize]; 2usize],
    pub arenaPrize: u16_,
    pub arenaWinStreaks: [u16_; 2usize],
    pub arenaRecordStreaks: [u16_; 2usize],
    pub factoryWinStreaks: [[u16_; 2usize]; 2usize],
    pub factoryRecordWinStreaks: [[u16_; 2usize]; 2usize],
    pub factoryRentsCount: [[u16_; 2usize]; 2usize],
    pub factoryRecordRentsCount: [[u16_; 2usize]; 2usize],
    pub pikePrize: u16_,
    pub pikeWinStreaks: [u16_; 2usize],
    pub pikeRecordStreaks: [u16_; 2usize],
    pub pikeTotalStreaks: [u16_; 2usize],
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub pikeHeldItemsBackup: [u16_; 3usize],
    pub pyramidPrize: u16_,
    pub pyramidWinStreaks: [u16_; 2usize],
    pub pyramidRecordStreaks: [u16_; 2usize],
    pub pyramidRandoms: [u16_; 4usize],
    pub pyramidTrainerFlags: u8_,
    pub pyramidBag: PyramidBag,
    pub pyramidLightRadius: u8_,
    pub verdanturfTentPrize: u16_,
    pub fallarborTentPrize: u16_,
    pub slateportTentPrize: u16_,
    pub rentalMons: [RentalMon; 6usize],
    pub battlePoints: u16_,
    pub cardBattlePoints: u16_,
    pub battlesCount: u32_,
    pub domeWinningMoves: [u16_; 16usize],
    pub trainerFlags: u8_,
    pub opponentNames: [[u8_; 8usize]; 2usize],
    pub opponentTrainerIds: [[u8_; 4usize]; 2usize],
    pub _bitfield_align_4: [u8; 0],
    pub _bitfield_4: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub unused_EFA: u8_,
    pub unused_EFB: u8_,
    pub domePlayerPartyData: [DomeMonData; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BattleFrontier"][::core::mem::size_of::<BattleFrontier>() - 2240usize];
    ["Alignment of BattleFrontier"][::core::mem::align_of::<BattleFrontier>() - 4usize];
    ["Offset of field: BattleFrontier::towerPlayer"]
        [::core::mem::offset_of!(BattleFrontier, towerPlayer) - 0usize];
    ["Offset of field: BattleFrontier::towerRecords"]
        [::core::mem::offset_of!(BattleFrontier, towerRecords) - 236usize];
    ["Offset of field: BattleFrontier::towerInterview"]
        [::core::mem::offset_of!(BattleFrontier, towerInterview) - 1416usize];
    ["Offset of field: BattleFrontier::ereaderTrainer"]
        [::core::mem::offset_of!(BattleFrontier, ereaderTrainer) - 1440usize];
    ["Offset of field: BattleFrontier::challengeStatus"]
        [::core::mem::offset_of!(BattleFrontier, challengeStatus) - 1628usize];
    ["Offset of field: BattleFrontier::selectedPartyMons"]
        [::core::mem::offset_of!(BattleFrontier, selectedPartyMons) - 1630usize];
    ["Offset of field: BattleFrontier::curChallengeBattleNum"]
        [::core::mem::offset_of!(BattleFrontier, curChallengeBattleNum) - 1638usize];
    ["Offset of field: BattleFrontier::trainerIds"]
        [::core::mem::offset_of!(BattleFrontier, trainerIds) - 1640usize];
    ["Offset of field: BattleFrontier::winStreakActiveFlags"]
        [::core::mem::offset_of!(BattleFrontier, winStreakActiveFlags) - 1680usize];
    ["Offset of field: BattleFrontier::towerWinStreaks"]
        [::core::mem::offset_of!(BattleFrontier, towerWinStreaks) - 1684usize];
    ["Offset of field: BattleFrontier::towerRecordWinStreaks"]
        [::core::mem::offset_of!(BattleFrontier, towerRecordWinStreaks) - 1700usize];
    ["Offset of field: BattleFrontier::battledBrainFlags"]
        [::core::mem::offset_of!(BattleFrontier, battledBrainFlags) - 1716usize];
    ["Offset of field: BattleFrontier::towerSinglesStreak"]
        [::core::mem::offset_of!(BattleFrontier, towerSinglesStreak) - 1718usize];
    ["Offset of field: BattleFrontier::towerNumWins"]
        [::core::mem::offset_of!(BattleFrontier, towerNumWins) - 1720usize];
    ["Offset of field: BattleFrontier::towerBattleOutcome"]
        [::core::mem::offset_of!(BattleFrontier, towerBattleOutcome) - 1722usize];
    ["Offset of field: BattleFrontier::towerLvlMode"]
        [::core::mem::offset_of!(BattleFrontier, towerLvlMode) - 1723usize];
    ["Offset of field: BattleFrontier::domeUnused"]
        [::core::mem::offset_of!(BattleFrontier, domeUnused) - 1725usize];
    ["Offset of field: BattleFrontier::domeLvlMode"]
        [::core::mem::offset_of!(BattleFrontier, domeLvlMode) - 1726usize];
    ["Offset of field: BattleFrontier::domeBattleMode"]
        [::core::mem::offset_of!(BattleFrontier, domeBattleMode) - 1727usize];
    ["Offset of field: BattleFrontier::domeWinStreaks"]
        [::core::mem::offset_of!(BattleFrontier, domeWinStreaks) - 1728usize];
    ["Offset of field: BattleFrontier::domeRecordWinStreaks"]
        [::core::mem::offset_of!(BattleFrontier, domeRecordWinStreaks) - 1736usize];
    ["Offset of field: BattleFrontier::domeTotalChampionships"]
        [::core::mem::offset_of!(BattleFrontier, domeTotalChampionships) - 1744usize];
    ["Offset of field: BattleFrontier::domeTrainers"]
        [::core::mem::offset_of!(BattleFrontier, domeTrainers) - 1752usize];
    ["Offset of field: BattleFrontier::domeMonIds"]
        [::core::mem::offset_of!(BattleFrontier, domeMonIds) - 1784usize];
    ["Offset of field: BattleFrontier::unused_DC4"]
        [::core::mem::offset_of!(BattleFrontier, unused_DC4) - 1880usize];
    ["Offset of field: BattleFrontier::palacePrize"]
        [::core::mem::offset_of!(BattleFrontier, palacePrize) - 1882usize];
    ["Offset of field: BattleFrontier::palaceWinStreaks"]
        [::core::mem::offset_of!(BattleFrontier, palaceWinStreaks) - 1884usize];
    ["Offset of field: BattleFrontier::palaceRecordWinStreaks"]
        [::core::mem::offset_of!(BattleFrontier, palaceRecordWinStreaks) - 1892usize];
    ["Offset of field: BattleFrontier::arenaPrize"]
        [::core::mem::offset_of!(BattleFrontier, arenaPrize) - 1900usize];
    ["Offset of field: BattleFrontier::arenaWinStreaks"]
        [::core::mem::offset_of!(BattleFrontier, arenaWinStreaks) - 1902usize];
    ["Offset of field: BattleFrontier::arenaRecordStreaks"]
        [::core::mem::offset_of!(BattleFrontier, arenaRecordStreaks) - 1906usize];
    ["Offset of field: BattleFrontier::factoryWinStreaks"]
        [::core::mem::offset_of!(BattleFrontier, factoryWinStreaks) - 1910usize];
    ["Offset of field: BattleFrontier::factoryRecordWinStreaks"]
        [::core::mem::offset_of!(BattleFrontier, factoryRecordWinStreaks) - 1918usize];
    ["Offset of field: BattleFrontier::factoryRentsCount"]
        [::core::mem::offset_of!(BattleFrontier, factoryRentsCount) - 1926usize];
    ["Offset of field: BattleFrontier::factoryRecordRentsCount"]
        [::core::mem::offset_of!(BattleFrontier, factoryRecordRentsCount) - 1934usize];
    ["Offset of field: BattleFrontier::pikePrize"]
        [::core::mem::offset_of!(BattleFrontier, pikePrize) - 1942usize];
    ["Offset of field: BattleFrontier::pikeWinStreaks"]
        [::core::mem::offset_of!(BattleFrontier, pikeWinStreaks) - 1944usize];
    ["Offset of field: BattleFrontier::pikeRecordStreaks"]
        [::core::mem::offset_of!(BattleFrontier, pikeRecordStreaks) - 1948usize];
    ["Offset of field: BattleFrontier::pikeTotalStreaks"]
        [::core::mem::offset_of!(BattleFrontier, pikeTotalStreaks) - 1952usize];
    ["Offset of field: BattleFrontier::pikeHeldItemsBackup"]
        [::core::mem::offset_of!(BattleFrontier, pikeHeldItemsBackup) - 1958usize];
    ["Offset of field: BattleFrontier::pyramidPrize"]
        [::core::mem::offset_of!(BattleFrontier, pyramidPrize) - 1964usize];
    ["Offset of field: BattleFrontier::pyramidWinStreaks"]
        [::core::mem::offset_of!(BattleFrontier, pyramidWinStreaks) - 1966usize];
    ["Offset of field: BattleFrontier::pyramidRecordStreaks"]
        [::core::mem::offset_of!(BattleFrontier, pyramidRecordStreaks) - 1970usize];
    ["Offset of field: BattleFrontier::pyramidRandoms"]
        [::core::mem::offset_of!(BattleFrontier, pyramidRandoms) - 1974usize];
    ["Offset of field: BattleFrontier::pyramidTrainerFlags"]
        [::core::mem::offset_of!(BattleFrontier, pyramidTrainerFlags) - 1982usize];
    ["Offset of field: BattleFrontier::pyramidBag"]
        [::core::mem::offset_of!(BattleFrontier, pyramidBag) - 1984usize];
    ["Offset of field: BattleFrontier::pyramidLightRadius"]
        [::core::mem::offset_of!(BattleFrontier, pyramidLightRadius) - 2044usize];
    ["Offset of field: BattleFrontier::verdanturfTentPrize"]
        [::core::mem::offset_of!(BattleFrontier, verdanturfTentPrize) - 2046usize];
    ["Offset of field: BattleFrontier::fallarborTentPrize"]
        [::core::mem::offset_of!(BattleFrontier, fallarborTentPrize) - 2048usize];
    ["Offset of field: BattleFrontier::slateportTentPrize"]
        [::core::mem::offset_of!(BattleFrontier, slateportTentPrize) - 2050usize];
    ["Offset of field: BattleFrontier::rentalMons"]
        [::core::mem::offset_of!(BattleFrontier, rentalMons) - 2052usize];
    ["Offset of field: BattleFrontier::battlePoints"]
        [::core::mem::offset_of!(BattleFrontier, battlePoints) - 2124usize];
    ["Offset of field: BattleFrontier::cardBattlePoints"]
        [::core::mem::offset_of!(BattleFrontier, cardBattlePoints) - 2126usize];
    ["Offset of field: BattleFrontier::battlesCount"]
        [::core::mem::offset_of!(BattleFrontier, battlesCount) - 2128usize];
    ["Offset of field: BattleFrontier::domeWinningMoves"]
        [::core::mem::offset_of!(BattleFrontier, domeWinningMoves) - 2132usize];
    ["Offset of field: BattleFrontier::trainerFlags"]
        [::core::mem::offset_of!(BattleFrontier, trainerFlags) - 2164usize];
    ["Offset of field: BattleFrontier::opponentNames"]
        [::core::mem::offset_of!(BattleFrontier, opponentNames) - 2165usize];
    ["Offset of field: BattleFrontier::opponentTrainerIds"]
        [::core::mem::offset_of!(BattleFrontier, opponentTrainerIds) - 2181usize];
    ["Offset of field: BattleFrontier::unused_EFA"]
        [::core::mem::offset_of!(BattleFrontier, unused_EFA) - 2190usize];
    ["Offset of field: BattleFrontier::unused_EFB"]
        [::core::mem::offset_of!(BattleFrontier, unused_EFB) - 2191usize];
    ["Offset of field: BattleFrontier::domePlayerPartyData"]
        [::core::mem::offset_of!(BattleFrontier, domePlayerPartyData) - 2192usize];
};
impl BattleFrontier {
    #[inline]
    pub fn lvlMode(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_lvlMode(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn lvlMode_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_lvlMode_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn challengePaused(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_challengePaused(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn challengePaused_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_challengePaused_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disableRecordBattle(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_disableRecordBattle(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disableRecordBattle_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_disableRecordBattle_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lvlMode: u8_,
        challengePaused: u8_,
        disableRecordBattle: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let lvlMode: u8 = unsafe { ::core::mem::transmute(lvlMode) };
            lvlMode as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let challengePaused: u8 = unsafe { ::core::mem::transmute(challengePaused) };
            challengePaused as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let disableRecordBattle: u8 = unsafe { ::core::mem::transmute(disableRecordBattle) };
            disableRecordBattle as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn domeAttemptedSingles50(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_domeAttemptedSingles50(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn domeAttemptedSingles50_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_domeAttemptedSingles50_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn domeAttemptedSinglesOpen(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_domeAttemptedSinglesOpen(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn domeAttemptedSinglesOpen_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_domeAttemptedSinglesOpen_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn domeHasWonSingles50(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_domeHasWonSingles50(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn domeHasWonSingles50_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_domeHasWonSingles50_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn domeHasWonSinglesOpen(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_domeHasWonSinglesOpen(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn domeHasWonSinglesOpen_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_domeHasWonSinglesOpen_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn domeAttemptedDoubles50(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_domeAttemptedDoubles50(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn domeAttemptedDoubles50_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_domeAttemptedDoubles50_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn domeAttemptedDoublesOpen(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_domeAttemptedDoublesOpen(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn domeAttemptedDoublesOpen_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                5usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_domeAttemptedDoublesOpen_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn domeHasWonDoubles50(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_domeHasWonDoubles50(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn domeHasWonDoubles50_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                6usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_domeHasWonDoubles50_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn domeHasWonDoublesOpen(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_domeHasWonDoublesOpen(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn domeHasWonDoublesOpen_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                7usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_domeHasWonDoublesOpen_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        domeAttemptedSingles50: u8_,
        domeAttemptedSinglesOpen: u8_,
        domeHasWonSingles50: u8_,
        domeHasWonSinglesOpen: u8_,
        domeAttemptedDoubles50: u8_,
        domeAttemptedDoublesOpen: u8_,
        domeHasWonDoubles50: u8_,
        domeHasWonDoublesOpen: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let domeAttemptedSingles50: u8 =
                unsafe { ::core::mem::transmute(domeAttemptedSingles50) };
            domeAttemptedSingles50 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let domeAttemptedSinglesOpen: u8 =
                unsafe { ::core::mem::transmute(domeAttemptedSinglesOpen) };
            domeAttemptedSinglesOpen as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let domeHasWonSingles50: u8 = unsafe { ::core::mem::transmute(domeHasWonSingles50) };
            domeHasWonSingles50 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let domeHasWonSinglesOpen: u8 =
                unsafe { ::core::mem::transmute(domeHasWonSinglesOpen) };
            domeHasWonSinglesOpen as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let domeAttemptedDoubles50: u8 =
                unsafe { ::core::mem::transmute(domeAttemptedDoubles50) };
            domeAttemptedDoubles50 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let domeAttemptedDoublesOpen: u8 =
                unsafe { ::core::mem::transmute(domeAttemptedDoublesOpen) };
            domeAttemptedDoublesOpen as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let domeHasWonDoubles50: u8 = unsafe { ::core::mem::transmute(domeHasWonDoubles50) };
            domeHasWonDoubles50 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let domeHasWonDoublesOpen: u8 =
                unsafe { ::core::mem::transmute(domeHasWonDoublesOpen) };
            domeHasWonDoublesOpen as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn pikeHintedRoomIndex(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_pikeHintedRoomIndex(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pikeHintedRoomIndex_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_pikeHintedRoomIndex_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pikeHintedRoomType(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(3usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_pikeHintedRoomType(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(3usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pikeHintedRoomType_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_3),
                3usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_pikeHintedRoomType_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_3),
                3usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pikeHealingRoomsDisabled(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pikeHealingRoomsDisabled(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pikeHealingRoomsDisabled_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_3),
                7usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_pikeHealingRoomsDisabled_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_3),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        pikeHintedRoomIndex: u8_,
        pikeHintedRoomType: u8_,
        pikeHealingRoomsDisabled: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let pikeHintedRoomIndex: u8 = unsafe { ::core::mem::transmute(pikeHintedRoomIndex) };
            pikeHintedRoomIndex as u64
        });
        __bindgen_bitfield_unit.set(3usize, 4u8, {
            let pikeHintedRoomType: u8 = unsafe { ::core::mem::transmute(pikeHintedRoomType) };
            pikeHintedRoomType as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pikeHealingRoomsDisabled: u8 =
                unsafe { ::core::mem::transmute(pikeHealingRoomsDisabled) };
            pikeHealingRoomsDisabled as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn unk_EF9(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(0usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_unk_EF9(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_4.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn unk_EF9_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                0usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_unk_EF9_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                0usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn savedGame(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_savedGame(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_4.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn savedGame_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                7usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_savedGame_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_4(unk_EF9: u8_, savedGame: u8_) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let unk_EF9: u8 = unsafe { ::core::mem::transmute(unk_EF9) };
            unk_EF9 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let savedGame: u8 = unsafe { ::core::mem::transmute(savedGame) };
            savedGame as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ApprenticeQuestion {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub data: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ApprenticeQuestion"][::core::mem::size_of::<ApprenticeQuestion>() - 4usize];
    ["Alignment of ApprenticeQuestion"][::core::mem::align_of::<ApprenticeQuestion>() - 2usize];
    ["Offset of field: ApprenticeQuestion::data"]
        [::core::mem::offset_of!(ApprenticeQuestion, data) - 2usize];
};
impl ApprenticeQuestion {
    #[inline]
    pub fn questionId(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_questionId(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn questionId_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_questionId_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn monId(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_monId(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn monId_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_monId_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn moveSlot(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_moveSlot(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn moveSlot_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_moveSlot_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn suggestedChange(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_suggestedChange(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn suggestedChange_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_suggestedChange_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        questionId: u8_,
        monId: u8_,
        moveSlot: u8_,
        suggestedChange: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let questionId: u8 = unsafe { ::core::mem::transmute(questionId) };
            questionId as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let monId: u8 = unsafe { ::core::mem::transmute(monId) };
            monId as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let moveSlot: u8 = unsafe { ::core::mem::transmute(moveSlot) };
            moveSlot as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let suggestedChange: u8 = unsafe { ::core::mem::transmute(suggestedChange) };
            suggestedChange as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlayersApprentice {
    pub id: u8_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub unused: u8_,
    pub speciesIds: [u8_; 3usize],
    pub questions: [ApprenticeQuestion; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PlayersApprentice"][::core::mem::size_of::<PlayersApprentice>() - 44usize];
    ["Alignment of PlayersApprentice"][::core::mem::align_of::<PlayersApprentice>() - 2usize];
    ["Offset of field: PlayersApprentice::id"]
        [::core::mem::offset_of!(PlayersApprentice, id) - 0usize];
    ["Offset of field: PlayersApprentice::unused"]
        [::core::mem::offset_of!(PlayersApprentice, unused) - 3usize];
    ["Offset of field: PlayersApprentice::speciesIds"]
        [::core::mem::offset_of!(PlayersApprentice, speciesIds) - 4usize];
    ["Offset of field: PlayersApprentice::questions"]
        [::core::mem::offset_of!(PlayersApprentice, questions) - 8usize];
};
impl PlayersApprentice {
    #[inline]
    pub fn lvlMode(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_lvlMode(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn lvlMode_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_lvlMode_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn questionsAnswered(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_questionsAnswered(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn questionsAnswered_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_questionsAnswered_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn leadMonId(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_leadMonId(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn leadMonId_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_leadMonId_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn party(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_party(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn party_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_party_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn saveId(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_saveId(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn saveId_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_saveId_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lvlMode: u8_,
        questionsAnswered: u8_,
        leadMonId: u8_,
        party: u8_,
        saveId: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let lvlMode: u8 = unsafe { ::core::mem::transmute(lvlMode) };
            lvlMode as u64
        });
        __bindgen_bitfield_unit.set(2usize, 4u8, {
            let questionsAnswered: u8 = unsafe { ::core::mem::transmute(questionsAnswered) };
            questionsAnswered as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let leadMonId: u8 = unsafe { ::core::mem::transmute(leadMonId) };
            leadMonId as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let party: u8 = unsafe { ::core::mem::transmute(party) };
            party as u64
        });
        __bindgen_bitfield_unit.set(11usize, 2u8, {
            let saveId: u8 = unsafe { ::core::mem::transmute(saveId) };
            saveId as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RankingHall1P {
    pub id: [u8_; 4usize],
    pub winStreak: u16_,
    pub name: [u8_; 8usize],
    pub language: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RankingHall1P"][::core::mem::size_of::<RankingHall1P>() - 16usize];
    ["Alignment of RankingHall1P"][::core::mem::align_of::<RankingHall1P>() - 2usize];
    ["Offset of field: RankingHall1P::id"][::core::mem::offset_of!(RankingHall1P, id) - 0usize];
    ["Offset of field: RankingHall1P::winStreak"]
        [::core::mem::offset_of!(RankingHall1P, winStreak) - 4usize];
    ["Offset of field: RankingHall1P::name"][::core::mem::offset_of!(RankingHall1P, name) - 6usize];
    ["Offset of field: RankingHall1P::language"]
        [::core::mem::offset_of!(RankingHall1P, language) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RankingHall2P {
    pub id1: [u8_; 4usize],
    pub id2: [u8_; 4usize],
    pub winStreak: u16_,
    pub name1: [u8_; 8usize],
    pub name2: [u8_; 8usize],
    pub language: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RankingHall2P"][::core::mem::size_of::<RankingHall2P>() - 28usize];
    ["Alignment of RankingHall2P"][::core::mem::align_of::<RankingHall2P>() - 2usize];
    ["Offset of field: RankingHall2P::id1"][::core::mem::offset_of!(RankingHall2P, id1) - 0usize];
    ["Offset of field: RankingHall2P::id2"][::core::mem::offset_of!(RankingHall2P, id2) - 4usize];
    ["Offset of field: RankingHall2P::winStreak"]
        [::core::mem::offset_of!(RankingHall2P, winStreak) - 8usize];
    ["Offset of field: RankingHall2P::name1"]
        [::core::mem::offset_of!(RankingHall2P, name1) - 10usize];
    ["Offset of field: RankingHall2P::name2"]
        [::core::mem::offset_of!(RankingHall2P, name2) - 18usize];
    ["Offset of field: RankingHall2P::language"]
        [::core::mem::offset_of!(RankingHall2P, language) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SaveBlock2 {
    pub playerName: [u8_; 8usize],
    pub playerGender: u8_,
    pub specialSaveWarpFlags: u8_,
    pub playerTrainerId: [u8_; 4usize],
    pub playTimeHours: u16_,
    pub playTimeMinutes: u8_,
    pub playTimeSeconds: u8_,
    pub playTimeVBlanks: u8_,
    pub optionsButtonMode: u8_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub pokedex: Pokedex,
    pub filler_90: [u8_; 8usize],
    pub localTimeOffset: Time,
    pub lastBerryTreeUpdate: Time,
    pub gcnLinkFlags: u32_,
    pub encryptionKey: u32_,
    pub playerApprentice: PlayersApprentice,
    pub apprentices: [Apprentice; 4usize],
    pub berryCrush: BerryCrush,
    pub pokeJump: PokemonJumpRecords,
    pub berryPick: BerryPickingResults,
    pub hallRecords1P: [[[RankingHall1P; 3usize]; 2usize]; 9usize],
    pub hallRecords2P: [[RankingHall2P; 3usize]; 2usize],
    pub contestLinkResults: [[u16_; 4usize]; 5usize],
    pub frontier: BattleFrontier,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SaveBlock2"][::core::mem::size_of::<SaveBlock2>() - 3848usize];
    ["Alignment of SaveBlock2"][::core::mem::align_of::<SaveBlock2>() - 4usize];
    ["Offset of field: SaveBlock2::playerName"]
        [::core::mem::offset_of!(SaveBlock2, playerName) - 0usize];
    ["Offset of field: SaveBlock2::playerGender"]
        [::core::mem::offset_of!(SaveBlock2, playerGender) - 8usize];
    ["Offset of field: SaveBlock2::specialSaveWarpFlags"]
        [::core::mem::offset_of!(SaveBlock2, specialSaveWarpFlags) - 9usize];
    ["Offset of field: SaveBlock2::playerTrainerId"]
        [::core::mem::offset_of!(SaveBlock2, playerTrainerId) - 10usize];
    ["Offset of field: SaveBlock2::playTimeHours"]
        [::core::mem::offset_of!(SaveBlock2, playTimeHours) - 14usize];
    ["Offset of field: SaveBlock2::playTimeMinutes"]
        [::core::mem::offset_of!(SaveBlock2, playTimeMinutes) - 16usize];
    ["Offset of field: SaveBlock2::playTimeSeconds"]
        [::core::mem::offset_of!(SaveBlock2, playTimeSeconds) - 17usize];
    ["Offset of field: SaveBlock2::playTimeVBlanks"]
        [::core::mem::offset_of!(SaveBlock2, playTimeVBlanks) - 18usize];
    ["Offset of field: SaveBlock2::optionsButtonMode"]
        [::core::mem::offset_of!(SaveBlock2, optionsButtonMode) - 19usize];
    ["Offset of field: SaveBlock2::pokedex"]
        [::core::mem::offset_of!(SaveBlock2, pokedex) - 24usize];
    ["Offset of field: SaveBlock2::filler_90"]
        [::core::mem::offset_of!(SaveBlock2, filler_90) - 144usize];
    ["Offset of field: SaveBlock2::localTimeOffset"]
        [::core::mem::offset_of!(SaveBlock2, localTimeOffset) - 152usize];
    ["Offset of field: SaveBlock2::lastBerryTreeUpdate"]
        [::core::mem::offset_of!(SaveBlock2, lastBerryTreeUpdate) - 158usize];
    ["Offset of field: SaveBlock2::gcnLinkFlags"]
        [::core::mem::offset_of!(SaveBlock2, gcnLinkFlags) - 164usize];
    ["Offset of field: SaveBlock2::encryptionKey"]
        [::core::mem::offset_of!(SaveBlock2, encryptionKey) - 168usize];
    ["Offset of field: SaveBlock2::playerApprentice"]
        [::core::mem::offset_of!(SaveBlock2, playerApprentice) - 172usize];
    ["Offset of field: SaveBlock2::apprentices"]
        [::core::mem::offset_of!(SaveBlock2, apprentices) - 216usize];
    ["Offset of field: SaveBlock2::berryCrush"]
        [::core::mem::offset_of!(SaveBlock2, berryCrush) - 488usize];
    ["Offset of field: SaveBlock2::pokeJump"]
        [::core::mem::offset_of!(SaveBlock2, pokeJump) - 504usize];
    ["Offset of field: SaveBlock2::berryPick"]
        [::core::mem::offset_of!(SaveBlock2, berryPick) - 520usize];
    ["Offset of field: SaveBlock2::hallRecords1P"]
        [::core::mem::offset_of!(SaveBlock2, hallRecords1P) - 536usize];
    ["Offset of field: SaveBlock2::hallRecords2P"]
        [::core::mem::offset_of!(SaveBlock2, hallRecords2P) - 1400usize];
    ["Offset of field: SaveBlock2::contestLinkResults"]
        [::core::mem::offset_of!(SaveBlock2, contestLinkResults) - 1568usize];
    ["Offset of field: SaveBlock2::frontier"]
        [::core::mem::offset_of!(SaveBlock2, frontier) - 1608usize];
};
impl SaveBlock2 {
    #[inline]
    pub fn optionsTextSpeed(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_optionsTextSpeed(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn optionsTextSpeed_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                3u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_optionsTextSpeed_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn optionsWindowFrameType(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_optionsWindowFrameType(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn optionsWindowFrameType_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                5u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_optionsWindowFrameType_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn optionsSound(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_optionsSound(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn optionsSound_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_optionsSound_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn optionsBattleStyle(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_optionsBattleStyle(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn optionsBattleStyle_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_optionsBattleStyle_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn optionsBattleSceneOff(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_optionsBattleSceneOff(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn optionsBattleSceneOff_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_optionsBattleSceneOff_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn regionMapZoom(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_regionMapZoom(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn regionMapZoom_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_regionMapZoom_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        optionsTextSpeed: u16_,
        optionsWindowFrameType: u16_,
        optionsSound: u16_,
        optionsBattleStyle: u16_,
        optionsBattleSceneOff: u16_,
        regionMapZoom: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let optionsTextSpeed: u16 = unsafe { ::core::mem::transmute(optionsTextSpeed) };
            optionsTextSpeed as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let optionsWindowFrameType: u16 =
                unsafe { ::core::mem::transmute(optionsWindowFrameType) };
            optionsWindowFrameType as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let optionsSound: u16 = unsafe { ::core::mem::transmute(optionsSound) };
            optionsSound as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let optionsBattleStyle: u16 = unsafe { ::core::mem::transmute(optionsBattleStyle) };
            optionsBattleStyle as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let optionsBattleSceneOff: u16 =
                unsafe { ::core::mem::transmute(optionsBattleSceneOff) };
            optionsBattleSceneOff as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let regionMapZoom: u16 = unsafe { ::core::mem::transmute(regionMapZoom) };
            regionMapZoom as u64
        });
        __bindgen_bitfield_unit
    }
}
unsafe extern "C" {
    pub static mut gSaveBlock2Ptr: *mut SaveBlock2;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecretBaseParty {
    pub personality: [u32_; 6usize],
    pub moves: [u16_; 24usize],
    pub species: [u16_; 6usize],
    pub heldItems: [u16_; 6usize],
    pub levels: [u8_; 6usize],
    pub EVs: [u8_; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SecretBaseParty"][::core::mem::size_of::<SecretBaseParty>() - 108usize];
    ["Alignment of SecretBaseParty"][::core::mem::align_of::<SecretBaseParty>() - 4usize];
    ["Offset of field: SecretBaseParty::personality"]
        [::core::mem::offset_of!(SecretBaseParty, personality) - 0usize];
    ["Offset of field: SecretBaseParty::moves"]
        [::core::mem::offset_of!(SecretBaseParty, moves) - 24usize];
    ["Offset of field: SecretBaseParty::species"]
        [::core::mem::offset_of!(SecretBaseParty, species) - 72usize];
    ["Offset of field: SecretBaseParty::heldItems"]
        [::core::mem::offset_of!(SecretBaseParty, heldItems) - 84usize];
    ["Offset of field: SecretBaseParty::levels"]
        [::core::mem::offset_of!(SecretBaseParty, levels) - 96usize];
    ["Offset of field: SecretBaseParty::EVs"]
        [::core::mem::offset_of!(SecretBaseParty, EVs) - 102usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecretBase {
    pub secretBaseId: u8_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub trainerName: [u8_; 7usize],
    pub trainerId: [u8_; 4usize],
    pub language: u8_,
    pub numSecretBasesReceived: u16_,
    pub numTimesEntered: u8_,
    pub unused: u8_,
    pub decorations: [u8_; 16usize],
    pub decorationPositions: [u8_; 16usize],
    pub party: SecretBaseParty,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SecretBase"][::core::mem::size_of::<SecretBase>() - 160usize];
    ["Alignment of SecretBase"][::core::mem::align_of::<SecretBase>() - 4usize];
    ["Offset of field: SecretBase::secretBaseId"]
        [::core::mem::offset_of!(SecretBase, secretBaseId) - 0usize];
    ["Offset of field: SecretBase::trainerName"]
        [::core::mem::offset_of!(SecretBase, trainerName) - 2usize];
    ["Offset of field: SecretBase::trainerId"]
        [::core::mem::offset_of!(SecretBase, trainerId) - 9usize];
    ["Offset of field: SecretBase::language"]
        [::core::mem::offset_of!(SecretBase, language) - 13usize];
    ["Offset of field: SecretBase::numSecretBasesReceived"]
        [::core::mem::offset_of!(SecretBase, numSecretBasesReceived) - 14usize];
    ["Offset of field: SecretBase::numTimesEntered"]
        [::core::mem::offset_of!(SecretBase, numTimesEntered) - 16usize];
    ["Offset of field: SecretBase::unused"][::core::mem::offset_of!(SecretBase, unused) - 17usize];
    ["Offset of field: SecretBase::decorations"]
        [::core::mem::offset_of!(SecretBase, decorations) - 18usize];
    ["Offset of field: SecretBase::decorationPositions"]
        [::core::mem::offset_of!(SecretBase, decorationPositions) - 34usize];
    ["Offset of field: SecretBase::party"][::core::mem::offset_of!(SecretBase, party) - 52usize];
};
impl SecretBase {
    #[inline]
    pub fn toRegister(&self) -> bool8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_toRegister(&mut self, val: bool8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn toRegister_raw(this: *const Self) -> bool8 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_toRegister_raw(this: *mut Self, val: bool8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn gender(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_gender(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn gender_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_gender_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn battledOwnerToday(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_battledOwnerToday(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn battledOwnerToday_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_battledOwnerToday_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn registryStatus(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_registryStatus(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn registryStatus_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_registryStatus_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        toRegister: bool8,
        gender: u8_,
        battledOwnerToday: u8_,
        registryStatus: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let toRegister: u8 = unsafe { ::core::mem::transmute(toRegister) };
            toRegister as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let gender: u8 = unsafe { ::core::mem::transmute(gender) };
            gender as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let battledOwnerToday: u8 = unsafe { ::core::mem::transmute(battledOwnerToday) };
            battledOwnerToday as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let registryStatus: u8 = unsafe { ::core::mem::transmute(registryStatus) };
            registryStatus as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const METATILE_LAYER_TYPE_NORMAL: _bindgen_ty_6 = 0;
pub const METATILE_LAYER_TYPE_COVERED: _bindgen_ty_6 = 1;
pub const METATILE_LAYER_TYPE_SPLIT: _bindgen_ty_6 = 2;
pub type _bindgen_ty_6 = ::core::ffi::c_uint;
pub type TilesetCB = ::core::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tileset {
    pub isCompressed: bool8,
    pub isSecondary: bool8,
    pub tiles: *const u32_,
    pub palettes: *const [::core::ffi::c_ushort; 16usize],
    pub metatiles: *const u16_,
    pub metatileAttributes: *const u16_,
    pub callback: TilesetCB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Tileset"][::core::mem::size_of::<Tileset>() - 24usize];
    ["Alignment of Tileset"][::core::mem::align_of::<Tileset>() - 4usize];
    ["Offset of field: Tileset::isCompressed"]
        [::core::mem::offset_of!(Tileset, isCompressed) - 0usize];
    ["Offset of field: Tileset::isSecondary"]
        [::core::mem::offset_of!(Tileset, isSecondary) - 1usize];
    ["Offset of field: Tileset::tiles"][::core::mem::offset_of!(Tileset, tiles) - 4usize];
    ["Offset of field: Tileset::palettes"][::core::mem::offset_of!(Tileset, palettes) - 8usize];
    ["Offset of field: Tileset::metatiles"][::core::mem::offset_of!(Tileset, metatiles) - 12usize];
    ["Offset of field: Tileset::metatileAttributes"]
        [::core::mem::offset_of!(Tileset, metatileAttributes) - 16usize];
    ["Offset of field: Tileset::callback"][::core::mem::offset_of!(Tileset, callback) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MapLayout {
    pub width: s32,
    pub height: s32,
    pub border: *const u16_,
    pub map: *const u16_,
    pub primaryTileset: *const Tileset,
    pub secondaryTileset: *const Tileset,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MapLayout"][::core::mem::size_of::<MapLayout>() - 24usize];
    ["Alignment of MapLayout"][::core::mem::align_of::<MapLayout>() - 4usize];
    ["Offset of field: MapLayout::width"][::core::mem::offset_of!(MapLayout, width) - 0usize];
    ["Offset of field: MapLayout::height"][::core::mem::offset_of!(MapLayout, height) - 4usize];
    ["Offset of field: MapLayout::border"][::core::mem::offset_of!(MapLayout, border) - 8usize];
    ["Offset of field: MapLayout::map"][::core::mem::offset_of!(MapLayout, map) - 12usize];
    ["Offset of field: MapLayout::primaryTileset"]
        [::core::mem::offset_of!(MapLayout, primaryTileset) - 16usize];
    ["Offset of field: MapLayout::secondaryTileset"]
        [::core::mem::offset_of!(MapLayout, secondaryTileset) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BackupMapLayout {
    pub width: s32,
    pub height: s32,
    pub map: *mut u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BackupMapLayout"][::core::mem::size_of::<BackupMapLayout>() - 12usize];
    ["Alignment of BackupMapLayout"][::core::mem::align_of::<BackupMapLayout>() - 4usize];
    ["Offset of field: BackupMapLayout::width"]
        [::core::mem::offset_of!(BackupMapLayout, width) - 0usize];
    ["Offset of field: BackupMapLayout::height"]
        [::core::mem::offset_of!(BackupMapLayout, height) - 4usize];
    ["Offset of field: BackupMapLayout::map"]
        [::core::mem::offset_of!(BackupMapLayout, map) - 8usize];
};
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct ObjectEventTemplate {
    pub _bindgen_opaque_blob: [u32; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ObjectEventTemplate"][::core::mem::size_of::<ObjectEventTemplate>() - 24usize];
    ["Alignment of ObjectEventTemplate"][::core::mem::align_of::<ObjectEventTemplate>() - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpEvent {
    pub x: s16,
    pub y: s16,
    pub elevation: u8_,
    pub warpId: u8_,
    pub mapNum: u8_,
    pub mapGroup: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WarpEvent"][::core::mem::size_of::<WarpEvent>() - 8usize];
    ["Alignment of WarpEvent"][::core::mem::align_of::<WarpEvent>() - 2usize];
    ["Offset of field: WarpEvent::x"][::core::mem::offset_of!(WarpEvent, x) - 0usize];
    ["Offset of field: WarpEvent::y"][::core::mem::offset_of!(WarpEvent, y) - 2usize];
    ["Offset of field: WarpEvent::elevation"]
        [::core::mem::offset_of!(WarpEvent, elevation) - 4usize];
    ["Offset of field: WarpEvent::warpId"][::core::mem::offset_of!(WarpEvent, warpId) - 5usize];
    ["Offset of field: WarpEvent::mapNum"][::core::mem::offset_of!(WarpEvent, mapNum) - 6usize];
    ["Offset of field: WarpEvent::mapGroup"][::core::mem::offset_of!(WarpEvent, mapGroup) - 7usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CoordEvent {
    pub x: s16,
    pub y: s16,
    pub elevation: u8_,
    pub trigger: u16_,
    pub index: u16_,
    pub script: *const u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CoordEvent"][::core::mem::size_of::<CoordEvent>() - 16usize];
    ["Alignment of CoordEvent"][::core::mem::align_of::<CoordEvent>() - 4usize];
    ["Offset of field: CoordEvent::x"][::core::mem::offset_of!(CoordEvent, x) - 0usize];
    ["Offset of field: CoordEvent::y"][::core::mem::offset_of!(CoordEvent, y) - 2usize];
    ["Offset of field: CoordEvent::elevation"]
        [::core::mem::offset_of!(CoordEvent, elevation) - 4usize];
    ["Offset of field: CoordEvent::trigger"][::core::mem::offset_of!(CoordEvent, trigger) - 6usize];
    ["Offset of field: CoordEvent::index"][::core::mem::offset_of!(CoordEvent, index) - 8usize];
    ["Offset of field: CoordEvent::script"][::core::mem::offset_of!(CoordEvent, script) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BgEvent {
    pub x: u16_,
    pub y: u16_,
    pub elevation: u8_,
    pub kind: u8_,
    pub bgUnion: BgEvent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union BgEvent__bindgen_ty_1 {
    pub script: *const u8_,
    pub hiddenItem: BgEvent__bindgen_ty_1__bindgen_ty_1,
    pub secretBaseId: u32_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BgEvent__bindgen_ty_1__bindgen_ty_1 {
    pub item: u16_,
    pub hiddenItemId: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BgEvent__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<BgEvent__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of BgEvent__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<BgEvent__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: BgEvent__bindgen_ty_1__bindgen_ty_1::item"]
        [::core::mem::offset_of!(BgEvent__bindgen_ty_1__bindgen_ty_1, item) - 0usize];
    ["Offset of field: BgEvent__bindgen_ty_1__bindgen_ty_1::hiddenItemId"]
        [::core::mem::offset_of!(BgEvent__bindgen_ty_1__bindgen_ty_1, hiddenItemId) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BgEvent__bindgen_ty_1"][::core::mem::size_of::<BgEvent__bindgen_ty_1>() - 4usize];
    ["Alignment of BgEvent__bindgen_ty_1"]
        [::core::mem::align_of::<BgEvent__bindgen_ty_1>() - 4usize];
    ["Offset of field: BgEvent__bindgen_ty_1::script"]
        [::core::mem::offset_of!(BgEvent__bindgen_ty_1, script) - 0usize];
    ["Offset of field: BgEvent__bindgen_ty_1::hiddenItem"]
        [::core::mem::offset_of!(BgEvent__bindgen_ty_1, hiddenItem) - 0usize];
    ["Offset of field: BgEvent__bindgen_ty_1::secretBaseId"]
        [::core::mem::offset_of!(BgEvent__bindgen_ty_1, secretBaseId) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BgEvent"][::core::mem::size_of::<BgEvent>() - 12usize];
    ["Alignment of BgEvent"][::core::mem::align_of::<BgEvent>() - 4usize];
    ["Offset of field: BgEvent::x"][::core::mem::offset_of!(BgEvent, x) - 0usize];
    ["Offset of field: BgEvent::y"][::core::mem::offset_of!(BgEvent, y) - 2usize];
    ["Offset of field: BgEvent::elevation"][::core::mem::offset_of!(BgEvent, elevation) - 4usize];
    ["Offset of field: BgEvent::kind"][::core::mem::offset_of!(BgEvent, kind) - 5usize];
    ["Offset of field: BgEvent::bgUnion"][::core::mem::offset_of!(BgEvent, bgUnion) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MapEvents {
    pub objectEventCount: u8_,
    pub warpCount: u8_,
    pub coordEventCount: u8_,
    pub bgEventCount: u8_,
    pub objectEvents: *const ObjectEventTemplate,
    pub warps: *const WarpEvent,
    pub coordEvents: *const CoordEvent,
    pub bgEvents: *const BgEvent,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MapEvents"][::core::mem::size_of::<MapEvents>() - 20usize];
    ["Alignment of MapEvents"][::core::mem::align_of::<MapEvents>() - 4usize];
    ["Offset of field: MapEvents::objectEventCount"]
        [::core::mem::offset_of!(MapEvents, objectEventCount) - 0usize];
    ["Offset of field: MapEvents::warpCount"]
        [::core::mem::offset_of!(MapEvents, warpCount) - 1usize];
    ["Offset of field: MapEvents::coordEventCount"]
        [::core::mem::offset_of!(MapEvents, coordEventCount) - 2usize];
    ["Offset of field: MapEvents::bgEventCount"]
        [::core::mem::offset_of!(MapEvents, bgEventCount) - 3usize];
    ["Offset of field: MapEvents::objectEvents"]
        [::core::mem::offset_of!(MapEvents, objectEvents) - 4usize];
    ["Offset of field: MapEvents::warps"][::core::mem::offset_of!(MapEvents, warps) - 8usize];
    ["Offset of field: MapEvents::coordEvents"]
        [::core::mem::offset_of!(MapEvents, coordEvents) - 12usize];
    ["Offset of field: MapEvents::bgEvents"]
        [::core::mem::offset_of!(MapEvents, bgEvents) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MapConnection {
    pub direction: u8_,
    pub offset: s32,
    pub mapGroup: u8_,
    pub mapNum: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MapConnection"][::core::mem::size_of::<MapConnection>() - 12usize];
    ["Alignment of MapConnection"][::core::mem::align_of::<MapConnection>() - 4usize];
    ["Offset of field: MapConnection::direction"]
        [::core::mem::offset_of!(MapConnection, direction) - 0usize];
    ["Offset of field: MapConnection::offset"]
        [::core::mem::offset_of!(MapConnection, offset) - 4usize];
    ["Offset of field: MapConnection::mapGroup"]
        [::core::mem::offset_of!(MapConnection, mapGroup) - 8usize];
    ["Offset of field: MapConnection::mapNum"]
        [::core::mem::offset_of!(MapConnection, mapNum) - 9usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MapConnections {
    pub count: s32,
    pub connections: *const MapConnection,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MapConnections"][::core::mem::size_of::<MapConnections>() - 8usize];
    ["Alignment of MapConnections"][::core::mem::align_of::<MapConnections>() - 4usize];
    ["Offset of field: MapConnections::count"]
        [::core::mem::offset_of!(MapConnections, count) - 0usize];
    ["Offset of field: MapConnections::connections"]
        [::core::mem::offset_of!(MapConnections, connections) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MapHeader {
    pub mapLayout: *const MapLayout,
    pub events: *const MapEvents,
    pub mapScripts: *const u8_,
    pub connections: *const MapConnections,
    pub music: u16_,
    pub mapLayoutId: u16_,
    pub regionMapSectionId: u8_,
    pub cave: u8_,
    pub weather: u8_,
    pub mapType: u8_,
    pub filler_18: [u8_; 2usize],
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub battleType: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MapHeader"][::core::mem::size_of::<MapHeader>() - 28usize];
    ["Alignment of MapHeader"][::core::mem::align_of::<MapHeader>() - 4usize];
    ["Offset of field: MapHeader::mapLayout"]
        [::core::mem::offset_of!(MapHeader, mapLayout) - 0usize];
    ["Offset of field: MapHeader::events"][::core::mem::offset_of!(MapHeader, events) - 4usize];
    ["Offset of field: MapHeader::mapScripts"]
        [::core::mem::offset_of!(MapHeader, mapScripts) - 8usize];
    ["Offset of field: MapHeader::connections"]
        [::core::mem::offset_of!(MapHeader, connections) - 12usize];
    ["Offset of field: MapHeader::music"][::core::mem::offset_of!(MapHeader, music) - 16usize];
    ["Offset of field: MapHeader::mapLayoutId"]
        [::core::mem::offset_of!(MapHeader, mapLayoutId) - 18usize];
    ["Offset of field: MapHeader::regionMapSectionId"]
        [::core::mem::offset_of!(MapHeader, regionMapSectionId) - 20usize];
    ["Offset of field: MapHeader::cave"][::core::mem::offset_of!(MapHeader, cave) - 21usize];
    ["Offset of field: MapHeader::weather"][::core::mem::offset_of!(MapHeader, weather) - 22usize];
    ["Offset of field: MapHeader::mapType"][::core::mem::offset_of!(MapHeader, mapType) - 23usize];
    ["Offset of field: MapHeader::filler_18"]
        [::core::mem::offset_of!(MapHeader, filler_18) - 24usize];
    ["Offset of field: MapHeader::battleType"]
        [::core::mem::offset_of!(MapHeader, battleType) - 27usize];
};
impl MapHeader {
    #[inline]
    pub fn allowCycling(&self) -> bool8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_allowCycling(&mut self, val: bool8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allowCycling_raw(this: *const Self) -> bool8 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_allowCycling_raw(this: *mut Self, val: bool8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allowEscaping(&self) -> bool8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_allowEscaping(&mut self, val: bool8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allowEscaping_raw(this: *const Self) -> bool8 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_allowEscaping_raw(this: *mut Self, val: bool8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allowRunning(&self) -> bool8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_allowRunning(&mut self, val: bool8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allowRunning_raw(this: *const Self) -> bool8 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_allowRunning_raw(this: *mut Self, val: bool8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn showMapName(&self) -> bool8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_showMapName(&mut self, val: bool8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn showMapName_raw(this: *const Self) -> bool8 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                5u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_showMapName_raw(this: *mut Self, val: bool8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        allowCycling: bool8,
        allowEscaping: bool8,
        allowRunning: bool8,
        showMapName: bool8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let allowCycling: u8 = unsafe { ::core::mem::transmute(allowCycling) };
            allowCycling as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let allowEscaping: u8 = unsafe { ::core::mem::transmute(allowEscaping) };
            allowEscaping as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let allowRunning: u8 = unsafe { ::core::mem::transmute(allowRunning) };
            allowRunning as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let showMapName: u8 = unsafe { ::core::mem::transmute(showMapName) };
            showMapName as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct ObjectEvent {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub graphicsId: u16_,
    pub movementType: u8_,
    pub trainerType: u8_,
    pub localId: u8_,
    pub mapNum: u8_,
    pub mapGroup: u8_,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub initialCoords: Coords16,
    pub currentCoords: Coords16,
    pub previousCoords: Coords16,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub fieldEffectSpriteId: u8_,
    pub warpArrowSpriteId: u8_,
    pub movementActionId: u8_,
    pub trainerRange_berryTreeId: u8_,
    pub currentMetatileBehavior: u8_,
    pub previousMetatileBehavior: u8_,
    pub _bitfield_align_4: [u8; 0],
    pub _bitfield_4: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub directionSequenceIndex: u8_,
    pub playerCopyableMovement: u8_,
    pub spriteId: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ObjectEvent"][::core::mem::size_of::<ObjectEvent>() - 36usize];
    ["Alignment of ObjectEvent"][::core::mem::align_of::<ObjectEvent>() - 4usize];
    ["Offset of field: ObjectEvent::graphicsId"]
        [::core::mem::offset_of!(ObjectEvent, graphicsId) - 4usize];
    ["Offset of field: ObjectEvent::movementType"]
        [::core::mem::offset_of!(ObjectEvent, movementType) - 6usize];
    ["Offset of field: ObjectEvent::trainerType"]
        [::core::mem::offset_of!(ObjectEvent, trainerType) - 7usize];
    ["Offset of field: ObjectEvent::localId"]
        [::core::mem::offset_of!(ObjectEvent, localId) - 8usize];
    ["Offset of field: ObjectEvent::mapNum"][::core::mem::offset_of!(ObjectEvent, mapNum) - 9usize];
    ["Offset of field: ObjectEvent::mapGroup"]
        [::core::mem::offset_of!(ObjectEvent, mapGroup) - 10usize];
    ["Offset of field: ObjectEvent::initialCoords"]
        [::core::mem::offset_of!(ObjectEvent, initialCoords) - 12usize];
    ["Offset of field: ObjectEvent::currentCoords"]
        [::core::mem::offset_of!(ObjectEvent, currentCoords) - 16usize];
    ["Offset of field: ObjectEvent::previousCoords"]
        [::core::mem::offset_of!(ObjectEvent, previousCoords) - 20usize];
    ["Offset of field: ObjectEvent::fieldEffectSpriteId"]
        [::core::mem::offset_of!(ObjectEvent, fieldEffectSpriteId) - 26usize];
    ["Offset of field: ObjectEvent::warpArrowSpriteId"]
        [::core::mem::offset_of!(ObjectEvent, warpArrowSpriteId) - 27usize];
    ["Offset of field: ObjectEvent::movementActionId"]
        [::core::mem::offset_of!(ObjectEvent, movementActionId) - 28usize];
    ["Offset of field: ObjectEvent::trainerRange_berryTreeId"]
        [::core::mem::offset_of!(ObjectEvent, trainerRange_berryTreeId) - 29usize];
    ["Offset of field: ObjectEvent::currentMetatileBehavior"]
        [::core::mem::offset_of!(ObjectEvent, currentMetatileBehavior) - 30usize];
    ["Offset of field: ObjectEvent::previousMetatileBehavior"]
        [::core::mem::offset_of!(ObjectEvent, previousMetatileBehavior) - 31usize];
    ["Offset of field: ObjectEvent::directionSequenceIndex"]
        [::core::mem::offset_of!(ObjectEvent, directionSequenceIndex) - 33usize];
    ["Offset of field: ObjectEvent::playerCopyableMovement"]
        [::core::mem::offset_of!(ObjectEvent, playerCopyableMovement) - 34usize];
    ["Offset of field: ObjectEvent::spriteId"]
        [::core::mem::offset_of!(ObjectEvent, spriteId) - 35usize];
};
impl ObjectEvent {
    #[inline]
    pub fn active(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_active(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn active_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_active_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn singleMovementActive(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_singleMovementActive(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn singleMovementActive_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_singleMovementActive_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn triggerGroundEffectsOnMove(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_triggerGroundEffectsOnMove(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn triggerGroundEffectsOnMove_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_triggerGroundEffectsOnMove_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn triggerGroundEffectsOnStop(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_triggerGroundEffectsOnStop(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn triggerGroundEffectsOnStop_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_triggerGroundEffectsOnStop_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disableCoveringGroundEffects(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disableCoveringGroundEffects(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disableCoveringGroundEffects_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disableCoveringGroundEffects_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn landingJump(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_landingJump(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn landingJump_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_landingJump_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn heldMovementActive(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_heldMovementActive(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn heldMovementActive_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_heldMovementActive_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn heldMovementFinished(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_heldMovementFinished(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn heldMovementFinished_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_heldMovementFinished_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frozen(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frozen(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frozen_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_frozen_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn facingDirectionLocked(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_facingDirectionLocked(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn facingDirectionLocked_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_facingDirectionLocked_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disableAnim(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disableAnim(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disableAnim_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disableAnim_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enableAnim(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enableAnim(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enableAnim_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enableAnim_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn inanimate(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_inanimate(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn inanimate_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_inanimate_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn invisible(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_invisible(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn invisible_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_invisible_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn offScreen(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_offScreen(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn offScreen_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_offScreen_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn trackedByCamera(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_trackedByCamera(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn trackedByCamera_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_trackedByCamera_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn isPlayer(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isPlayer(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isPlayer_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_isPlayer_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn hasReflection(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hasReflection(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn hasReflection_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_hasReflection_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn inShortGrass(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_inShortGrass(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn inShortGrass_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_inShortGrass_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn inShallowFlowingWater(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_inShallowFlowingWater(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn inShallowFlowingWater_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_inShallowFlowingWater_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn inSandPile(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_inSandPile(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn inSandPile_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_inSandPile_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn inHotSprings(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_inHotSprings(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn inHotSprings_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                21usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_inHotSprings_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                21usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn hasShadow(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hasShadow(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn hasShadow_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                22usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_hasShadow_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                22usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn spriteAnimPausedBackup(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_spriteAnimPausedBackup(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn spriteAnimPausedBackup_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                23usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_spriteAnimPausedBackup_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                23usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn spriteAffineAnimPausedBackup(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_spriteAffineAnimPausedBackup(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn spriteAffineAnimPausedBackup_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_spriteAffineAnimPausedBackup_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disableJumpLandingGroundEffect(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disableJumpLandingGroundEffect(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disableJumpLandingGroundEffect_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                25usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disableJumpLandingGroundEffect_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                25usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fixedPriority(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fixedPriority(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fixedPriority_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                26usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fixedPriority_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                26usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn hideReflection(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hideReflection(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn hideReflection_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                27usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_hideReflection_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                27usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn shiny(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_shiny(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn shiny_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_shiny_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn padding(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_padding(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn padding_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                29usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_padding_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                29usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        active: u32_,
        singleMovementActive: u32_,
        triggerGroundEffectsOnMove: u32_,
        triggerGroundEffectsOnStop: u32_,
        disableCoveringGroundEffects: u32_,
        landingJump: u32_,
        heldMovementActive: u32_,
        heldMovementFinished: u32_,
        frozen: u32_,
        facingDirectionLocked: u32_,
        disableAnim: u32_,
        enableAnim: u32_,
        inanimate: u32_,
        invisible: u32_,
        offScreen: u32_,
        trackedByCamera: u32_,
        isPlayer: u32_,
        hasReflection: u32_,
        inShortGrass: u32_,
        inShallowFlowingWater: u32_,
        inSandPile: u32_,
        inHotSprings: u32_,
        hasShadow: u32_,
        spriteAnimPausedBackup: u32_,
        spriteAffineAnimPausedBackup: u32_,
        disableJumpLandingGroundEffect: u32_,
        fixedPriority: u32_,
        hideReflection: u32_,
        shiny: u32_,
        padding: u32_,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let active: u32 = unsafe { ::core::mem::transmute(active) };
            active as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let singleMovementActive: u32 = unsafe { ::core::mem::transmute(singleMovementActive) };
            singleMovementActive as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let triggerGroundEffectsOnMove: u32 =
                unsafe { ::core::mem::transmute(triggerGroundEffectsOnMove) };
            triggerGroundEffectsOnMove as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let triggerGroundEffectsOnStop: u32 =
                unsafe { ::core::mem::transmute(triggerGroundEffectsOnStop) };
            triggerGroundEffectsOnStop as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let disableCoveringGroundEffects: u32 =
                unsafe { ::core::mem::transmute(disableCoveringGroundEffects) };
            disableCoveringGroundEffects as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let landingJump: u32 = unsafe { ::core::mem::transmute(landingJump) };
            landingJump as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let heldMovementActive: u32 = unsafe { ::core::mem::transmute(heldMovementActive) };
            heldMovementActive as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let heldMovementFinished: u32 = unsafe { ::core::mem::transmute(heldMovementFinished) };
            heldMovementFinished as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let frozen: u32 = unsafe { ::core::mem::transmute(frozen) };
            frozen as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let facingDirectionLocked: u32 =
                unsafe { ::core::mem::transmute(facingDirectionLocked) };
            facingDirectionLocked as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let disableAnim: u32 = unsafe { ::core::mem::transmute(disableAnim) };
            disableAnim as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let enableAnim: u32 = unsafe { ::core::mem::transmute(enableAnim) };
            enableAnim as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let inanimate: u32 = unsafe { ::core::mem::transmute(inanimate) };
            inanimate as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let invisible: u32 = unsafe { ::core::mem::transmute(invisible) };
            invisible as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let offScreen: u32 = unsafe { ::core::mem::transmute(offScreen) };
            offScreen as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let trackedByCamera: u32 = unsafe { ::core::mem::transmute(trackedByCamera) };
            trackedByCamera as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let isPlayer: u32 = unsafe { ::core::mem::transmute(isPlayer) };
            isPlayer as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let hasReflection: u32 = unsafe { ::core::mem::transmute(hasReflection) };
            hasReflection as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let inShortGrass: u32 = unsafe { ::core::mem::transmute(inShortGrass) };
            inShortGrass as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let inShallowFlowingWater: u32 =
                unsafe { ::core::mem::transmute(inShallowFlowingWater) };
            inShallowFlowingWater as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let inSandPile: u32 = unsafe { ::core::mem::transmute(inSandPile) };
            inSandPile as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let inHotSprings: u32 = unsafe { ::core::mem::transmute(inHotSprings) };
            inHotSprings as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let hasShadow: u32 = unsafe { ::core::mem::transmute(hasShadow) };
            hasShadow as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let spriteAnimPausedBackup: u32 =
                unsafe { ::core::mem::transmute(spriteAnimPausedBackup) };
            spriteAnimPausedBackup as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let spriteAffineAnimPausedBackup: u32 =
                unsafe { ::core::mem::transmute(spriteAffineAnimPausedBackup) };
            spriteAffineAnimPausedBackup as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let disableJumpLandingGroundEffect: u32 =
                unsafe { ::core::mem::transmute(disableJumpLandingGroundEffect) };
            disableJumpLandingGroundEffect as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let fixedPriority: u32 = unsafe { ::core::mem::transmute(fixedPriority) };
            fixedPriority as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let hideReflection: u32 = unsafe { ::core::mem::transmute(hideReflection) };
            hideReflection as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let shiny: u32 = unsafe { ::core::mem::transmute(shiny) };
            shiny as u64
        });
        __bindgen_bitfield_unit.set(29usize, 3u8, {
            let padding: u32 = unsafe { ::core::mem::transmute(padding) };
            padding as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn currentElevation(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_currentElevation(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn currentElevation_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_currentElevation_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn previousElevation(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_previousElevation(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn previousElevation_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_previousElevation_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        currentElevation: u8_,
        previousElevation: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let currentElevation: u8 = unsafe { ::core::mem::transmute(currentElevation) };
            currentElevation as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let previousElevation: u8 = unsafe { ::core::mem::transmute(previousElevation) };
            previousElevation as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn facingDirection(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(0usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_facingDirection(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_3.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn facingDirection_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                4u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_facingDirection_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn movementDirection(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(4usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_movementDirection(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_3.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn movementDirection_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_3),
                4usize,
                4u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_movementDirection_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_3),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn rangeX(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(8usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_rangeX(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_3.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn rangeX_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_3),
                8usize,
                4u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_rangeX_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_3),
                8usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn rangeY(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(12usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_rangeY(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_3.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn rangeY_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_3),
                12usize,
                4u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_rangeY_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_3),
                12usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        facingDirection: u16_,
        movementDirection: u16_,
        rangeX: u16_,
        rangeY: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let facingDirection: u16 = unsafe { ::core::mem::transmute(facingDirection) };
            facingDirection as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let movementDirection: u16 = unsafe { ::core::mem::transmute(movementDirection) };
            movementDirection as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let rangeX: u16 = unsafe { ::core::mem::transmute(rangeX) };
            rangeX as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let rangeY: u16 = unsafe { ::core::mem::transmute(rangeY) };
            rangeY as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn previousMovementDirection(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_previousMovementDirection(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_4.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn previousMovementDirection_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_previousMovementDirection_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn directionOverwrite(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_directionOverwrite(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_4.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn directionOverwrite_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_directionOverwrite_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_4(
        previousMovementDirection: u8_,
        directionOverwrite: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let previousMovementDirection: u8 =
                unsafe { ::core::mem::transmute(previousMovementDirection) };
            previousMovementDirection as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let directionOverwrite: u8 = unsafe { ::core::mem::transmute(directionOverwrite) };
            directionOverwrite as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ObjectEventGraphicsInfo {
    pub tileTag: u16_,
    pub paletteTag: u16_,
    pub reflectionPaletteTag: u16_,
    pub size: u16_,
    pub width: s16,
    pub height: s16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub tracks: u8_,
    pub oam: *const OamData,
    pub subspriteTables: *const SubspriteTable,
    pub anims: *const *const AnimCmd,
    pub images: *const SpriteFrameImage,
    pub affineAnims: *const *const AffineAnimCmd,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ObjectEventGraphicsInfo"]
        [::core::mem::size_of::<ObjectEventGraphicsInfo>() - 36usize];
    ["Alignment of ObjectEventGraphicsInfo"]
        [::core::mem::align_of::<ObjectEventGraphicsInfo>() - 4usize];
    ["Offset of field: ObjectEventGraphicsInfo::tileTag"]
        [::core::mem::offset_of!(ObjectEventGraphicsInfo, tileTag) - 0usize];
    ["Offset of field: ObjectEventGraphicsInfo::paletteTag"]
        [::core::mem::offset_of!(ObjectEventGraphicsInfo, paletteTag) - 2usize];
    ["Offset of field: ObjectEventGraphicsInfo::reflectionPaletteTag"]
        [::core::mem::offset_of!(ObjectEventGraphicsInfo, reflectionPaletteTag) - 4usize];
    ["Offset of field: ObjectEventGraphicsInfo::size"]
        [::core::mem::offset_of!(ObjectEventGraphicsInfo, size) - 6usize];
    ["Offset of field: ObjectEventGraphicsInfo::width"]
        [::core::mem::offset_of!(ObjectEventGraphicsInfo, width) - 8usize];
    ["Offset of field: ObjectEventGraphicsInfo::height"]
        [::core::mem::offset_of!(ObjectEventGraphicsInfo, height) - 10usize];
    ["Offset of field: ObjectEventGraphicsInfo::tracks"]
        [::core::mem::offset_of!(ObjectEventGraphicsInfo, tracks) - 13usize];
    ["Offset of field: ObjectEventGraphicsInfo::oam"]
        [::core::mem::offset_of!(ObjectEventGraphicsInfo, oam) - 16usize];
    ["Offset of field: ObjectEventGraphicsInfo::subspriteTables"]
        [::core::mem::offset_of!(ObjectEventGraphicsInfo, subspriteTables) - 20usize];
    ["Offset of field: ObjectEventGraphicsInfo::anims"]
        [::core::mem::offset_of!(ObjectEventGraphicsInfo, anims) - 24usize];
    ["Offset of field: ObjectEventGraphicsInfo::images"]
        [::core::mem::offset_of!(ObjectEventGraphicsInfo, images) - 28usize];
    ["Offset of field: ObjectEventGraphicsInfo::affineAnims"]
        [::core::mem::offset_of!(ObjectEventGraphicsInfo, affineAnims) - 32usize];
};
impl ObjectEventGraphicsInfo {
    #[inline]
    pub fn paletteSlot(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_paletteSlot(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn paletteSlot_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_paletteSlot_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn shadowSize(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_shadowSize(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn shadowSize_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_shadowSize_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn inanimate(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_inanimate(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn inanimate_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_inanimate_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn compressed(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_compressed(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn compressed_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_compressed_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        paletteSlot: u8_,
        shadowSize: u8_,
        inanimate: u8_,
        compressed: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let paletteSlot: u8 = unsafe { ::core::mem::transmute(paletteSlot) };
            paletteSlot as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let shadowSize: u8 = unsafe { ::core::mem::transmute(shadowSize) };
            shadowSize as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let inanimate: u8 = unsafe { ::core::mem::transmute(inanimate) };
            inanimate as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let compressed: u8 = unsafe { ::core::mem::transmute(compressed) };
            compressed as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const PLAYER_AVATAR_STATE_NORMAL: _bindgen_ty_7 = 0;
pub const PLAYER_AVATAR_STATE_MACH_BIKE: _bindgen_ty_7 = 1;
pub const PLAYER_AVATAR_STATE_ACRO_BIKE: _bindgen_ty_7 = 2;
pub const PLAYER_AVATAR_STATE_SURFING: _bindgen_ty_7 = 3;
pub const PLAYER_AVATAR_STATE_UNDERWATER: _bindgen_ty_7 = 4;
pub const PLAYER_AVATAR_STATE_FIELD_MOVE: _bindgen_ty_7 = 5;
pub const PLAYER_AVATAR_STATE_FISHING: _bindgen_ty_7 = 6;
pub const PLAYER_AVATAR_STATE_WATERING: _bindgen_ty_7 = 7;
pub const PLAYER_AVATAR_STATE_VSSEEKER: _bindgen_ty_7 = 8;
pub type _bindgen_ty_7 = ::core::ffi::c_uint;
pub const ACRO_BIKE_NORMAL: _bindgen_ty_8 = 0;
pub const ACRO_BIKE_TURNING: _bindgen_ty_8 = 1;
pub const ACRO_BIKE_WHEELIE_STANDING: _bindgen_ty_8 = 2;
pub const ACRO_BIKE_BUNNY_HOP: _bindgen_ty_8 = 3;
pub const ACRO_BIKE_WHEELIE_MOVING: _bindgen_ty_8 = 4;
pub const ACRO_BIKE_STATE5: _bindgen_ty_8 = 5;
pub const ACRO_BIKE_STATE6: _bindgen_ty_8 = 6;
pub type _bindgen_ty_8 = ::core::ffi::c_uint;
pub const COLLISION_NONE: _bindgen_ty_9 = 0;
pub const COLLISION_OUTSIDE_RANGE: _bindgen_ty_9 = 1;
pub const COLLISION_IMPASSABLE: _bindgen_ty_9 = 2;
pub const COLLISION_ELEVATION_MISMATCH: _bindgen_ty_9 = 3;
pub const COLLISION_OBJECT_EVENT: _bindgen_ty_9 = 4;
pub const COLLISION_STOP_SURFING: _bindgen_ty_9 = 5;
pub const COLLISION_LEDGE_JUMP: _bindgen_ty_9 = 6;
pub const COLLISION_PUSHED_BOULDER: _bindgen_ty_9 = 7;
pub const COLLISION_ROTATING_GATE: _bindgen_ty_9 = 8;
pub const COLLISION_WHEELIE_HOP: _bindgen_ty_9 = 9;
pub const COLLISION_ISOLATED_VERTICAL_RAIL: _bindgen_ty_9 = 10;
pub const COLLISION_ISOLATED_HORIZONTAL_RAIL: _bindgen_ty_9 = 11;
pub const COLLISION_VERTICAL_RAIL: _bindgen_ty_9 = 12;
pub const COLLISION_HORIZONTAL_RAIL: _bindgen_ty_9 = 13;
pub const COLLISION_STAIR_WARP: _bindgen_ty_9 = 14;
pub const COLLISION_SIDEWAYS_STAIRS_TO_RIGHT: _bindgen_ty_9 = 15;
pub const COLLISION_SIDEWAYS_STAIRS_TO_LEFT: _bindgen_ty_9 = 16;
pub type _bindgen_ty_9 = ::core::ffi::c_uint;
pub const NOT_MOVING: _bindgen_ty_10 = 0;
pub const TURN_DIRECTION: _bindgen_ty_10 = 1;
pub const MOVING: _bindgen_ty_10 = 2;
pub type _bindgen_ty_10 = ::core::ffi::c_uint;
pub const T_NOT_MOVING: _bindgen_ty_11 = 0;
pub const T_TILE_TRANSITION: _bindgen_ty_11 = 1;
pub const T_TILE_CENTER: _bindgen_ty_11 = 2;
pub type _bindgen_ty_11 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlayerAvatar {
    pub flags: u8_,
    pub transitionFlags: u8_,
    pub runningState: u8_,
    pub tileTransitionState: u8_,
    pub spriteId: u8_,
    pub objectEventId: u8_,
    pub preventStep: bool8,
    pub gender: u8_,
    pub acroBikeState: u8_,
    pub newDirBackup: u8_,
    pub bikeFrameCounter: u8_,
    pub bikeSpeed: u8_,
    pub directionHistory: u32_,
    pub abStartSelectHistory: u32_,
    pub dirTimerHistory: [u8_; 8usize],
    pub abStartSelectTimerHistory: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PlayerAvatar"][::core::mem::size_of::<PlayerAvatar>() - 36usize];
    ["Alignment of PlayerAvatar"][::core::mem::align_of::<PlayerAvatar>() - 4usize];
    ["Offset of field: PlayerAvatar::flags"][::core::mem::offset_of!(PlayerAvatar, flags) - 0usize];
    ["Offset of field: PlayerAvatar::transitionFlags"]
        [::core::mem::offset_of!(PlayerAvatar, transitionFlags) - 1usize];
    ["Offset of field: PlayerAvatar::runningState"]
        [::core::mem::offset_of!(PlayerAvatar, runningState) - 2usize];
    ["Offset of field: PlayerAvatar::tileTransitionState"]
        [::core::mem::offset_of!(PlayerAvatar, tileTransitionState) - 3usize];
    ["Offset of field: PlayerAvatar::spriteId"]
        [::core::mem::offset_of!(PlayerAvatar, spriteId) - 4usize];
    ["Offset of field: PlayerAvatar::objectEventId"]
        [::core::mem::offset_of!(PlayerAvatar, objectEventId) - 5usize];
    ["Offset of field: PlayerAvatar::preventStep"]
        [::core::mem::offset_of!(PlayerAvatar, preventStep) - 6usize];
    ["Offset of field: PlayerAvatar::gender"]
        [::core::mem::offset_of!(PlayerAvatar, gender) - 7usize];
    ["Offset of field: PlayerAvatar::acroBikeState"]
        [::core::mem::offset_of!(PlayerAvatar, acroBikeState) - 8usize];
    ["Offset of field: PlayerAvatar::newDirBackup"]
        [::core::mem::offset_of!(PlayerAvatar, newDirBackup) - 9usize];
    ["Offset of field: PlayerAvatar::bikeFrameCounter"]
        [::core::mem::offset_of!(PlayerAvatar, bikeFrameCounter) - 10usize];
    ["Offset of field: PlayerAvatar::bikeSpeed"]
        [::core::mem::offset_of!(PlayerAvatar, bikeSpeed) - 11usize];
    ["Offset of field: PlayerAvatar::directionHistory"]
        [::core::mem::offset_of!(PlayerAvatar, directionHistory) - 12usize];
    ["Offset of field: PlayerAvatar::abStartSelectHistory"]
        [::core::mem::offset_of!(PlayerAvatar, abStartSelectHistory) - 16usize];
    ["Offset of field: PlayerAvatar::dirTimerHistory"]
        [::core::mem::offset_of!(PlayerAvatar, dirTimerHistory) - 20usize];
    ["Offset of field: PlayerAvatar::abStartSelectTimerHistory"]
        [::core::mem::offset_of!(PlayerAvatar, abStartSelectTimerHistory) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Camera {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub x: s32,
    pub y: s32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Camera"][::core::mem::size_of::<Camera>() - 12usize];
    ["Alignment of Camera"][::core::mem::align_of::<Camera>() - 4usize];
    ["Offset of field: Camera::x"][::core::mem::offset_of!(Camera, x) - 4usize];
    ["Offset of field: Camera::y"][::core::mem::offset_of!(Camera, y) - 8usize];
};
impl Camera {
    #[inline]
    pub fn active(&self) -> bool8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_active(&mut self, val: bool8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn active_raw(this: *const Self) -> bool8 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_active_raw(this: *mut Self, val: bool8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(active: bool8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let active: u8 = unsafe { ::core::mem::transmute(active) };
            active as u64
        });
        __bindgen_bitfield_unit
    }
}
unsafe extern "C" {
    pub static mut gObjectEvents: [ObjectEvent; 16usize];
}
unsafe extern "C" {
    pub static mut gSelectedObjectEvent: u8_;
}
unsafe extern "C" {
    pub static mut gMapHeader: MapHeader;
}
unsafe extern "C" {
    pub static mut gPlayerAvatar: PlayerAvatar;
}
unsafe extern "C" {
    pub static mut gCamera: Camera;
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct Berry {
    pub _bindgen_opaque_blob: [u32; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Berry"][::core::mem::size_of::<Berry>() - 28usize];
    ["Alignment of Berry"][::core::mem::align_of::<Berry>() - 4usize];
};
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct Berry2 {
    pub _bindgen_opaque_blob: [u32; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Berry2"][::core::mem::size_of::<Berry2>() - 28usize];
    ["Alignment of Berry2"][::core::mem::align_of::<Berry2>() - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EnigmaBerry {
    pub berry: Berry2,
    pub itemEffect: [u8_; 18usize],
    pub holdEffect: u8_,
    pub holdEffectParam: u8_,
    pub checksum: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EnigmaBerry"][::core::mem::size_of::<EnigmaBerry>() - 52usize];
    ["Alignment of EnigmaBerry"][::core::mem::align_of::<EnigmaBerry>() - 4usize];
    ["Offset of field: EnigmaBerry::berry"][::core::mem::offset_of!(EnigmaBerry, berry) - 0usize];
    ["Offset of field: EnigmaBerry::itemEffect"]
        [::core::mem::offset_of!(EnigmaBerry, itemEffect) - 28usize];
    ["Offset of field: EnigmaBerry::holdEffect"]
        [::core::mem::offset_of!(EnigmaBerry, holdEffect) - 46usize];
    ["Offset of field: EnigmaBerry::holdEffectParam"]
        [::core::mem::offset_of!(EnigmaBerry, holdEffectParam) - 47usize];
    ["Offset of field: EnigmaBerry::checksum"]
        [::core::mem::offset_of!(EnigmaBerry, checksum) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BattleEnigmaBerry {
    pub name: [u8_; 7usize],
    pub holdEffect: u8_,
    pub itemEffect: [u8_; 18usize],
    pub holdEffectParam: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BattleEnigmaBerry"][::core::mem::size_of::<BattleEnigmaBerry>() - 27usize];
    ["Alignment of BattleEnigmaBerry"][::core::mem::align_of::<BattleEnigmaBerry>() - 1usize];
    ["Offset of field: BattleEnigmaBerry::name"]
        [::core::mem::offset_of!(BattleEnigmaBerry, name) - 0usize];
    ["Offset of field: BattleEnigmaBerry::holdEffect"]
        [::core::mem::offset_of!(BattleEnigmaBerry, holdEffect) - 7usize];
    ["Offset of field: BattleEnigmaBerry::itemEffect"]
        [::core::mem::offset_of!(BattleEnigmaBerry, itemEffect) - 8usize];
    ["Offset of field: BattleEnigmaBerry::holdEffectParam"]
        [::core::mem::offset_of!(BattleEnigmaBerry, holdEffectParam) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BerryTree {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BerryTree"][::core::mem::size_of::<BerryTree>() - 8usize];
    ["Alignment of BerryTree"][::core::mem::align_of::<BerryTree>() - 2usize];
};
impl BerryTree {
    #[inline]
    pub fn berry(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_berry(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn berry_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_berry_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn weeds(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_weeds(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn weeds_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_weeds_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn stage(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_stage(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn stage_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_stage_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mulch(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_mulch(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mulch_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_mulch_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn stopGrowth(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stopGrowth(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn stopGrowth_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_stopGrowth_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn minutesUntilNextStage(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 14u8) as u16) }
    }
    #[inline]
    pub fn set_minutesUntilNextStage(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 14u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn minutesUntilNextStage_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                14u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_minutesUntilNextStage_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                14u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mutationA(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_mutationA(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mutationA_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                30usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_mutationA_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                30usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn berryYield(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_berryYield(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn berryYield_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                5u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_berryYield_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pests(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(37usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pests(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(37usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pests_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                37usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_pests_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                37usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mutationB(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(38usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_mutationB(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(38usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mutationB_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                38usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_mutationB_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                38usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn regrowthCount(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(40usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_regrowthCount(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(40usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn regrowthCount_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                40usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_regrowthCount_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                40usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn watered(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(44usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_watered(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(44usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn watered_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                44usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_watered_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                44usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn moistureLevel(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(48usize, 7u8) as u16) }
    }
    #[inline]
    pub fn set_moistureLevel(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(48usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn moistureLevel_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                48usize,
                7u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_moistureLevel_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                48usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn moistureClock(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(55usize, 7u8) as u16) }
    }
    #[inline]
    pub fn set_moistureClock(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(55usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn moistureClock_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                55usize,
                7u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_moistureClock_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                55usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn padding(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(62usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_padding(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(62usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn padding_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                62usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_padding_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                62usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        berry: u8_,
        weeds: u8_,
        stage: u8_,
        mulch: u8_,
        stopGrowth: u8_,
        minutesUntilNextStage: u16_,
        mutationA: u16_,
        berryYield: u8_,
        pests: u8_,
        mutationB: u8_,
        regrowthCount: u8_,
        watered: u8_,
        moistureLevel: u16_,
        moistureClock: u16_,
        padding: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let berry: u8 = unsafe { ::core::mem::transmute(berry) };
            berry as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let weeds: u8 = unsafe { ::core::mem::transmute(weeds) };
            weeds as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let stage: u8 = unsafe { ::core::mem::transmute(stage) };
            stage as u64
        });
        __bindgen_bitfield_unit.set(11usize, 4u8, {
            let mulch: u8 = unsafe { ::core::mem::transmute(mulch) };
            mulch as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let stopGrowth: u8 = unsafe { ::core::mem::transmute(stopGrowth) };
            stopGrowth as u64
        });
        __bindgen_bitfield_unit.set(16usize, 14u8, {
            let minutesUntilNextStage: u16 =
                unsafe { ::core::mem::transmute(minutesUntilNextStage) };
            minutesUntilNextStage as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let mutationA: u16 = unsafe { ::core::mem::transmute(mutationA) };
            mutationA as u64
        });
        __bindgen_bitfield_unit.set(32usize, 5u8, {
            let berryYield: u8 = unsafe { ::core::mem::transmute(berryYield) };
            berryYield as u64
        });
        __bindgen_bitfield_unit.set(37usize, 1u8, {
            let pests: u8 = unsafe { ::core::mem::transmute(pests) };
            pests as u64
        });
        __bindgen_bitfield_unit.set(38usize, 2u8, {
            let mutationB: u8 = unsafe { ::core::mem::transmute(mutationB) };
            mutationB as u64
        });
        __bindgen_bitfield_unit.set(40usize, 4u8, {
            let regrowthCount: u8 = unsafe { ::core::mem::transmute(regrowthCount) };
            regrowthCount as u64
        });
        __bindgen_bitfield_unit.set(44usize, 4u8, {
            let watered: u8 = unsafe { ::core::mem::transmute(watered) };
            watered as u64
        });
        __bindgen_bitfield_unit.set(48usize, 7u8, {
            let moistureLevel: u16 = unsafe { ::core::mem::transmute(moistureLevel) };
            moistureLevel as u64
        });
        __bindgen_bitfield_unit.set(55usize, 7u8, {
            let moistureClock: u16 = unsafe { ::core::mem::transmute(moistureClock) };
            moistureClock as u64
        });
        __bindgen_bitfield_unit.set(62usize, 2u8, {
            let padding: u16 = unsafe { ::core::mem::transmute(padding) };
            padding as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TVShow {
    pub common: TVShow__bindgen_ty_1,
    pub commonInit: TVShow__bindgen_ty_2,
    pub fanclubLetter: TVShow__bindgen_ty_3,
    pub recentHappenings: TVShow__bindgen_ty_4,
    pub fanclubOpinions: TVShow__bindgen_ty_5,
    pub dummy: TVShow__bindgen_ty_6,
    pub nameRaterShow: TVShow__bindgen_ty_7,
    pub bravoTrainer: TVShow__bindgen_ty_8,
    pub bravoTrainerTower: TVShow__bindgen_ty_9,
    pub contestLiveUpdates: TVShow__bindgen_ty_10,
    pub threeCheers: TVShow__bindgen_ty_11,
    pub battleUpdate: TVShow__bindgen_ty_12,
    pub fanClubSpecial: TVShow__bindgen_ty_13,
    pub contestLady: TVShow__bindgen_ty_14,
    pub pokemonToday: TVShow__bindgen_ty_15,
    pub smartshopperShow: TVShow__bindgen_ty_16,
    pub pokemonTodayFailed: TVShow__bindgen_ty_17,
    pub pokemonAngler: TVShow__bindgen_ty_18,
    pub worldOfMasters: TVShow__bindgen_ty_19,
    pub rivalTrainer: TVShow__bindgen_ty_20,
    pub trendWatcher: TVShow__bindgen_ty_21,
    pub treasureInvestigators: TVShow__bindgen_ty_22,
    pub findThatGamer: TVShow__bindgen_ty_23,
    pub breakingNews: TVShow__bindgen_ty_24,
    pub secretBaseVisit: TVShow__bindgen_ty_25,
    pub lottoWinner: TVShow__bindgen_ty_26,
    pub battleSeminar: TVShow__bindgen_ty_27,
    pub trainerFanClub: TVShow__bindgen_ty_28,
    pub cuties: TVShow__bindgen_ty_29,
    pub frontier: TVShow__bindgen_ty_30,
    pub numberOne: TVShow__bindgen_ty_31,
    pub secretBaseSecrets: TVShow__bindgen_ty_32,
    pub safariFanClub: TVShow__bindgen_ty_33,
    pub massOutbreak: TVShow__bindgen_ty_34,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_1 {
    pub kind: u8_,
    pub active: bool8,
    pub data: [u8_; 26usize],
    pub srcTrainerId3Lo: u8_,
    pub srcTrainerId3Hi: u8_,
    pub srcTrainerId2Lo: u8_,
    pub srcTrainerId2Hi: u8_,
    pub srcTrainerIdLo: u8_,
    pub srcTrainerIdHi: u8_,
    pub trainerIdLo: u8_,
    pub trainerIdHi: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_1"][::core::mem::size_of::<TVShow__bindgen_ty_1>() - 36usize];
    ["Alignment of TVShow__bindgen_ty_1"][::core::mem::align_of::<TVShow__bindgen_ty_1>() - 1usize];
    ["Offset of field: TVShow__bindgen_ty_1::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_1, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_1::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_1, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_1::data"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_1, data) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_1::srcTrainerId3Lo"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_1, srcTrainerId3Lo) - 28usize];
    ["Offset of field: TVShow__bindgen_ty_1::srcTrainerId3Hi"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_1, srcTrainerId3Hi) - 29usize];
    ["Offset of field: TVShow__bindgen_ty_1::srcTrainerId2Lo"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_1, srcTrainerId2Lo) - 30usize];
    ["Offset of field: TVShow__bindgen_ty_1::srcTrainerId2Hi"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_1, srcTrainerId2Hi) - 31usize];
    ["Offset of field: TVShow__bindgen_ty_1::srcTrainerIdLo"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_1, srcTrainerIdLo) - 32usize];
    ["Offset of field: TVShow__bindgen_ty_1::srcTrainerIdHi"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_1, srcTrainerIdHi) - 33usize];
    ["Offset of field: TVShow__bindgen_ty_1::trainerIdLo"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_1, trainerIdLo) - 34usize];
    ["Offset of field: TVShow__bindgen_ty_1::trainerIdHi"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_1, trainerIdHi) - 35usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_2 {
    pub kind: u8_,
    pub active: bool8,
    pub data: [u8_; 34usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_2"][::core::mem::size_of::<TVShow__bindgen_ty_2>() - 36usize];
    ["Alignment of TVShow__bindgen_ty_2"][::core::mem::align_of::<TVShow__bindgen_ty_2>() - 1usize];
    ["Offset of field: TVShow__bindgen_ty_2::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_2, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_2::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_2, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_2::data"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_2, data) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_3 {
    pub kind: u8_,
    pub active: bool8,
    pub species: u16_,
    pub words: [u16_; 6usize],
    pub playerName: [u8_; 8usize],
    pub language: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_3"][::core::mem::size_of::<TVShow__bindgen_ty_3>() - 26usize];
    ["Alignment of TVShow__bindgen_ty_3"][::core::mem::align_of::<TVShow__bindgen_ty_3>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_3::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_3, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_3::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_3, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_3::species"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_3, species) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_3::words"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_3, words) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_3::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_3, playerName) - 16usize];
    ["Offset of field: TVShow__bindgen_ty_3::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_3, language) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_4 {
    pub kind: u8_,
    pub active: bool8,
    pub species: u16_,
    pub words: [u16_; 6usize],
    pub playerName: [u8_; 8usize],
    pub language: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_4"][::core::mem::size_of::<TVShow__bindgen_ty_4>() - 26usize];
    ["Alignment of TVShow__bindgen_ty_4"][::core::mem::align_of::<TVShow__bindgen_ty_4>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_4::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_4, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_4::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_4, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_4::species"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_4, species) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_4::words"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_4, words) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_4::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_4, playerName) - 16usize];
    ["Offset of field: TVShow__bindgen_ty_4::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_4, language) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_5 {
    pub kind: u8_,
    pub active: bool8,
    pub species: u16_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub playerName: [u8_; 8usize],
    pub language: u8_,
    pub pokemonNameLanguage: u8_,
    pub filler_0F: [u8_; 1usize],
    pub nickname: [u8_; 8usize],
    pub words18: [u16_; 2usize],
    pub words: [u16_; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_5"][::core::mem::size_of::<TVShow__bindgen_ty_5>() - 32usize];
    ["Alignment of TVShow__bindgen_ty_5"][::core::mem::align_of::<TVShow__bindgen_ty_5>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_5::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_5, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_5::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_5, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_5::species"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_5, species) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_5::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_5, playerName) - 5usize];
    ["Offset of field: TVShow__bindgen_ty_5::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_5, language) - 13usize];
    ["Offset of field: TVShow__bindgen_ty_5::pokemonNameLanguage"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_5, pokemonNameLanguage) - 14usize];
    ["Offset of field: TVShow__bindgen_ty_5::filler_0F"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_5, filler_0F) - 15usize];
    ["Offset of field: TVShow__bindgen_ty_5::nickname"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_5, nickname) - 16usize];
    ["Offset of field: TVShow__bindgen_ty_5::words18"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_5, words18) - 24usize];
    ["Offset of field: TVShow__bindgen_ty_5::words"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_5, words) - 28usize];
};
impl TVShow__bindgen_ty_5 {
    #[inline]
    pub fn friendshipHighNybble(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_friendshipHighNybble(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn friendshipHighNybble_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_friendshipHighNybble_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn questionAsked(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_questionAsked(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn questionAsked_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_questionAsked_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        friendshipHighNybble: u8_,
        questionAsked: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let friendshipHighNybble: u8 = unsafe { ::core::mem::transmute(friendshipHighNybble) };
            friendshipHighNybble as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let questionAsked: u8 = unsafe { ::core::mem::transmute(questionAsked) };
            questionAsked as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_6 {
    pub kind: u8_,
    pub active: bool8,
    pub words: [u16_; 2usize],
    pub species: u16_,
    pub filler_08: [u8_; 3usize],
    pub name: [u8_; 12usize],
    pub language: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_6"][::core::mem::size_of::<TVShow__bindgen_ty_6>() - 24usize];
    ["Alignment of TVShow__bindgen_ty_6"][::core::mem::align_of::<TVShow__bindgen_ty_6>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_6::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_6, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_6::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_6, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_6::words"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_6, words) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_6::species"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_6, species) - 6usize];
    ["Offset of field: TVShow__bindgen_ty_6::filler_08"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_6, filler_08) - 8usize];
    ["Offset of field: TVShow__bindgen_ty_6::name"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_6, name) - 11usize];
    ["Offset of field: TVShow__bindgen_ty_6::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_6, language) - 23usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_7 {
    pub kind: u8_,
    pub active: bool8,
    pub species: u16_,
    pub pokemonName: [u8_; 11usize],
    pub trainerName: [u8_; 8usize],
    pub unused: [u8_; 3usize],
    pub random: u8_,
    pub random2: u8_,
    pub randomSpecies: u16_,
    pub language: u8_,
    pub pokemonNameLanguage: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_7"][::core::mem::size_of::<TVShow__bindgen_ty_7>() - 32usize];
    ["Alignment of TVShow__bindgen_ty_7"][::core::mem::align_of::<TVShow__bindgen_ty_7>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_7::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_7, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_7::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_7, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_7::species"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_7, species) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_7::pokemonName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_7, pokemonName) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_7::trainerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_7, trainerName) - 15usize];
    ["Offset of field: TVShow__bindgen_ty_7::unused"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_7, unused) - 23usize];
    ["Offset of field: TVShow__bindgen_ty_7::random"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_7, random) - 26usize];
    ["Offset of field: TVShow__bindgen_ty_7::random2"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_7, random2) - 27usize];
    ["Offset of field: TVShow__bindgen_ty_7::randomSpecies"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_7, randomSpecies) - 28usize];
    ["Offset of field: TVShow__bindgen_ty_7::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_7, language) - 30usize];
    ["Offset of field: TVShow__bindgen_ty_7::pokemonNameLanguage"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_7, pokemonNameLanguage) - 31usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_8 {
    pub kind: u8_,
    pub active: bool8,
    pub species: u16_,
    pub words: [u16_; 2usize],
    pub pokemonNickname: [u8_; 11usize],
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub move_: u16_,
    pub playerName: [u8_; 8usize],
    pub language: u8_,
    pub pokemonNameLanguage: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_8"][::core::mem::size_of::<TVShow__bindgen_ty_8>() - 32usize];
    ["Alignment of TVShow__bindgen_ty_8"][::core::mem::align_of::<TVShow__bindgen_ty_8>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_8::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_8, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_8::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_8, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_8::species"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_8, species) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_8::words"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_8, words) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_8::pokemonNickname"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_8, pokemonNickname) - 8usize];
    ["Offset of field: TVShow__bindgen_ty_8::move_"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_8, move_) - 20usize];
    ["Offset of field: TVShow__bindgen_ty_8::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_8, playerName) - 22usize];
    ["Offset of field: TVShow__bindgen_ty_8::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_8, language) - 30usize];
    ["Offset of field: TVShow__bindgen_ty_8::pokemonNameLanguage"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_8, pokemonNameLanguage) - 31usize];
};
impl TVShow__bindgen_ty_8 {
    #[inline]
    pub fn contestCategory(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_contestCategory(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn contestCategory_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_contestCategory_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn contestRank(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_contestRank(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn contestRank_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_contestRank_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn contestResult(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_contestResult(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn contestResult_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_contestResult_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        contestCategory: u8_,
        contestRank: u8_,
        contestResult: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let contestCategory: u8 = unsafe { ::core::mem::transmute(contestCategory) };
            contestCategory as u64
        });
        __bindgen_bitfield_unit.set(3usize, 2u8, {
            let contestRank: u8 = unsafe { ::core::mem::transmute(contestRank) };
            contestRank as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let contestResult: u8 = unsafe { ::core::mem::transmute(contestResult) };
            contestResult as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_9 {
    pub kind: u8_,
    pub active: bool8,
    pub playerName: [u8_; 8usize],
    pub species: u16_,
    pub opponentName: [u8_; 8usize],
    pub defeatedSpecies: u16_,
    pub numFights: u16_,
    pub words: [u16_; 1usize],
    pub btLevel: u8_,
    pub interviewResponse: u8_,
    pub wonTheChallenge: bool8,
    pub playerLanguage: u8_,
    pub opponentLanguage: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_9"][::core::mem::size_of::<TVShow__bindgen_ty_9>() - 32usize];
    ["Alignment of TVShow__bindgen_ty_9"][::core::mem::align_of::<TVShow__bindgen_ty_9>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_9::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_9, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_9::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_9, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_9::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_9, playerName) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_9::species"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_9, species) - 10usize];
    ["Offset of field: TVShow__bindgen_ty_9::opponentName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_9, opponentName) - 12usize];
    ["Offset of field: TVShow__bindgen_ty_9::defeatedSpecies"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_9, defeatedSpecies) - 20usize];
    ["Offset of field: TVShow__bindgen_ty_9::numFights"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_9, numFights) - 22usize];
    ["Offset of field: TVShow__bindgen_ty_9::words"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_9, words) - 24usize];
    ["Offset of field: TVShow__bindgen_ty_9::btLevel"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_9, btLevel) - 26usize];
    ["Offset of field: TVShow__bindgen_ty_9::interviewResponse"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_9, interviewResponse) - 27usize];
    ["Offset of field: TVShow__bindgen_ty_9::wonTheChallenge"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_9, wonTheChallenge) - 28usize];
    ["Offset of field: TVShow__bindgen_ty_9::playerLanguage"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_9, playerLanguage) - 29usize];
    ["Offset of field: TVShow__bindgen_ty_9::opponentLanguage"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_9, opponentLanguage) - 30usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_10 {
    pub kind: u8_,
    pub active: bool8,
    pub losingSpecies: u16_,
    pub losingTrainerName: [u8_; 8usize],
    pub loserAppealFlag: u8_,
    pub round1Placing: u8_,
    pub round2Placing: u8_,
    pub winnerAppealFlag: u8_,
    pub move_: u16_,
    pub winningSpecies: u16_,
    pub winningTrainerName: [u8_; 8usize],
    pub category: u8_,
    pub winningTrainerLanguage: u8_,
    pub losingTrainerLanguage: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_10"][::core::mem::size_of::<TVShow__bindgen_ty_10>() - 32usize];
    ["Alignment of TVShow__bindgen_ty_10"]
        [::core::mem::align_of::<TVShow__bindgen_ty_10>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_10::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_10, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_10::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_10, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_10::losingSpecies"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_10, losingSpecies) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_10::losingTrainerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_10, losingTrainerName) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_10::loserAppealFlag"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_10, loserAppealFlag) - 12usize];
    ["Offset of field: TVShow__bindgen_ty_10::round1Placing"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_10, round1Placing) - 13usize];
    ["Offset of field: TVShow__bindgen_ty_10::round2Placing"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_10, round2Placing) - 14usize];
    ["Offset of field: TVShow__bindgen_ty_10::winnerAppealFlag"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_10, winnerAppealFlag) - 15usize];
    ["Offset of field: TVShow__bindgen_ty_10::move_"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_10, move_) - 16usize];
    ["Offset of field: TVShow__bindgen_ty_10::winningSpecies"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_10, winningSpecies) - 18usize];
    ["Offset of field: TVShow__bindgen_ty_10::winningTrainerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_10, winningTrainerName) - 20usize];
    ["Offset of field: TVShow__bindgen_ty_10::category"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_10, category) - 28usize];
    ["Offset of field: TVShow__bindgen_ty_10::winningTrainerLanguage"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_10, winningTrainerLanguage) - 29usize];
    ["Offset of field: TVShow__bindgen_ty_10::losingTrainerLanguage"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_10, losingTrainerLanguage) - 30usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_11 {
    pub kind: u8_,
    pub active: bool8,
    pub sheen: u8_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub worstBlenderName: [u8_; 8usize],
    pub playerName: [u8_; 8usize],
    pub language: u8_,
    pub worstBlenderLanguage: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_11"][::core::mem::size_of::<TVShow__bindgen_ty_11>() - 22usize];
    ["Alignment of TVShow__bindgen_ty_11"]
        [::core::mem::align_of::<TVShow__bindgen_ty_11>() - 1usize];
    ["Offset of field: TVShow__bindgen_ty_11::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_11, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_11::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_11, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_11::sheen"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_11, sheen) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_11::worstBlenderName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_11, worstBlenderName) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_11::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_11, playerName) - 12usize];
    ["Offset of field: TVShow__bindgen_ty_11::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_11, language) - 20usize];
    ["Offset of field: TVShow__bindgen_ty_11::worstBlenderLanguage"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_11, worstBlenderLanguage) - 21usize];
};
impl TVShow__bindgen_ty_11 {
    #[inline]
    pub fn flavor(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_flavor(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flavor_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_flavor_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn color(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn color_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_color_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(flavor: u8_, color: u8_) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let flavor: u8 = unsafe { ::core::mem::transmute(flavor) };
            flavor as u64
        });
        __bindgen_bitfield_unit.set(3usize, 2u8, {
            let color: u8 = unsafe { ::core::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_12 {
    pub kind: u8_,
    pub active: bool8,
    pub speciesOpponent: u16_,
    pub playerName: [u8_; 8usize],
    pub linkOpponentName: [u8_; 8usize],
    pub move_: u16_,
    pub speciesPlayer: u16_,
    pub battleType: u8_,
    pub language: u8_,
    pub linkOpponentLanguage: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_12"][::core::mem::size_of::<TVShow__bindgen_ty_12>() - 28usize];
    ["Alignment of TVShow__bindgen_ty_12"]
        [::core::mem::align_of::<TVShow__bindgen_ty_12>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_12::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_12, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_12::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_12, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_12::speciesOpponent"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_12, speciesOpponent) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_12::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_12, playerName) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_12::linkOpponentName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_12, linkOpponentName) - 12usize];
    ["Offset of field: TVShow__bindgen_ty_12::move_"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_12, move_) - 20usize];
    ["Offset of field: TVShow__bindgen_ty_12::speciesPlayer"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_12, speciesPlayer) - 22usize];
    ["Offset of field: TVShow__bindgen_ty_12::battleType"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_12, battleType) - 24usize];
    ["Offset of field: TVShow__bindgen_ty_12::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_12, language) - 25usize];
    ["Offset of field: TVShow__bindgen_ty_12::linkOpponentLanguage"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_12, linkOpponentLanguage) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_13 {
    pub kind: u8_,
    pub active: bool8,
    pub playerName: [u8_; 8usize],
    pub idLo: u8_,
    pub idHi: u8_,
    pub idolName: [u8_; 8usize],
    pub words: [u16_; 1usize],
    pub score: u8_,
    pub language: u8_,
    pub idolNameLanguage: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_13"][::core::mem::size_of::<TVShow__bindgen_ty_13>() - 26usize];
    ["Alignment of TVShow__bindgen_ty_13"]
        [::core::mem::align_of::<TVShow__bindgen_ty_13>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_13::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_13, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_13::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_13, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_13::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_13, playerName) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_13::idLo"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_13, idLo) - 10usize];
    ["Offset of field: TVShow__bindgen_ty_13::idHi"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_13, idHi) - 11usize];
    ["Offset of field: TVShow__bindgen_ty_13::idolName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_13, idolName) - 12usize];
    ["Offset of field: TVShow__bindgen_ty_13::words"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_13, words) - 20usize];
    ["Offset of field: TVShow__bindgen_ty_13::score"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_13, score) - 22usize];
    ["Offset of field: TVShow__bindgen_ty_13::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_13, language) - 23usize];
    ["Offset of field: TVShow__bindgen_ty_13::idolNameLanguage"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_13, idolNameLanguage) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_14 {
    pub kind: u8_,
    pub active: bool8,
    pub playerName: [u8_; 8usize],
    pub contestCategory: u8_,
    pub nickname: [u8_; 11usize],
    pub pokeblockState: u8_,
    pub language: u8_,
    pub pokemonNameLanguage: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_14"][::core::mem::size_of::<TVShow__bindgen_ty_14>() - 25usize];
    ["Alignment of TVShow__bindgen_ty_14"]
        [::core::mem::align_of::<TVShow__bindgen_ty_14>() - 1usize];
    ["Offset of field: TVShow__bindgen_ty_14::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_14, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_14::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_14, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_14::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_14, playerName) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_14::contestCategory"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_14, contestCategory) - 10usize];
    ["Offset of field: TVShow__bindgen_ty_14::nickname"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_14, nickname) - 11usize];
    ["Offset of field: TVShow__bindgen_ty_14::pokeblockState"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_14, pokeblockState) - 22usize];
    ["Offset of field: TVShow__bindgen_ty_14::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_14, language) - 23usize];
    ["Offset of field: TVShow__bindgen_ty_14::pokemonNameLanguage"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_14, pokemonNameLanguage) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_15 {
    pub kind: u8_,
    pub active: bool8,
    pub language: u8_,
    pub language2: u8_,
    pub nickname: [u8_; 11usize],
    pub ball: u8_,
    pub species: u16_,
    pub nBallsUsed: u8_,
    pub playerName: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_15"][::core::mem::size_of::<TVShow__bindgen_ty_15>() - 28usize];
    ["Alignment of TVShow__bindgen_ty_15"]
        [::core::mem::align_of::<TVShow__bindgen_ty_15>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_15::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_15, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_15::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_15, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_15::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_15, language) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_15::language2"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_15, language2) - 3usize];
    ["Offset of field: TVShow__bindgen_ty_15::nickname"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_15, nickname) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_15::ball"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_15, ball) - 15usize];
    ["Offset of field: TVShow__bindgen_ty_15::species"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_15, species) - 16usize];
    ["Offset of field: TVShow__bindgen_ty_15::nBallsUsed"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_15, nBallsUsed) - 18usize];
    ["Offset of field: TVShow__bindgen_ty_15::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_15, playerName) - 19usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_16 {
    pub kind: u8_,
    pub active: bool8,
    pub priceReduced: u8_,
    pub language: u8_,
    pub filler_04: [u8_; 2usize],
    pub itemIds: [u16_; 3usize],
    pub itemAmounts: [u16_; 3usize],
    pub shopLocation: u8_,
    pub playerName: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_16"][::core::mem::size_of::<TVShow__bindgen_ty_16>() - 28usize];
    ["Alignment of TVShow__bindgen_ty_16"]
        [::core::mem::align_of::<TVShow__bindgen_ty_16>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_16::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_16, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_16::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_16, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_16::priceReduced"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_16, priceReduced) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_16::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_16, language) - 3usize];
    ["Offset of field: TVShow__bindgen_ty_16::filler_04"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_16, filler_04) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_16::itemIds"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_16, itemIds) - 6usize];
    ["Offset of field: TVShow__bindgen_ty_16::itemAmounts"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_16, itemAmounts) - 12usize];
    ["Offset of field: TVShow__bindgen_ty_16::shopLocation"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_16, shopLocation) - 18usize];
    ["Offset of field: TVShow__bindgen_ty_16::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_16, playerName) - 19usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_17 {
    pub kind: u8_,
    pub active: bool8,
    pub language: u8_,
    pub filler_03: [u8_; 9usize],
    pub species: u16_,
    pub species2: u16_,
    pub nBallsUsed: u8_,
    pub outcome: u8_,
    pub location: u8_,
    pub playerName: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_17"][::core::mem::size_of::<TVShow__bindgen_ty_17>() - 28usize];
    ["Alignment of TVShow__bindgen_ty_17"]
        [::core::mem::align_of::<TVShow__bindgen_ty_17>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_17::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_17, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_17::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_17, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_17::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_17, language) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_17::filler_03"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_17, filler_03) - 3usize];
    ["Offset of field: TVShow__bindgen_ty_17::species"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_17, species) - 12usize];
    ["Offset of field: TVShow__bindgen_ty_17::species2"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_17, species2) - 14usize];
    ["Offset of field: TVShow__bindgen_ty_17::nBallsUsed"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_17, nBallsUsed) - 16usize];
    ["Offset of field: TVShow__bindgen_ty_17::outcome"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_17, outcome) - 17usize];
    ["Offset of field: TVShow__bindgen_ty_17::location"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_17, location) - 18usize];
    ["Offset of field: TVShow__bindgen_ty_17::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_17, playerName) - 19usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_18 {
    pub kind: u8_,
    pub active: bool8,
    pub nBites: u8_,
    pub nFails: u8_,
    pub species: u16_,
    pub language: u8_,
    pub filler_07: [u8_; 12usize],
    pub playerName: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_18"][::core::mem::size_of::<TVShow__bindgen_ty_18>() - 28usize];
    ["Alignment of TVShow__bindgen_ty_18"]
        [::core::mem::align_of::<TVShow__bindgen_ty_18>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_18::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_18, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_18::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_18, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_18::nBites"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_18, nBites) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_18::nFails"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_18, nFails) - 3usize];
    ["Offset of field: TVShow__bindgen_ty_18::species"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_18, species) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_18::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_18, language) - 6usize];
    ["Offset of field: TVShow__bindgen_ty_18::filler_07"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_18, filler_07) - 7usize];
    ["Offset of field: TVShow__bindgen_ty_18::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_18, playerName) - 19usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_19 {
    pub kind: u8_,
    pub active: bool8,
    pub numPokeCaught: u16_,
    pub caughtPoke: u16_,
    pub steps: u16_,
    pub species: u16_,
    pub location: u8_,
    pub language: u8_,
    pub filler_0C: [u8_; 7usize],
    pub playerName: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_19"][::core::mem::size_of::<TVShow__bindgen_ty_19>() - 28usize];
    ["Alignment of TVShow__bindgen_ty_19"]
        [::core::mem::align_of::<TVShow__bindgen_ty_19>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_19::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_19, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_19::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_19, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_19::numPokeCaught"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_19, numPokeCaught) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_19::caughtPoke"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_19, caughtPoke) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_19::steps"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_19, steps) - 6usize];
    ["Offset of field: TVShow__bindgen_ty_19::species"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_19, species) - 8usize];
    ["Offset of field: TVShow__bindgen_ty_19::location"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_19, location) - 10usize];
    ["Offset of field: TVShow__bindgen_ty_19::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_19, language) - 11usize];
    ["Offset of field: TVShow__bindgen_ty_19::filler_0C"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_19, filler_0C) - 12usize];
    ["Offset of field: TVShow__bindgen_ty_19::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_19, playerName) - 19usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_20 {
    pub kind: u8_,
    pub active: bool8,
    pub dexCount: u16_,
    pub badgeCount: u8_,
    pub nSilverSymbols: u8_,
    pub nGoldSymbols: u8_,
    pub location: u8_,
    pub battlePoints: u16_,
    pub mapLayoutId: u16_,
    pub language: u8_,
    pub filler_0D: [u8_; 6usize],
    pub playerName: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_20"][::core::mem::size_of::<TVShow__bindgen_ty_20>() - 28usize];
    ["Alignment of TVShow__bindgen_ty_20"]
        [::core::mem::align_of::<TVShow__bindgen_ty_20>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_20::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_20, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_20::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_20, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_20::dexCount"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_20, dexCount) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_20::badgeCount"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_20, badgeCount) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_20::nSilverSymbols"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_20, nSilverSymbols) - 5usize];
    ["Offset of field: TVShow__bindgen_ty_20::nGoldSymbols"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_20, nGoldSymbols) - 6usize];
    ["Offset of field: TVShow__bindgen_ty_20::location"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_20, location) - 7usize];
    ["Offset of field: TVShow__bindgen_ty_20::battlePoints"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_20, battlePoints) - 8usize];
    ["Offset of field: TVShow__bindgen_ty_20::mapLayoutId"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_20, mapLayoutId) - 10usize];
    ["Offset of field: TVShow__bindgen_ty_20::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_20, language) - 12usize];
    ["Offset of field: TVShow__bindgen_ty_20::filler_0D"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_20, filler_0D) - 13usize];
    ["Offset of field: TVShow__bindgen_ty_20::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_20, playerName) - 19usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_21 {
    pub kind: u8_,
    pub active: bool8,
    pub filler_02: [u8_; 2usize],
    pub words: [u16_; 2usize],
    pub gender: u8_,
    pub language: u8_,
    pub filler_0a: [u8_; 9usize],
    pub playerName: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_21"][::core::mem::size_of::<TVShow__bindgen_ty_21>() - 28usize];
    ["Alignment of TVShow__bindgen_ty_21"]
        [::core::mem::align_of::<TVShow__bindgen_ty_21>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_21::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_21, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_21::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_21, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_21::filler_02"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_21, filler_02) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_21::words"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_21, words) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_21::gender"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_21, gender) - 8usize];
    ["Offset of field: TVShow__bindgen_ty_21::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_21, language) - 9usize];
    ["Offset of field: TVShow__bindgen_ty_21::filler_0a"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_21, filler_0a) - 10usize];
    ["Offset of field: TVShow__bindgen_ty_21::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_21, playerName) - 19usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_22 {
    pub kind: u8_,
    pub active: bool8,
    pub item: u16_,
    pub location: u8_,
    pub language: u8_,
    pub mapLayoutId: u16_,
    pub filler_08: [u8_; 11usize],
    pub playerName: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_22"][::core::mem::size_of::<TVShow__bindgen_ty_22>() - 28usize];
    ["Alignment of TVShow__bindgen_ty_22"]
        [::core::mem::align_of::<TVShow__bindgen_ty_22>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_22::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_22, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_22::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_22, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_22::item"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_22, item) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_22::location"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_22, location) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_22::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_22, language) - 5usize];
    ["Offset of field: TVShow__bindgen_ty_22::mapLayoutId"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_22, mapLayoutId) - 6usize];
    ["Offset of field: TVShow__bindgen_ty_22::filler_08"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_22, filler_08) - 8usize];
    ["Offset of field: TVShow__bindgen_ty_22::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_22, playerName) - 19usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_23 {
    pub kind: u8_,
    pub active: bool8,
    pub won: u8_,
    pub whichGame: u8_,
    pub nCoins: u16_,
    pub filler_06: [u8_; 2usize],
    pub language: u8_,
    pub filler_09: [u8_; 10usize],
    pub playerName: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_23"][::core::mem::size_of::<TVShow__bindgen_ty_23>() - 28usize];
    ["Alignment of TVShow__bindgen_ty_23"]
        [::core::mem::align_of::<TVShow__bindgen_ty_23>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_23::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_23, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_23::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_23, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_23::won"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_23, won) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_23::whichGame"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_23, whichGame) - 3usize];
    ["Offset of field: TVShow__bindgen_ty_23::nCoins"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_23, nCoins) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_23::filler_06"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_23, filler_06) - 6usize];
    ["Offset of field: TVShow__bindgen_ty_23::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_23, language) - 8usize];
    ["Offset of field: TVShow__bindgen_ty_23::filler_09"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_23, filler_09) - 9usize];
    ["Offset of field: TVShow__bindgen_ty_23::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_23, playerName) - 19usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_24 {
    pub kind: u8_,
    pub active: bool8,
    pub lastOpponentSpecies: u16_,
    pub location: u8_,
    pub outcome: u8_,
    pub caughtMonBall: u16_,
    pub balls: u16_,
    pub poke1Species: u16_,
    pub lastUsedMove: u16_,
    pub language: u8_,
    pub filler_0f: [u8_; 4usize],
    pub playerName: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_24"][::core::mem::size_of::<TVShow__bindgen_ty_24>() - 28usize];
    ["Alignment of TVShow__bindgen_ty_24"]
        [::core::mem::align_of::<TVShow__bindgen_ty_24>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_24::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_24, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_24::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_24, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_24::lastOpponentSpecies"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_24, lastOpponentSpecies) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_24::location"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_24, location) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_24::outcome"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_24, outcome) - 5usize];
    ["Offset of field: TVShow__bindgen_ty_24::caughtMonBall"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_24, caughtMonBall) - 6usize];
    ["Offset of field: TVShow__bindgen_ty_24::balls"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_24, balls) - 8usize];
    ["Offset of field: TVShow__bindgen_ty_24::poke1Species"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_24, poke1Species) - 10usize];
    ["Offset of field: TVShow__bindgen_ty_24::lastUsedMove"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_24, lastUsedMove) - 12usize];
    ["Offset of field: TVShow__bindgen_ty_24::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_24, language) - 14usize];
    ["Offset of field: TVShow__bindgen_ty_24::filler_0f"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_24, filler_0f) - 15usize];
    ["Offset of field: TVShow__bindgen_ty_24::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_24, playerName) - 19usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_25 {
    pub kind: u8_,
    pub active: bool8,
    pub avgLevel: u8_,
    pub numDecorations: u8_,
    pub decorations: [u8_; 4usize],
    pub species: u16_,
    pub move_: u16_,
    pub language: u8_,
    pub filler_0d: [u8_; 6usize],
    pub playerName: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_25"][::core::mem::size_of::<TVShow__bindgen_ty_25>() - 28usize];
    ["Alignment of TVShow__bindgen_ty_25"]
        [::core::mem::align_of::<TVShow__bindgen_ty_25>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_25::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_25, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_25::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_25, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_25::avgLevel"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_25, avgLevel) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_25::numDecorations"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_25, numDecorations) - 3usize];
    ["Offset of field: TVShow__bindgen_ty_25::decorations"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_25, decorations) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_25::species"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_25, species) - 8usize];
    ["Offset of field: TVShow__bindgen_ty_25::move_"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_25, move_) - 10usize];
    ["Offset of field: TVShow__bindgen_ty_25::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_25, language) - 12usize];
    ["Offset of field: TVShow__bindgen_ty_25::filler_0d"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_25, filler_0d) - 13usize];
    ["Offset of field: TVShow__bindgen_ty_25::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_25, playerName) - 19usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_26 {
    pub kind: u8_,
    pub active: bool8,
    pub item: u16_,
    pub whichPrize: u8_,
    pub language: u8_,
    pub filler_06: [u8_; 13usize],
    pub playerName: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_26"][::core::mem::size_of::<TVShow__bindgen_ty_26>() - 28usize];
    ["Alignment of TVShow__bindgen_ty_26"]
        [::core::mem::align_of::<TVShow__bindgen_ty_26>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_26::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_26, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_26::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_26, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_26::item"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_26, item) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_26::whichPrize"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_26, whichPrize) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_26::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_26, language) - 5usize];
    ["Offset of field: TVShow__bindgen_ty_26::filler_06"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_26, filler_06) - 6usize];
    ["Offset of field: TVShow__bindgen_ty_26::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_26, playerName) - 19usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_27 {
    pub kind: u8_,
    pub active: bool8,
    pub move_: u16_,
    pub foeSpecies: u16_,
    pub species: u16_,
    pub otherMoves: [u16_; 3usize],
    pub betterMove: u16_,
    pub nOtherMoves: u8_,
    pub language: u8_,
    pub filler_12: [u8_; 1usize],
    pub playerName: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_27"][::core::mem::size_of::<TVShow__bindgen_ty_27>() - 28usize];
    ["Alignment of TVShow__bindgen_ty_27"]
        [::core::mem::align_of::<TVShow__bindgen_ty_27>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_27::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_27, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_27::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_27, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_27::move_"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_27, move_) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_27::foeSpecies"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_27, foeSpecies) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_27::species"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_27, species) - 6usize];
    ["Offset of field: TVShow__bindgen_ty_27::otherMoves"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_27, otherMoves) - 8usize];
    ["Offset of field: TVShow__bindgen_ty_27::betterMove"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_27, betterMove) - 14usize];
    ["Offset of field: TVShow__bindgen_ty_27::nOtherMoves"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_27, nOtherMoves) - 16usize];
    ["Offset of field: TVShow__bindgen_ty_27::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_27, language) - 17usize];
    ["Offset of field: TVShow__bindgen_ty_27::filler_12"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_27, filler_12) - 18usize];
    ["Offset of field: TVShow__bindgen_ty_27::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_27, playerName) - 19usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_28 {
    pub kind: u8_,
    pub active: bool8,
    pub filler_02: [u8_; 2usize],
    pub words: [u16_; 2usize],
    pub language: u8_,
    pub filler_09: [u8_; 10usize],
    pub playerName: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_28"][::core::mem::size_of::<TVShow__bindgen_ty_28>() - 28usize];
    ["Alignment of TVShow__bindgen_ty_28"]
        [::core::mem::align_of::<TVShow__bindgen_ty_28>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_28::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_28, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_28::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_28, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_28::filler_02"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_28, filler_02) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_28::words"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_28, words) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_28::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_28, language) - 8usize];
    ["Offset of field: TVShow__bindgen_ty_28::filler_09"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_28, filler_09) - 9usize];
    ["Offset of field: TVShow__bindgen_ty_28::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_28, playerName) - 19usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_29 {
    pub kind: u8_,
    pub active: bool8,
    pub nRibbons: u8_,
    pub selectedRibbon: u8_,
    pub nickname: [u8_; 11usize],
    pub language: u8_,
    pub pokemonNameLanguage: u8_,
    pub filler_12: [u8_; 2usize],
    pub playerName: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_29"][::core::mem::size_of::<TVShow__bindgen_ty_29>() - 27usize];
    ["Alignment of TVShow__bindgen_ty_29"]
        [::core::mem::align_of::<TVShow__bindgen_ty_29>() - 1usize];
    ["Offset of field: TVShow__bindgen_ty_29::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_29, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_29::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_29, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_29::nRibbons"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_29, nRibbons) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_29::selectedRibbon"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_29, selectedRibbon) - 3usize];
    ["Offset of field: TVShow__bindgen_ty_29::nickname"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_29, nickname) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_29::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_29, language) - 15usize];
    ["Offset of field: TVShow__bindgen_ty_29::pokemonNameLanguage"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_29, pokemonNameLanguage) - 16usize];
    ["Offset of field: TVShow__bindgen_ty_29::filler_12"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_29, filler_12) - 17usize];
    ["Offset of field: TVShow__bindgen_ty_29::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_29, playerName) - 19usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_30 {
    pub kind: u8_,
    pub active: bool8,
    pub winStreak: u16_,
    pub species1: u16_,
    pub species2: u16_,
    pub species3: u16_,
    pub species4: u16_,
    pub language: u8_,
    pub facilityAndMode: u8_,
    pub filler_0e: [u8_; 5usize],
    pub playerName: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_30"][::core::mem::size_of::<TVShow__bindgen_ty_30>() - 28usize];
    ["Alignment of TVShow__bindgen_ty_30"]
        [::core::mem::align_of::<TVShow__bindgen_ty_30>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_30::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_30, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_30::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_30, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_30::winStreak"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_30, winStreak) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_30::species1"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_30, species1) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_30::species2"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_30, species2) - 6usize];
    ["Offset of field: TVShow__bindgen_ty_30::species3"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_30, species3) - 8usize];
    ["Offset of field: TVShow__bindgen_ty_30::species4"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_30, species4) - 10usize];
    ["Offset of field: TVShow__bindgen_ty_30::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_30, language) - 12usize];
    ["Offset of field: TVShow__bindgen_ty_30::facilityAndMode"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_30, facilityAndMode) - 13usize];
    ["Offset of field: TVShow__bindgen_ty_30::filler_0e"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_30, filler_0e) - 14usize];
    ["Offset of field: TVShow__bindgen_ty_30::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_30, playerName) - 19usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_31 {
    pub kind: u8_,
    pub active: bool8,
    pub count: u16_,
    pub actionIdx: u8_,
    pub language: u8_,
    pub filler_06: [u8_; 13usize],
    pub playerName: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_31"][::core::mem::size_of::<TVShow__bindgen_ty_31>() - 28usize];
    ["Alignment of TVShow__bindgen_ty_31"]
        [::core::mem::align_of::<TVShow__bindgen_ty_31>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_31::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_31, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_31::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_31, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_31::count"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_31, count) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_31::actionIdx"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_31, actionIdx) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_31::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_31, language) - 5usize];
    ["Offset of field: TVShow__bindgen_ty_31::filler_06"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_31, filler_06) - 6usize];
    ["Offset of field: TVShow__bindgen_ty_31::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_31, playerName) - 19usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_32 {
    pub kind: u8_,
    pub active: bool8,
    pub stepsInBase: u16_,
    pub baseOwnersName: [u8_; 8usize],
    pub flags: u32_,
    pub item: u16_,
    pub savedState: u8_,
    pub playerName: [u8_; 8usize],
    pub language: u8_,
    pub baseOwnersNameLanguage: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_32"][::core::mem::size_of::<TVShow__bindgen_ty_32>() - 32usize];
    ["Alignment of TVShow__bindgen_ty_32"]
        [::core::mem::align_of::<TVShow__bindgen_ty_32>() - 4usize];
    ["Offset of field: TVShow__bindgen_ty_32::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_32, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_32::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_32, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_32::stepsInBase"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_32, stepsInBase) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_32::baseOwnersName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_32, baseOwnersName) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_32::flags"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_32, flags) - 12usize];
    ["Offset of field: TVShow__bindgen_ty_32::item"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_32, item) - 16usize];
    ["Offset of field: TVShow__bindgen_ty_32::savedState"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_32, savedState) - 18usize];
    ["Offset of field: TVShow__bindgen_ty_32::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_32, playerName) - 19usize];
    ["Offset of field: TVShow__bindgen_ty_32::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_32, language) - 27usize];
    ["Offset of field: TVShow__bindgen_ty_32::baseOwnersNameLanguage"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_32, baseOwnersNameLanguage) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_33 {
    pub kind: u8_,
    pub active: bool8,
    pub monsCaught: u8_,
    pub pokeblocksUsed: u8_,
    pub language: u8_,
    pub filler_05: [u8_; 14usize],
    pub playerName: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_33"][::core::mem::size_of::<TVShow__bindgen_ty_33>() - 27usize];
    ["Alignment of TVShow__bindgen_ty_33"]
        [::core::mem::align_of::<TVShow__bindgen_ty_33>() - 1usize];
    ["Offset of field: TVShow__bindgen_ty_33::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_33, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_33::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_33, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_33::monsCaught"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_33, monsCaught) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_33::pokeblocksUsed"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_33, pokeblocksUsed) - 3usize];
    ["Offset of field: TVShow__bindgen_ty_33::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_33, language) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_33::filler_05"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_33, filler_05) - 5usize];
    ["Offset of field: TVShow__bindgen_ty_33::playerName"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_33, playerName) - 19usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TVShow__bindgen_ty_34 {
    pub kind: u8_,
    pub active: bool8,
    pub unused1: u8_,
    pub unused3: u8_,
    pub moves: [u16_; 4usize],
    pub species: u16_,
    pub unused2: u16_,
    pub locationMapNum: u8_,
    pub locationMapGroup: u8_,
    pub unused4: u8_,
    pub probability: u8_,
    pub level: u8_,
    pub unused5: u8_,
    pub daysLeft: u16_,
    pub language: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow__bindgen_ty_34"][::core::mem::size_of::<TVShow__bindgen_ty_34>() - 26usize];
    ["Alignment of TVShow__bindgen_ty_34"]
        [::core::mem::align_of::<TVShow__bindgen_ty_34>() - 2usize];
    ["Offset of field: TVShow__bindgen_ty_34::kind"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_34, kind) - 0usize];
    ["Offset of field: TVShow__bindgen_ty_34::active"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_34, active) - 1usize];
    ["Offset of field: TVShow__bindgen_ty_34::unused1"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_34, unused1) - 2usize];
    ["Offset of field: TVShow__bindgen_ty_34::unused3"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_34, unused3) - 3usize];
    ["Offset of field: TVShow__bindgen_ty_34::moves"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_34, moves) - 4usize];
    ["Offset of field: TVShow__bindgen_ty_34::species"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_34, species) - 12usize];
    ["Offset of field: TVShow__bindgen_ty_34::unused2"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_34, unused2) - 14usize];
    ["Offset of field: TVShow__bindgen_ty_34::locationMapNum"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_34, locationMapNum) - 16usize];
    ["Offset of field: TVShow__bindgen_ty_34::locationMapGroup"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_34, locationMapGroup) - 17usize];
    ["Offset of field: TVShow__bindgen_ty_34::unused4"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_34, unused4) - 18usize];
    ["Offset of field: TVShow__bindgen_ty_34::probability"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_34, probability) - 19usize];
    ["Offset of field: TVShow__bindgen_ty_34::level"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_34, level) - 20usize];
    ["Offset of field: TVShow__bindgen_ty_34::unused5"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_34, unused5) - 21usize];
    ["Offset of field: TVShow__bindgen_ty_34::daysLeft"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_34, daysLeft) - 22usize];
    ["Offset of field: TVShow__bindgen_ty_34::language"]
        [::core::mem::offset_of!(TVShow__bindgen_ty_34, language) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TVShow"][::core::mem::size_of::<TVShow>() - 36usize];
    ["Alignment of TVShow"][::core::mem::align_of::<TVShow>() - 4usize];
    ["Offset of field: TVShow::common"][::core::mem::offset_of!(TVShow, common) - 0usize];
    ["Offset of field: TVShow::commonInit"][::core::mem::offset_of!(TVShow, commonInit) - 0usize];
    ["Offset of field: TVShow::fanclubLetter"]
        [::core::mem::offset_of!(TVShow, fanclubLetter) - 0usize];
    ["Offset of field: TVShow::recentHappenings"]
        [::core::mem::offset_of!(TVShow, recentHappenings) - 0usize];
    ["Offset of field: TVShow::fanclubOpinions"]
        [::core::mem::offset_of!(TVShow, fanclubOpinions) - 0usize];
    ["Offset of field: TVShow::dummy"][::core::mem::offset_of!(TVShow, dummy) - 0usize];
    ["Offset of field: TVShow::nameRaterShow"]
        [::core::mem::offset_of!(TVShow, nameRaterShow) - 0usize];
    ["Offset of field: TVShow::bravoTrainer"]
        [::core::mem::offset_of!(TVShow, bravoTrainer) - 0usize];
    ["Offset of field: TVShow::bravoTrainerTower"]
        [::core::mem::offset_of!(TVShow, bravoTrainerTower) - 0usize];
    ["Offset of field: TVShow::contestLiveUpdates"]
        [::core::mem::offset_of!(TVShow, contestLiveUpdates) - 0usize];
    ["Offset of field: TVShow::threeCheers"][::core::mem::offset_of!(TVShow, threeCheers) - 0usize];
    ["Offset of field: TVShow::battleUpdate"]
        [::core::mem::offset_of!(TVShow, battleUpdate) - 0usize];
    ["Offset of field: TVShow::fanClubSpecial"]
        [::core::mem::offset_of!(TVShow, fanClubSpecial) - 0usize];
    ["Offset of field: TVShow::contestLady"][::core::mem::offset_of!(TVShow, contestLady) - 0usize];
    ["Offset of field: TVShow::pokemonToday"]
        [::core::mem::offset_of!(TVShow, pokemonToday) - 0usize];
    ["Offset of field: TVShow::smartshopperShow"]
        [::core::mem::offset_of!(TVShow, smartshopperShow) - 0usize];
    ["Offset of field: TVShow::pokemonTodayFailed"]
        [::core::mem::offset_of!(TVShow, pokemonTodayFailed) - 0usize];
    ["Offset of field: TVShow::pokemonAngler"]
        [::core::mem::offset_of!(TVShow, pokemonAngler) - 0usize];
    ["Offset of field: TVShow::worldOfMasters"]
        [::core::mem::offset_of!(TVShow, worldOfMasters) - 0usize];
    ["Offset of field: TVShow::rivalTrainer"]
        [::core::mem::offset_of!(TVShow, rivalTrainer) - 0usize];
    ["Offset of field: TVShow::trendWatcher"]
        [::core::mem::offset_of!(TVShow, trendWatcher) - 0usize];
    ["Offset of field: TVShow::treasureInvestigators"]
        [::core::mem::offset_of!(TVShow, treasureInvestigators) - 0usize];
    ["Offset of field: TVShow::findThatGamer"]
        [::core::mem::offset_of!(TVShow, findThatGamer) - 0usize];
    ["Offset of field: TVShow::breakingNews"]
        [::core::mem::offset_of!(TVShow, breakingNews) - 0usize];
    ["Offset of field: TVShow::secretBaseVisit"]
        [::core::mem::offset_of!(TVShow, secretBaseVisit) - 0usize];
    ["Offset of field: TVShow::lottoWinner"][::core::mem::offset_of!(TVShow, lottoWinner) - 0usize];
    ["Offset of field: TVShow::battleSeminar"]
        [::core::mem::offset_of!(TVShow, battleSeminar) - 0usize];
    ["Offset of field: TVShow::trainerFanClub"]
        [::core::mem::offset_of!(TVShow, trainerFanClub) - 0usize];
    ["Offset of field: TVShow::cuties"][::core::mem::offset_of!(TVShow, cuties) - 0usize];
    ["Offset of field: TVShow::frontier"][::core::mem::offset_of!(TVShow, frontier) - 0usize];
    ["Offset of field: TVShow::numberOne"][::core::mem::offset_of!(TVShow, numberOne) - 0usize];
    ["Offset of field: TVShow::secretBaseSecrets"]
        [::core::mem::offset_of!(TVShow, secretBaseSecrets) - 0usize];
    ["Offset of field: TVShow::safariFanClub"]
        [::core::mem::offset_of!(TVShow, safariFanClub) - 0usize];
    ["Offset of field: TVShow::massOutbreak"]
        [::core::mem::offset_of!(TVShow, massOutbreak) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PokeNews {
    pub kind: u8_,
    pub state: u8_,
    pub dayCountdown: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PokeNews"][::core::mem::size_of::<PokeNews>() - 4usize];
    ["Alignment of PokeNews"][::core::mem::align_of::<PokeNews>() - 2usize];
    ["Offset of field: PokeNews::kind"][::core::mem::offset_of!(PokeNews, kind) - 0usize];
    ["Offset of field: PokeNews::state"][::core::mem::offset_of!(PokeNews, state) - 1usize];
    ["Offset of field: PokeNews::dayCountdown"]
        [::core::mem::offset_of!(PokeNews, dayCountdown) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GabbyAndTyData {
    pub mon1: u16_,
    pub mon2: u16_,
    pub lastMove: u16_,
    pub quote: [u16_; 1usize],
    pub mapnum: u8_,
    pub battleNum: u8_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GabbyAndTyData"][::core::mem::size_of::<GabbyAndTyData>() - 12usize];
    ["Alignment of GabbyAndTyData"][::core::mem::align_of::<GabbyAndTyData>() - 2usize];
    ["Offset of field: GabbyAndTyData::mon1"]
        [::core::mem::offset_of!(GabbyAndTyData, mon1) - 0usize];
    ["Offset of field: GabbyAndTyData::mon2"]
        [::core::mem::offset_of!(GabbyAndTyData, mon2) - 2usize];
    ["Offset of field: GabbyAndTyData::lastMove"]
        [::core::mem::offset_of!(GabbyAndTyData, lastMove) - 4usize];
    ["Offset of field: GabbyAndTyData::quote"]
        [::core::mem::offset_of!(GabbyAndTyData, quote) - 6usize];
    ["Offset of field: GabbyAndTyData::mapnum"]
        [::core::mem::offset_of!(GabbyAndTyData, mapnum) - 8usize];
    ["Offset of field: GabbyAndTyData::battleNum"]
        [::core::mem::offset_of!(GabbyAndTyData, battleNum) - 9usize];
};
impl GabbyAndTyData {
    #[inline]
    pub fn battleTookMoreThanOneTurn(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_battleTookMoreThanOneTurn(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn battleTookMoreThanOneTurn_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_battleTookMoreThanOneTurn_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn playerLostAMon(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_playerLostAMon(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn playerLostAMon_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_playerLostAMon_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn playerUsedHealingItem(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_playerUsedHealingItem(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn playerUsedHealingItem_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_playerUsedHealingItem_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn playerThrewABall(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_playerThrewABall(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn playerThrewABall_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_playerThrewABall_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn onAir(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_onAir(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn onAir_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_onAir_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn valA_5(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_valA_5(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn valA_5_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_valA_5_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn battleTookMoreThanOneTurn2(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_battleTookMoreThanOneTurn2(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn battleTookMoreThanOneTurn2_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_battleTookMoreThanOneTurn2_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn playerLostAMon2(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_playerLostAMon2(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn playerLostAMon2_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_playerLostAMon2_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn playerUsedHealingItem2(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_playerUsedHealingItem2(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn playerUsedHealingItem2_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_playerUsedHealingItem2_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn playerThrewABall2(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_playerThrewABall2(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn playerThrewABall2_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_playerThrewABall2_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn valB_4(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_valB_4(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn valB_4_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_valB_4_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        battleTookMoreThanOneTurn: u8_,
        playerLostAMon: u8_,
        playerUsedHealingItem: u8_,
        playerThrewABall: u8_,
        onAir: u8_,
        valA_5: u8_,
        battleTookMoreThanOneTurn2: u8_,
        playerLostAMon2: u8_,
        playerUsedHealingItem2: u8_,
        playerThrewABall2: u8_,
        valB_4: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let battleTookMoreThanOneTurn: u8 =
                unsafe { ::core::mem::transmute(battleTookMoreThanOneTurn) };
            battleTookMoreThanOneTurn as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let playerLostAMon: u8 = unsafe { ::core::mem::transmute(playerLostAMon) };
            playerLostAMon as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let playerUsedHealingItem: u8 =
                unsafe { ::core::mem::transmute(playerUsedHealingItem) };
            playerUsedHealingItem as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let playerThrewABall: u8 = unsafe { ::core::mem::transmute(playerThrewABall) };
            playerThrewABall as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let onAir: u8 = unsafe { ::core::mem::transmute(onAir) };
            onAir as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let valA_5: u8 = unsafe { ::core::mem::transmute(valA_5) };
            valA_5 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let battleTookMoreThanOneTurn2: u8 =
                unsafe { ::core::mem::transmute(battleTookMoreThanOneTurn2) };
            battleTookMoreThanOneTurn2 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let playerLostAMon2: u8 = unsafe { ::core::mem::transmute(playerLostAMon2) };
            playerLostAMon2 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let playerUsedHealingItem2: u8 =
                unsafe { ::core::mem::transmute(playerUsedHealingItem2) };
            playerUsedHealingItem2 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let playerThrewABall2: u8 = unsafe { ::core::mem::transmute(playerThrewABall2) };
            playerThrewABall2 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let valB_4: u8 = unsafe { ::core::mem::transmute(valB_4) };
            valB_4 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpriteSheet {
    pub data: *const ::core::ffi::c_void,
    pub size: u16_,
    pub tag: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SpriteSheet"][::core::mem::size_of::<SpriteSheet>() - 8usize];
    ["Alignment of SpriteSheet"][::core::mem::align_of::<SpriteSheet>() - 4usize];
    ["Offset of field: SpriteSheet::data"][::core::mem::offset_of!(SpriteSheet, data) - 0usize];
    ["Offset of field: SpriteSheet::size"][::core::mem::offset_of!(SpriteSheet, size) - 4usize];
    ["Offset of field: SpriteSheet::tag"][::core::mem::offset_of!(SpriteSheet, tag) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CompressedSpriteSheet {
    pub data: *const u32_,
    pub size: u16_,
    pub tag: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CompressedSpriteSheet"][::core::mem::size_of::<CompressedSpriteSheet>() - 8usize];
    ["Alignment of CompressedSpriteSheet"]
        [::core::mem::align_of::<CompressedSpriteSheet>() - 4usize];
    ["Offset of field: CompressedSpriteSheet::data"]
        [::core::mem::offset_of!(CompressedSpriteSheet, data) - 0usize];
    ["Offset of field: CompressedSpriteSheet::size"]
        [::core::mem::offset_of!(CompressedSpriteSheet, size) - 4usize];
    ["Offset of field: CompressedSpriteSheet::tag"]
        [::core::mem::offset_of!(CompressedSpriteSheet, tag) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpriteFrameImage {
    pub data: *const ::core::ffi::c_void,
    pub size: u16_,
    pub relativeFrames: bool8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SpriteFrameImage"][::core::mem::size_of::<SpriteFrameImage>() - 8usize];
    ["Alignment of SpriteFrameImage"][::core::mem::align_of::<SpriteFrameImage>() - 4usize];
    ["Offset of field: SpriteFrameImage::data"]
        [::core::mem::offset_of!(SpriteFrameImage, data) - 0usize];
    ["Offset of field: SpriteFrameImage::size"]
        [::core::mem::offset_of!(SpriteFrameImage, size) - 4usize];
    ["Offset of field: SpriteFrameImage::relativeFrames"]
        [::core::mem::offset_of!(SpriteFrameImage, relativeFrames) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpritePalette {
    pub data: *const u16_,
    pub tag: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SpritePalette"][::core::mem::size_of::<SpritePalette>() - 8usize];
    ["Alignment of SpritePalette"][::core::mem::align_of::<SpritePalette>() - 4usize];
    ["Offset of field: SpritePalette::data"][::core::mem::offset_of!(SpritePalette, data) - 0usize];
    ["Offset of field: SpritePalette::tag"][::core::mem::offset_of!(SpritePalette, tag) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CompressedSpritePalette {
    pub data: *const u32_,
    pub tag: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CompressedSpritePalette"][::core::mem::size_of::<CompressedSpritePalette>() - 8usize];
    ["Alignment of CompressedSpritePalette"]
        [::core::mem::align_of::<CompressedSpritePalette>() - 4usize];
    ["Offset of field: CompressedSpritePalette::data"]
        [::core::mem::offset_of!(CompressedSpritePalette, data) - 0usize];
    ["Offset of field: CompressedSpritePalette::tag"]
        [::core::mem::offset_of!(CompressedSpritePalette, tag) - 4usize];
};
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct AnimFrameCmd {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AnimFrameCmd"][::core::mem::size_of::<AnimFrameCmd>() - 4usize];
    ["Alignment of AnimFrameCmd"][::core::mem::align_of::<AnimFrameCmd>() - 4usize];
};
impl AnimFrameCmd {
    #[inline]
    pub fn imageValue(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_imageValue(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn imageValue_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_imageValue_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn duration(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_duration(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn duration_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                6u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_duration_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn hFlip(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hFlip(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn hFlip_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                22usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_hFlip_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                22usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vFlip(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vFlip(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vFlip_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                23usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vFlip_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                23usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        imageValue: u32_,
        duration: u32_,
        hFlip: u32_,
        vFlip: u32_,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let imageValue: u32 = unsafe { ::core::mem::transmute(imageValue) };
            imageValue as u64
        });
        __bindgen_bitfield_unit.set(16usize, 6u8, {
            let duration: u32 = unsafe { ::core::mem::transmute(duration) };
            duration as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let hFlip: u32 = unsafe { ::core::mem::transmute(hFlip) };
            hFlip as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let vFlip: u32 = unsafe { ::core::mem::transmute(vFlip) };
            vFlip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct AnimLoopCmd {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AnimLoopCmd"][::core::mem::size_of::<AnimLoopCmd>() - 4usize];
    ["Alignment of AnimLoopCmd"][::core::mem::align_of::<AnimLoopCmd>() - 4usize];
};
impl AnimLoopCmd {
    #[inline]
    pub fn type_(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn count(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_count(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn count_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                6u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_count_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(type_: u32_, count: u32_) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let type_: u32 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(16usize, 6u8, {
            let count: u32 = unsafe { ::core::mem::transmute(count) };
            count as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct AnimJumpCmd {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AnimJumpCmd"][::core::mem::size_of::<AnimJumpCmd>() - 4usize];
    ["Alignment of AnimJumpCmd"][::core::mem::align_of::<AnimJumpCmd>() - 4usize];
};
impl AnimJumpCmd {
    #[inline]
    pub fn type_(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn target(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_target(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn target_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                6u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_target_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(type_: u32_, target: u32_) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let type_: u32 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(16usize, 6u8, {
            let target: u32 = unsafe { ::core::mem::transmute(target) };
            target as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AnimCmd {
    pub type_: s16,
    pub frame: AnimFrameCmd,
    pub loop_: AnimLoopCmd,
    pub jump: AnimJumpCmd,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AnimCmd"][::core::mem::size_of::<AnimCmd>() - 4usize];
    ["Alignment of AnimCmd"][::core::mem::align_of::<AnimCmd>() - 4usize];
    ["Offset of field: AnimCmd::type_"][::core::mem::offset_of!(AnimCmd, type_) - 0usize];
    ["Offset of field: AnimCmd::frame"][::core::mem::offset_of!(AnimCmd, frame) - 0usize];
    ["Offset of field: AnimCmd::loop_"][::core::mem::offset_of!(AnimCmd, loop_) - 0usize];
    ["Offset of field: AnimCmd::jump"][::core::mem::offset_of!(AnimCmd, jump) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AffineAnimFrameCmd {
    pub xScale: s16,
    pub yScale: s16,
    pub rotation: u8_,
    pub duration: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AffineAnimFrameCmd"][::core::mem::size_of::<AffineAnimFrameCmd>() - 6usize];
    ["Alignment of AffineAnimFrameCmd"][::core::mem::align_of::<AffineAnimFrameCmd>() - 2usize];
    ["Offset of field: AffineAnimFrameCmd::xScale"]
        [::core::mem::offset_of!(AffineAnimFrameCmd, xScale) - 0usize];
    ["Offset of field: AffineAnimFrameCmd::yScale"]
        [::core::mem::offset_of!(AffineAnimFrameCmd, yScale) - 2usize];
    ["Offset of field: AffineAnimFrameCmd::rotation"]
        [::core::mem::offset_of!(AffineAnimFrameCmd, rotation) - 4usize];
    ["Offset of field: AffineAnimFrameCmd::duration"]
        [::core::mem::offset_of!(AffineAnimFrameCmd, duration) - 5usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AffineAnimLoopCmd {
    pub type_: s16,
    pub count: s16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AffineAnimLoopCmd"][::core::mem::size_of::<AffineAnimLoopCmd>() - 4usize];
    ["Alignment of AffineAnimLoopCmd"][::core::mem::align_of::<AffineAnimLoopCmd>() - 2usize];
    ["Offset of field: AffineAnimLoopCmd::type_"]
        [::core::mem::offset_of!(AffineAnimLoopCmd, type_) - 0usize];
    ["Offset of field: AffineAnimLoopCmd::count"]
        [::core::mem::offset_of!(AffineAnimLoopCmd, count) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AffineAnimJumpCmd {
    pub type_: s16,
    pub target: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AffineAnimJumpCmd"][::core::mem::size_of::<AffineAnimJumpCmd>() - 4usize];
    ["Alignment of AffineAnimJumpCmd"][::core::mem::align_of::<AffineAnimJumpCmd>() - 2usize];
    ["Offset of field: AffineAnimJumpCmd::type_"]
        [::core::mem::offset_of!(AffineAnimJumpCmd, type_) - 0usize];
    ["Offset of field: AffineAnimJumpCmd::target"]
        [::core::mem::offset_of!(AffineAnimJumpCmd, target) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AffineAnimEndCmdAlt {
    pub type_: s16,
    pub val: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AffineAnimEndCmdAlt"][::core::mem::size_of::<AffineAnimEndCmdAlt>() - 4usize];
    ["Alignment of AffineAnimEndCmdAlt"][::core::mem::align_of::<AffineAnimEndCmdAlt>() - 2usize];
    ["Offset of field: AffineAnimEndCmdAlt::type_"]
        [::core::mem::offset_of!(AffineAnimEndCmdAlt, type_) - 0usize];
    ["Offset of field: AffineAnimEndCmdAlt::val"]
        [::core::mem::offset_of!(AffineAnimEndCmdAlt, val) - 2usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union AffineAnimCmd {
    pub type_: s16,
    pub frame: AffineAnimFrameCmd,
    pub loop_: AffineAnimLoopCmd,
    pub jump: AffineAnimJumpCmd,
    pub end: AffineAnimEndCmdAlt,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AffineAnimCmd"][::core::mem::size_of::<AffineAnimCmd>() - 6usize];
    ["Alignment of AffineAnimCmd"][::core::mem::align_of::<AffineAnimCmd>() - 2usize];
    ["Offset of field: AffineAnimCmd::type_"]
        [::core::mem::offset_of!(AffineAnimCmd, type_) - 0usize];
    ["Offset of field: AffineAnimCmd::frame"]
        [::core::mem::offset_of!(AffineAnimCmd, frame) - 0usize];
    ["Offset of field: AffineAnimCmd::loop_"]
        [::core::mem::offset_of!(AffineAnimCmd, loop_) - 0usize];
    ["Offset of field: AffineAnimCmd::jump"][::core::mem::offset_of!(AffineAnimCmd, jump) - 0usize];
    ["Offset of field: AffineAnimCmd::end"][::core::mem::offset_of!(AffineAnimCmd, end) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AffineAnimState {
    pub animNum: u8_,
    pub animCmdIndex: u8_,
    pub delayCounter: u8_,
    pub loopCounter: u8_,
    pub xScale: s16,
    pub yScale: s16,
    pub rotation: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AffineAnimState"][::core::mem::size_of::<AffineAnimState>() - 10usize];
    ["Alignment of AffineAnimState"][::core::mem::align_of::<AffineAnimState>() - 2usize];
    ["Offset of field: AffineAnimState::animNum"]
        [::core::mem::offset_of!(AffineAnimState, animNum) - 0usize];
    ["Offset of field: AffineAnimState::animCmdIndex"]
        [::core::mem::offset_of!(AffineAnimState, animCmdIndex) - 1usize];
    ["Offset of field: AffineAnimState::delayCounter"]
        [::core::mem::offset_of!(AffineAnimState, delayCounter) - 2usize];
    ["Offset of field: AffineAnimState::loopCounter"]
        [::core::mem::offset_of!(AffineAnimState, loopCounter) - 3usize];
    ["Offset of field: AffineAnimState::xScale"]
        [::core::mem::offset_of!(AffineAnimState, xScale) - 4usize];
    ["Offset of field: AffineAnimState::yScale"]
        [::core::mem::offset_of!(AffineAnimState, yScale) - 6usize];
    ["Offset of field: AffineAnimState::rotation"]
        [::core::mem::offset_of!(AffineAnimState, rotation) - 8usize];
};
pub const SUBSPRITES_OFF: _bindgen_ty_12 = 0;
pub const SUBSPRITES_ON: _bindgen_ty_12 = 1;
pub const SUBSPRITES_IGNORE_PRIORITY: _bindgen_ty_12 = 2;
pub type _bindgen_ty_12 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Subsprite {
    pub x: s8,
    pub y: s8,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Subsprite"][::core::mem::size_of::<Subsprite>() - 4usize];
    ["Alignment of Subsprite"][::core::mem::align_of::<Subsprite>() - 2usize];
    ["Offset of field: Subsprite::x"][::core::mem::offset_of!(Subsprite, x) - 0usize];
    ["Offset of field: Subsprite::y"][::core::mem::offset_of!(Subsprite, y) - 1usize];
};
impl Subsprite {
    #[inline]
    pub fn shape(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_shape(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn shape_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_shape_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn size(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_size(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn size_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_size_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tileOffset(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 10u8) as u16) }
    }
    #[inline]
    pub fn set_tileOffset(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tileOffset_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                10u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_tileOffset_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                10u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn priority(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_priority(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn priority_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_priority_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        shape: u16_,
        size: u16_,
        tileOffset: u16_,
        priority: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let shape: u16 = unsafe { ::core::mem::transmute(shape) };
            shape as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let size: u16 = unsafe { ::core::mem::transmute(size) };
            size as u64
        });
        __bindgen_bitfield_unit.set(4usize, 10u8, {
            let tileOffset: u16 = unsafe { ::core::mem::transmute(tileOffset) };
            tileOffset as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let priority: u16 = unsafe { ::core::mem::transmute(priority) };
            priority as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SubspriteTable {
    pub subspriteCount: u8_,
    pub subsprites: *const Subsprite,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SubspriteTable"][::core::mem::size_of::<SubspriteTable>() - 8usize];
    ["Alignment of SubspriteTable"][::core::mem::align_of::<SubspriteTable>() - 4usize];
    ["Offset of field: SubspriteTable::subspriteCount"]
        [::core::mem::offset_of!(SubspriteTable, subspriteCount) - 0usize];
    ["Offset of field: SubspriteTable::subsprites"]
        [::core::mem::offset_of!(SubspriteTable, subsprites) - 4usize];
};
pub type SpriteCallback = ::core::option::Option<unsafe extern "C" fn(arg1: *mut Sprite)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpriteTemplate {
    pub tileTag: u16_,
    pub paletteTag: u16_,
    pub oam: *const OamData,
    pub anims: *const *const AnimCmd,
    pub images: *const SpriteFrameImage,
    pub affineAnims: *const *const AffineAnimCmd,
    pub callback: SpriteCallback,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SpriteTemplate"][::core::mem::size_of::<SpriteTemplate>() - 24usize];
    ["Alignment of SpriteTemplate"][::core::mem::align_of::<SpriteTemplate>() - 4usize];
    ["Offset of field: SpriteTemplate::tileTag"]
        [::core::mem::offset_of!(SpriteTemplate, tileTag) - 0usize];
    ["Offset of field: SpriteTemplate::paletteTag"]
        [::core::mem::offset_of!(SpriteTemplate, paletteTag) - 2usize];
    ["Offset of field: SpriteTemplate::oam"][::core::mem::offset_of!(SpriteTemplate, oam) - 4usize];
    ["Offset of field: SpriteTemplate::anims"]
        [::core::mem::offset_of!(SpriteTemplate, anims) - 8usize];
    ["Offset of field: SpriteTemplate::images"]
        [::core::mem::offset_of!(SpriteTemplate, images) - 12usize];
    ["Offset of field: SpriteTemplate::affineAnims"]
        [::core::mem::offset_of!(SpriteTemplate, affineAnims) - 16usize];
    ["Offset of field: SpriteTemplate::callback"]
        [::core::mem::offset_of!(SpriteTemplate, callback) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Sprite {
    pub oam: OamData,
    pub anims: *const *const AnimCmd,
    pub images: *const SpriteFrameImage,
    pub affineAnims: *const *const AffineAnimCmd,
    pub template: *const SpriteTemplate,
    pub subspriteTables: *const SubspriteTable,
    pub callback: SpriteCallback,
    pub x: s16,
    pub y: s16,
    pub x2: s16,
    pub y2: s16,
    pub centerToCornerVecX: s8,
    pub centerToCornerVecY: s8,
    pub animNum: u8_,
    pub animCmdIndex: u8_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub animLoopCounter: u8_,
    pub data: [s16; 8usize],
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub sheetTileStart: u16_,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub subpriority: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Sprite"][::core::mem::size_of::<Sprite>() - 68usize];
    ["Alignment of Sprite"][::core::mem::align_of::<Sprite>() - 4usize];
    ["Offset of field: Sprite::oam"][::core::mem::offset_of!(Sprite, oam) - 0usize];
    ["Offset of field: Sprite::anims"][::core::mem::offset_of!(Sprite, anims) - 8usize];
    ["Offset of field: Sprite::images"][::core::mem::offset_of!(Sprite, images) - 12usize];
    ["Offset of field: Sprite::affineAnims"]
        [::core::mem::offset_of!(Sprite, affineAnims) - 16usize];
    ["Offset of field: Sprite::template"][::core::mem::offset_of!(Sprite, template) - 20usize];
    ["Offset of field: Sprite::subspriteTables"]
        [::core::mem::offset_of!(Sprite, subspriteTables) - 24usize];
    ["Offset of field: Sprite::callback"][::core::mem::offset_of!(Sprite, callback) - 28usize];
    ["Offset of field: Sprite::x"][::core::mem::offset_of!(Sprite, x) - 32usize];
    ["Offset of field: Sprite::y"][::core::mem::offset_of!(Sprite, y) - 34usize];
    ["Offset of field: Sprite::x2"][::core::mem::offset_of!(Sprite, x2) - 36usize];
    ["Offset of field: Sprite::y2"][::core::mem::offset_of!(Sprite, y2) - 38usize];
    ["Offset of field: Sprite::centerToCornerVecX"]
        [::core::mem::offset_of!(Sprite, centerToCornerVecX) - 40usize];
    ["Offset of field: Sprite::centerToCornerVecY"]
        [::core::mem::offset_of!(Sprite, centerToCornerVecY) - 41usize];
    ["Offset of field: Sprite::animNum"][::core::mem::offset_of!(Sprite, animNum) - 42usize];
    ["Offset of field: Sprite::animCmdIndex"]
        [::core::mem::offset_of!(Sprite, animCmdIndex) - 43usize];
    ["Offset of field: Sprite::animLoopCounter"]
        [::core::mem::offset_of!(Sprite, animLoopCounter) - 45usize];
    ["Offset of field: Sprite::data"][::core::mem::offset_of!(Sprite, data) - 46usize];
    ["Offset of field: Sprite::sheetTileStart"]
        [::core::mem::offset_of!(Sprite, sheetTileStart) - 64usize];
    ["Offset of field: Sprite::subpriority"]
        [::core::mem::offset_of!(Sprite, subpriority) - 67usize];
};
impl Sprite {
    #[inline]
    pub fn animDelayCounter(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_animDelayCounter(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn animDelayCounter_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_animDelayCounter_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn animPaused(&self) -> bool8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_animPaused(&mut self, val: bool8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn animPaused_raw(this: *const Self) -> bool8 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_animPaused_raw(this: *mut Self, val: bool8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn affineAnimPaused(&self) -> bool8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_affineAnimPaused(&mut self, val: bool8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn affineAnimPaused_raw(this: *const Self) -> bool8 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_affineAnimPaused_raw(this: *mut Self, val: bool8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        animDelayCounter: u8_,
        animPaused: bool8,
        affineAnimPaused: bool8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 6u8, {
            let animDelayCounter: u8 = unsafe { ::core::mem::transmute(animDelayCounter) };
            animDelayCounter as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let animPaused: u8 = unsafe { ::core::mem::transmute(animPaused) };
            animPaused as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let affineAnimPaused: u8 = unsafe { ::core::mem::transmute(affineAnimPaused) };
            affineAnimPaused as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn inUse(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_inUse(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn inUse_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_inUse_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn coordOffsetEnabled(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_coordOffsetEnabled(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn coordOffsetEnabled_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_coordOffsetEnabled_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn invisible(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_invisible(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn invisible_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                2usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_invisible_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn flags_3(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_flags_3(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_3_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                3usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_flags_3_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sheetSpan(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(4usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_sheetSpan(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(4usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sheetSpan_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                4usize,
                3u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_sheetSpan_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                4usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn flags_7(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_flags_7(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_7_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                7usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_flags_7_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn hFlip(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_hFlip(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn hFlip_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                8usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_hFlip_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vFlip(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_vFlip(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vFlip_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                9usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_vFlip_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn animBeginning(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_animBeginning(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn animBeginning_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                10usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_animBeginning_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn affineAnimBeginning(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_affineAnimBeginning(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn affineAnimBeginning_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                11usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_affineAnimBeginning_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn animEnded(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_animEnded(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn animEnded_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                12usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_animEnded_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn affineAnimEnded(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_affineAnimEnded(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn affineAnimEnded_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                13usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_affineAnimEnded_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn usingSheet(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_usingSheet(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn usingSheet_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                14usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_usingSheet_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn anchored(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_anchored(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn anchored_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                15usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_anchored_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        inUse: u16_,
        coordOffsetEnabled: u16_,
        invisible: u16_,
        flags_3: u16_,
        sheetSpan: u16_,
        flags_7: u16_,
        hFlip: u16_,
        vFlip: u16_,
        animBeginning: u16_,
        affineAnimBeginning: u16_,
        animEnded: u16_,
        affineAnimEnded: u16_,
        usingSheet: u16_,
        anchored: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let inUse: u16 = unsafe { ::core::mem::transmute(inUse) };
            inUse as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let coordOffsetEnabled: u16 = unsafe { ::core::mem::transmute(coordOffsetEnabled) };
            coordOffsetEnabled as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let invisible: u16 = unsafe { ::core::mem::transmute(invisible) };
            invisible as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let flags_3: u16 = unsafe { ::core::mem::transmute(flags_3) };
            flags_3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 3u8, {
            let sheetSpan: u16 = unsafe { ::core::mem::transmute(sheetSpan) };
            sheetSpan as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let flags_7: u16 = unsafe { ::core::mem::transmute(flags_7) };
            flags_7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let hFlip: u16 = unsafe { ::core::mem::transmute(hFlip) };
            hFlip as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let vFlip: u16 = unsafe { ::core::mem::transmute(vFlip) };
            vFlip as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let animBeginning: u16 = unsafe { ::core::mem::transmute(animBeginning) };
            animBeginning as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let affineAnimBeginning: u16 = unsafe { ::core::mem::transmute(affineAnimBeginning) };
            affineAnimBeginning as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let animEnded: u16 = unsafe { ::core::mem::transmute(animEnded) };
            animEnded as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let affineAnimEnded: u16 = unsafe { ::core::mem::transmute(affineAnimEnded) };
            affineAnimEnded as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let usingSheet: u16 = unsafe { ::core::mem::transmute(usingSheet) };
            usingSheet as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let anchored: u16 = unsafe { ::core::mem::transmute(anchored) };
            anchored as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn subspriteTableNum(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(0usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_subspriteTableNum(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn subspriteTableNum_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_subspriteTableNum_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn subspriteMode(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_subspriteMode(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn subspriteMode_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_3),
                6usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_subspriteMode_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_3),
                6usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        subspriteTableNum: u8_,
        subspriteMode: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 6u8, {
            let subspriteTableNum: u8 = unsafe { ::core::mem::transmute(subspriteTableNum) };
            subspriteTableNum as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let subspriteMode: u8 = unsafe { ::core::mem::transmute(subspriteMode) };
            subspriteMode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OamMatrix {
    pub a: s16,
    pub b: s16,
    pub c: s16,
    pub d: s16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OamMatrix"][::core::mem::size_of::<OamMatrix>() - 8usize];
    ["Alignment of OamMatrix"][::core::mem::align_of::<OamMatrix>() - 2usize];
    ["Offset of field: OamMatrix::a"][::core::mem::offset_of!(OamMatrix, a) - 0usize];
    ["Offset of field: OamMatrix::b"][::core::mem::offset_of!(OamMatrix, b) - 2usize];
    ["Offset of field: OamMatrix::c"][::core::mem::offset_of!(OamMatrix, c) - 4usize];
    ["Offset of field: OamMatrix::d"][::core::mem::offset_of!(OamMatrix, d) - 6usize];
};
unsafe extern "C" {
    pub static gDummyOamData: OamData;
}
unsafe extern "C" {
    pub static gDummySpriteAnimTable: [*const AnimCmd; 0usize];
}
unsafe extern "C" {
    pub static gDummySpriteAffineAnimTable: [*const AffineAnimCmd; 0usize];
}
unsafe extern "C" {
    pub static gDummySpriteTemplate: SpriteTemplate;
}
unsafe extern "C" {
    pub static mut gReservedSpritePaletteCount: u8_;
}
unsafe extern "C" {
    pub static mut gSprites: [Sprite; 0usize];
}
unsafe extern "C" {
    pub static mut gOamLimit: u8_;
}
unsafe extern "C" {
    pub static mut gReservedSpriteTileCount: u16_;
}
unsafe extern "C" {
    pub static mut gSpriteCoordOffsetX: s16;
}
unsafe extern "C" {
    pub static mut gSpriteCoordOffsetY: s16;
}
unsafe extern "C" {
    pub static mut gOamMatrices: [OamMatrix; 0usize];
}
unsafe extern "C" {
    pub static mut gAffineAnimsDisabled: bool8;
}
unsafe extern "C" {
    pub fn ResetSpriteData();
}
unsafe extern "C" {
    pub fn AnimateSprites();
}
unsafe extern "C" {
    pub fn BuildOamBuffer();
}
unsafe extern "C" {
    pub fn CreateSprite(template: *const SpriteTemplate, x: s16, y: s16, subpriority: u32_)
        -> u32_;
}
unsafe extern "C" {
    pub fn CreateSpriteAtEnd(
        template: *const SpriteTemplate,
        x: s16,
        y: s16,
        subpriority: u32_,
    ) -> u32_;
}
unsafe extern "C" {
    pub fn CreateInvisibleSprite(
        callback: ::core::option::Option<unsafe extern "C" fn(arg1: *mut Sprite)>,
    ) -> u32_;
}
unsafe extern "C" {
    pub fn CreateSpriteAndAnimate(
        template: *const SpriteTemplate,
        x: s16,
        y: s16,
        subpriority: u32_,
    ) -> u32_;
}
unsafe extern "C" {
    pub fn DestroySprite(sprite: *mut Sprite);
}
unsafe extern "C" {
    pub fn ResetOamRange(start: u32_, end: u32_);
}
unsafe extern "C" {
    pub fn LoadOam();
}
unsafe extern "C" {
    pub fn SetOamMatrix(matrixNum: u8_, a: u16_, b: u16_, c: u16_, d: u16_);
}
unsafe extern "C" {
    pub fn CalcCenterToCornerVec(sprite: *mut Sprite, shape: u8_, size: u8_, affineMode: u8_);
}
unsafe extern "C" {
    pub fn SpriteCallbackDummy(sprite: *mut Sprite);
}
unsafe extern "C" {
    pub fn ProcessSpriteCopyRequests();
}
unsafe extern "C" {
    pub fn RequestSpriteCopy(src: *const u8_, dest: *mut u8_, size: u16_);
}
unsafe extern "C" {
    pub fn FreeSpriteTiles(sprite: *mut Sprite);
}
unsafe extern "C" {
    pub fn FreeSpritePalette(sprite: *mut Sprite);
}
unsafe extern "C" {
    pub fn FreeSpriteOamMatrix(sprite: *mut Sprite);
}
unsafe extern "C" {
    pub fn DestroySpriteAndFreeResources(sprite: *mut Sprite);
}
unsafe extern "C" {
    pub fn AnimateSprite(sprite: *mut Sprite);
}
unsafe extern "C" {
    pub fn SetSpriteMatrixAnchor(sprite: *mut Sprite, x: s16, y: s16);
}
unsafe extern "C" {
    pub fn StartSpriteAnim(sprite: *mut Sprite, animNum: u8_);
}
unsafe extern "C" {
    pub fn StartSpriteAnimIfDifferent(sprite: *mut Sprite, animNum: u8_);
}
unsafe extern "C" {
    pub fn SeekSpriteAnim(sprite: *mut Sprite, animCmdIndex: u8_);
}
unsafe extern "C" {
    pub fn StartSpriteAffineAnim(sprite: *mut Sprite, animNum: u8_);
}
unsafe extern "C" {
    pub fn StartSpriteAffineAnimIfDifferent(sprite: *mut Sprite, animNum: u8_);
}
unsafe extern "C" {
    pub fn ChangeSpriteAffineAnim(sprite: *mut Sprite, animNum: u8_);
}
unsafe extern "C" {
    pub fn ChangeSpriteAffineAnimIfDifferent(sprite: *mut Sprite, animNum: u8_);
}
unsafe extern "C" {
    pub fn SetSpriteSheetFrameTileNum(sprite: *mut Sprite);
}
unsafe extern "C" {
    pub fn AllocOamMatrix() -> u8_;
}
unsafe extern "C" {
    pub fn FreeOamMatrix(matrixNum: u8_);
}
unsafe extern "C" {
    pub fn InitSpriteAffineAnim(sprite: *mut Sprite);
}
unsafe extern "C" {
    pub fn SetOamMatrixRotationScaling(matrixNum: u8_, xScale: s16, yScale: s16, rotation: u16_);
}
unsafe extern "C" {
    pub fn LoadSpriteSheet(sheet: *const SpriteSheet) -> u16_;
}
unsafe extern "C" {
    pub fn LoadSpriteSheetByTemplate(
        template: *const SpriteTemplate,
        frame: u32_,
        offset: s32,
    ) -> u16_;
}
unsafe extern "C" {
    pub fn LoadSpriteSheets(sheets: *const SpriteSheet);
}
unsafe extern "C" {
    pub fn AllocSpriteTiles(tileCount: u16_) -> s16;
}
unsafe extern "C" {
    pub fn AllocTilesForSpriteSheet(sheet: *mut SpriteSheet) -> u16_;
}
unsafe extern "C" {
    pub fn AllocTilesForSpriteSheets(sheets: *mut SpriteSheet);
}
unsafe extern "C" {
    pub fn LoadTilesForSpriteSheet(sheet: *const SpriteSheet);
}
unsafe extern "C" {
    pub fn LoadTilesForSpriteSheets(sheets: *mut SpriteSheet);
}
unsafe extern "C" {
    pub fn FreeSpriteTilesByTag(tag: u16_);
}
unsafe extern "C" {
    pub fn FreeSpriteTileRanges();
}
unsafe extern "C" {
    pub fn GetSpriteTileStartByTag(tag: u16_) -> u16_;
}
unsafe extern "C" {
    pub fn GetSpriteTileTagByTileStart(start: u16_) -> u16_;
}
unsafe extern "C" {
    pub fn RequestSpriteSheetCopy(sheet: *const SpriteSheet);
}
unsafe extern "C" {
    pub fn LoadSpriteSheetDeferred(sheet: *const SpriteSheet) -> u16_;
}
unsafe extern "C" {
    pub fn FreeAllSpritePalettes();
}
unsafe extern "C" {
    pub fn LoadSpritePalette(palette: *const SpritePalette) -> u8_;
}
unsafe extern "C" {
    pub fn LoadSpritePalettes(palettes: *const SpritePalette);
}
unsafe extern "C" {
    pub fn AllocSpritePalette(tag: u16_) -> u8_;
}
unsafe extern "C" {
    pub fn IndexOfSpritePaletteTag(tag: u16_) -> u8_;
}
unsafe extern "C" {
    pub fn GetSpritePaletteTagByPaletteNum(paletteNum: u8_) -> u16_;
}
unsafe extern "C" {
    pub fn FreeSpritePaletteByTag(tag: u16_);
}
unsafe extern "C" {
    pub fn SetSubspriteTables(sprite: *mut Sprite, subspriteTables: *const SubspriteTable);
}
unsafe extern "C" {
    pub fn AddSpriteToOamBuffer(object: *mut Sprite, oamIndex: *mut u8_) -> bool8;
}
unsafe extern "C" {
    pub fn AddSubspritesToOamBuffer(
        sprite: *mut Sprite,
        destOam: *mut OamData,
        oamIndex: *mut u8_,
    ) -> bool8;
}
unsafe extern "C" {
    pub fn CopyToSprites(src: *mut u8_);
}
unsafe extern "C" {
    pub fn CopyFromSprites(dest: *mut u8_);
}
unsafe extern "C" {
    pub fn SpriteTileAllocBitmapOp(bit: u16_, op: u8_) -> u8_;
}
unsafe extern "C" {
    pub fn ClearSpriteCopyRequests();
}
unsafe extern "C" {
    pub fn ResetAffineAnimData();
}
unsafe extern "C" {
    pub fn GetSpanPerImage(shape: u32_, size: u32_) -> u32_;
}
unsafe extern "C" {
    pub fn RequestSpriteFrameImageCopy(index: u16_, tileNum: u16_, images: *const SpriteFrameImage);
}
unsafe extern "C" {
    pub fn SetSpriteOamFlipBits(sprite: *mut Sprite, hFlip: u8_, vFlip: u8_);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ContestEffect {
    pub effectType: u8_,
    pub appeal: u8_,
    pub jam: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ContestEffect"][::core::mem::size_of::<ContestEffect>() - 3usize];
    ["Alignment of ContestEffect"][::core::mem::align_of::<ContestEffect>() - 1usize];
    ["Offset of field: ContestEffect::effectType"]
        [::core::mem::offset_of!(ContestEffect, effectType) - 0usize];
    ["Offset of field: ContestEffect::appeal"]
        [::core::mem::offset_of!(ContestEffect, appeal) - 1usize];
    ["Offset of field: ContestEffect::jam"][::core::mem::offset_of!(ContestEffect, jam) - 2usize];
};
unsafe extern "C" {
    pub static gContestEffects: [ContestEffect; 0usize];
}
unsafe extern "C" {
    pub static gContestEffectDescriptionPointers: [*const u8_; 0usize];
}
unsafe extern "C" {
    pub static gContestMoveTypeTextPointers: [*const u8_; 0usize];
}
unsafe extern "C" {
    pub fn AreMovesContestCombo(lastMove: u16_, nextMove: u16_) -> bool8;
}
pub const MON_DATA_PERSONALITY: _bindgen_ty_13 = 0;
pub const MON_DATA_STATUS: _bindgen_ty_13 = 1;
pub const MON_DATA_OT_ID: _bindgen_ty_13 = 2;
pub const MON_DATA_LANGUAGE: _bindgen_ty_13 = 3;
pub const MON_DATA_SANITY_IS_BAD_EGG: _bindgen_ty_13 = 4;
pub const MON_DATA_SANITY_HAS_SPECIES: _bindgen_ty_13 = 5;
pub const MON_DATA_SANITY_IS_EGG: _bindgen_ty_13 = 6;
pub const MON_DATA_OT_NAME: _bindgen_ty_13 = 7;
pub const MON_DATA_MARKINGS: _bindgen_ty_13 = 8;
pub const MON_DATA_CHECKSUM: _bindgen_ty_13 = 9;
pub const MON_DATA_HP: _bindgen_ty_13 = 10;
pub const MON_DATA_IS_SHINY: _bindgen_ty_13 = 11;
pub const MON_DATA_HIDDEN_NATURE: _bindgen_ty_13 = 12;
pub const MON_DATA_HP_LOST: _bindgen_ty_13 = 13;
pub const MON_DATA_DAYS_SINCE_FORM_CHANGE: _bindgen_ty_13 = 14;
pub const MON_DATA_ENCRYPT_SEPARATOR: _bindgen_ty_13 = 15;
pub const MON_DATA_NICKNAME: _bindgen_ty_13 = 16;
pub const MON_DATA_NICKNAME10: _bindgen_ty_13 = 17;
pub const MON_DATA_SPECIES: _bindgen_ty_13 = 18;
pub const MON_DATA_HELD_ITEM: _bindgen_ty_13 = 19;
pub const MON_DATA_MOVE1: _bindgen_ty_13 = 20;
pub const MON_DATA_MOVE2: _bindgen_ty_13 = 21;
pub const MON_DATA_MOVE3: _bindgen_ty_13 = 22;
pub const MON_DATA_MOVE4: _bindgen_ty_13 = 23;
pub const MON_DATA_PP1: _bindgen_ty_13 = 24;
pub const MON_DATA_PP2: _bindgen_ty_13 = 25;
pub const MON_DATA_PP3: _bindgen_ty_13 = 26;
pub const MON_DATA_PP4: _bindgen_ty_13 = 27;
pub const MON_DATA_PP_BONUSES: _bindgen_ty_13 = 28;
pub const MON_DATA_COOL: _bindgen_ty_13 = 29;
pub const MON_DATA_BEAUTY: _bindgen_ty_13 = 30;
pub const MON_DATA_CUTE: _bindgen_ty_13 = 31;
pub const MON_DATA_EXP: _bindgen_ty_13 = 32;
pub const MON_DATA_HP_EV: _bindgen_ty_13 = 33;
pub const MON_DATA_ATK_EV: _bindgen_ty_13 = 34;
pub const MON_DATA_DEF_EV: _bindgen_ty_13 = 35;
pub const MON_DATA_SPEED_EV: _bindgen_ty_13 = 36;
pub const MON_DATA_SPATK_EV: _bindgen_ty_13 = 37;
pub const MON_DATA_SPDEF_EV: _bindgen_ty_13 = 38;
pub const MON_DATA_FRIENDSHIP: _bindgen_ty_13 = 39;
pub const MON_DATA_SMART: _bindgen_ty_13 = 40;
pub const MON_DATA_POKERUS: _bindgen_ty_13 = 41;
pub const MON_DATA_MET_LOCATION: _bindgen_ty_13 = 42;
pub const MON_DATA_MET_LEVEL: _bindgen_ty_13 = 43;
pub const MON_DATA_MET_GAME: _bindgen_ty_13 = 44;
pub const MON_DATA_POKEBALL: _bindgen_ty_13 = 45;
pub const MON_DATA_HP_IV: _bindgen_ty_13 = 46;
pub const MON_DATA_ATK_IV: _bindgen_ty_13 = 47;
pub const MON_DATA_DEF_IV: _bindgen_ty_13 = 48;
pub const MON_DATA_SPEED_IV: _bindgen_ty_13 = 49;
pub const MON_DATA_SPATK_IV: _bindgen_ty_13 = 50;
pub const MON_DATA_SPDEF_IV: _bindgen_ty_13 = 51;
pub const MON_DATA_IS_EGG: _bindgen_ty_13 = 52;
pub const MON_DATA_ABILITY_NUM: _bindgen_ty_13 = 53;
pub const MON_DATA_TOUGH: _bindgen_ty_13 = 54;
pub const MON_DATA_SHEEN: _bindgen_ty_13 = 55;
pub const MON_DATA_OT_GENDER: _bindgen_ty_13 = 56;
pub const MON_DATA_COOL_RIBBON: _bindgen_ty_13 = 57;
pub const MON_DATA_BEAUTY_RIBBON: _bindgen_ty_13 = 58;
pub const MON_DATA_CUTE_RIBBON: _bindgen_ty_13 = 59;
pub const MON_DATA_SMART_RIBBON: _bindgen_ty_13 = 60;
pub const MON_DATA_TOUGH_RIBBON: _bindgen_ty_13 = 61;
pub const MON_DATA_LEVEL: _bindgen_ty_13 = 62;
pub const MON_DATA_MAX_HP: _bindgen_ty_13 = 63;
pub const MON_DATA_ATK: _bindgen_ty_13 = 64;
pub const MON_DATA_DEF: _bindgen_ty_13 = 65;
pub const MON_DATA_SPEED: _bindgen_ty_13 = 66;
pub const MON_DATA_SPATK: _bindgen_ty_13 = 67;
pub const MON_DATA_SPDEF: _bindgen_ty_13 = 68;
pub const MON_DATA_MAIL: _bindgen_ty_13 = 69;
pub const MON_DATA_SPECIES_OR_EGG: _bindgen_ty_13 = 70;
pub const MON_DATA_IVS: _bindgen_ty_13 = 71;
pub const MON_DATA_CHAMPION_RIBBON: _bindgen_ty_13 = 72;
pub const MON_DATA_WINNING_RIBBON: _bindgen_ty_13 = 73;
pub const MON_DATA_VICTORY_RIBBON: _bindgen_ty_13 = 74;
pub const MON_DATA_ARTIST_RIBBON: _bindgen_ty_13 = 75;
pub const MON_DATA_EFFORT_RIBBON: _bindgen_ty_13 = 76;
pub const MON_DATA_MARINE_RIBBON: _bindgen_ty_13 = 77;
pub const MON_DATA_LAND_RIBBON: _bindgen_ty_13 = 78;
pub const MON_DATA_SKY_RIBBON: _bindgen_ty_13 = 79;
pub const MON_DATA_COUNTRY_RIBBON: _bindgen_ty_13 = 80;
pub const MON_DATA_NATIONAL_RIBBON: _bindgen_ty_13 = 81;
pub const MON_DATA_EARTH_RIBBON: _bindgen_ty_13 = 82;
pub const MON_DATA_WORLD_RIBBON: _bindgen_ty_13 = 83;
pub const MON_DATA_MODERN_FATEFUL_ENCOUNTER: _bindgen_ty_13 = 84;
pub const MON_DATA_KNOWN_MOVES: _bindgen_ty_13 = 85;
pub const MON_DATA_RIBBON_COUNT: _bindgen_ty_13 = 86;
pub const MON_DATA_RIBBONS: _bindgen_ty_13 = 87;
pub const MON_DATA_ATK2: _bindgen_ty_13 = 88;
pub const MON_DATA_DEF2: _bindgen_ty_13 = 89;
pub const MON_DATA_SPEED2: _bindgen_ty_13 = 90;
pub const MON_DATA_SPATK2: _bindgen_ty_13 = 91;
pub const MON_DATA_SPDEF2: _bindgen_ty_13 = 92;
pub const MON_DATA_HYPER_TRAINED_HP: _bindgen_ty_13 = 93;
pub const MON_DATA_HYPER_TRAINED_ATK: _bindgen_ty_13 = 94;
pub const MON_DATA_HYPER_TRAINED_DEF: _bindgen_ty_13 = 95;
pub const MON_DATA_HYPER_TRAINED_SPEED: _bindgen_ty_13 = 96;
pub const MON_DATA_HYPER_TRAINED_SPATK: _bindgen_ty_13 = 97;
pub const MON_DATA_HYPER_TRAINED_SPDEF: _bindgen_ty_13 = 98;
pub const MON_DATA_IS_SHADOW: _bindgen_ty_13 = 99;
pub const MON_DATA_DYNAMAX_LEVEL: _bindgen_ty_13 = 100;
pub const MON_DATA_GIGANTAMAX_FACTOR: _bindgen_ty_13 = 101;
pub const MON_DATA_TERA_TYPE: _bindgen_ty_13 = 102;
pub const MON_DATA_EVOLUTION_TRACKER: _bindgen_ty_13 = 103;
pub type _bindgen_ty_13 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PokemonSubstruct0 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub ppBonuses: u8_,
    pub friendship: u8_,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PokemonSubstruct0"][::core::mem::size_of::<PokemonSubstruct0>() - 12usize];
    ["Alignment of PokemonSubstruct0"][::core::mem::align_of::<PokemonSubstruct0>() - 4usize];
    ["Offset of field: PokemonSubstruct0::ppBonuses"]
        [::core::mem::offset_of!(PokemonSubstruct0, ppBonuses) - 8usize];
    ["Offset of field: PokemonSubstruct0::friendship"]
        [::core::mem::offset_of!(PokemonSubstruct0, friendship) - 9usize];
};
impl PokemonSubstruct0 {
    #[inline]
    pub fn species(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 11u8) as u16) }
    }
    #[inline]
    pub fn set_species(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn species_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                11u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_species_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                11u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn teraType(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_teraType(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn teraType_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                5u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_teraType_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn heldItem(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 10u8) as u16) }
    }
    #[inline]
    pub fn set_heldItem(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn heldItem_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                10u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_heldItem_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                10u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn unused_02(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u16) }
    }
    #[inline]
    pub fn set_unused_02(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn unused_02_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                26usize,
                6u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_unused_02_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                26usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn experience(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_experience(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn experience_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                21u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_experience_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                21u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn nickname11(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(53usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_nickname11(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(53usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn nickname11_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                53usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_nickname11_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                53usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn unused_04(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(61usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_unused_04(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(61usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn unused_04_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                61usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_unused_04_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                61usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        species: u16_,
        teraType: u16_,
        heldItem: u16_,
        unused_02: u16_,
        experience: u32_,
        nickname11: u32_,
        unused_04: u32_,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 11u8, {
            let species: u16 = unsafe { ::core::mem::transmute(species) };
            species as u64
        });
        __bindgen_bitfield_unit.set(11usize, 5u8, {
            let teraType: u16 = unsafe { ::core::mem::transmute(teraType) };
            teraType as u64
        });
        __bindgen_bitfield_unit.set(16usize, 10u8, {
            let heldItem: u16 = unsafe { ::core::mem::transmute(heldItem) };
            heldItem as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let unused_02: u16 = unsafe { ::core::mem::transmute(unused_02) };
            unused_02 as u64
        });
        __bindgen_bitfield_unit.set(32usize, 21u8, {
            let experience: u32 = unsafe { ::core::mem::transmute(experience) };
            experience as u64
        });
        __bindgen_bitfield_unit.set(53usize, 8u8, {
            let nickname11: u32 = unsafe { ::core::mem::transmute(nickname11) };
            nickname11 as u64
        });
        __bindgen_bitfield_unit.set(61usize, 3u8, {
            let unused_04: u32 = unsafe { ::core::mem::transmute(unused_04) };
            unused_04 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn pokeball(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(0usize, 6u8) as u16) }
    }
    #[inline]
    pub fn set_pokeball(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pokeball_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                6u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_pokeball_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn nickname12(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(6usize, 8u8) as u16) }
    }
    #[inline]
    pub fn set_nickname12(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(6usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn nickname12_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                6usize,
                8u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_nickname12_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                6usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn unused_0A(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(14usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_unused_0A(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_2.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn unused_0A_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                14usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_unused_0A_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                14usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        pokeball: u16_,
        nickname12: u16_,
        unused_0A: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 6u8, {
            let pokeball: u16 = unsafe { ::core::mem::transmute(pokeball) };
            pokeball as u64
        });
        __bindgen_bitfield_unit.set(6usize, 8u8, {
            let nickname12: u16 = unsafe { ::core::mem::transmute(nickname12) };
            nickname12 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let unused_0A: u16 = unsafe { ::core::mem::transmute(unused_0A) };
            unused_0A as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PokemonSubstruct1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 12usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PokemonSubstruct1"][::core::mem::size_of::<PokemonSubstruct1>() - 12usize];
    ["Alignment of PokemonSubstruct1"][::core::mem::align_of::<PokemonSubstruct1>() - 2usize];
};
impl PokemonSubstruct1 {
    #[inline]
    pub fn move1(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 11u8) as u16) }
    }
    #[inline]
    pub fn set_move1(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn move1_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                11u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_move1_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                11u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn evolutionTracker1(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_evolutionTracker1(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn evolutionTracker1_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                5u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_evolutionTracker1_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn move2(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 11u8) as u16) }
    }
    #[inline]
    pub fn set_move2(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn move2_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                11u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_move2_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                11u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn evolutionTracker2(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_evolutionTracker2(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn evolutionTracker2_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                27usize,
                5u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_evolutionTracker2_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                27usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn move3(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 11u8) as u16) }
    }
    #[inline]
    pub fn set_move3(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn move3_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                11u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_move3_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                11u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn unused_04(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(43usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_unused_04(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(43usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn unused_04_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                43usize,
                5u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_unused_04_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                43usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn move4(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(48usize, 11u8) as u16) }
    }
    #[inline]
    pub fn set_move4(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(48usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn move4_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                48usize,
                11u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_move4_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                48usize,
                11u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn unused_06(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(59usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_unused_06(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(59usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn unused_06_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                59usize,
                3u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_unused_06_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                59usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn hyperTrainedHP(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_hyperTrainedHP(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn hyperTrainedHP_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                62usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_hyperTrainedHP_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                62usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn hyperTrainedAttack(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_hyperTrainedAttack(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn hyperTrainedAttack_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                63usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_hyperTrainedAttack_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                63usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pp1(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(64usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_pp1(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(64usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pp1_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                64usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_pp1_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                64usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn hyperTrainedDefense(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(71usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_hyperTrainedDefense(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(71usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn hyperTrainedDefense_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                71usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_hyperTrainedDefense_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                71usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pp2(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(72usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_pp2(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(72usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pp2_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                72usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_pp2_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                72usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn hyperTrainedSpeed(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(79usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_hyperTrainedSpeed(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(79usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn hyperTrainedSpeed_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                79usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_hyperTrainedSpeed_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                79usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pp3(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(80usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_pp3(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(80usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pp3_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                80usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_pp3_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                80usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn hyperTrainedSpAttack(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(87usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_hyperTrainedSpAttack(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(87usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn hyperTrainedSpAttack_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                87usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_hyperTrainedSpAttack_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                87usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pp4(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(88usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_pp4(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(88usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pp4_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                88usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_pp4_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                88usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn hyperTrainedSpDefense(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(95usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_hyperTrainedSpDefense(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(95usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn hyperTrainedSpDefense_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                95usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_hyperTrainedSpDefense_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                95usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        move1: u16_,
        evolutionTracker1: u16_,
        move2: u16_,
        evolutionTracker2: u16_,
        move3: u16_,
        unused_04: u16_,
        move4: u16_,
        unused_06: u16_,
        hyperTrainedHP: u16_,
        hyperTrainedAttack: u16_,
        pp1: u8_,
        hyperTrainedDefense: u8_,
        pp2: u8_,
        hyperTrainedSpeed: u8_,
        pp3: u8_,
        hyperTrainedSpAttack: u8_,
        pp4: u8_,
        hyperTrainedSpDefense: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 12usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 12usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 11u8, {
            let move1: u16 = unsafe { ::core::mem::transmute(move1) };
            move1 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 5u8, {
            let evolutionTracker1: u16 = unsafe { ::core::mem::transmute(evolutionTracker1) };
            evolutionTracker1 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 11u8, {
            let move2: u16 = unsafe { ::core::mem::transmute(move2) };
            move2 as u64
        });
        __bindgen_bitfield_unit.set(27usize, 5u8, {
            let evolutionTracker2: u16 = unsafe { ::core::mem::transmute(evolutionTracker2) };
            evolutionTracker2 as u64
        });
        __bindgen_bitfield_unit.set(32usize, 11u8, {
            let move3: u16 = unsafe { ::core::mem::transmute(move3) };
            move3 as u64
        });
        __bindgen_bitfield_unit.set(43usize, 5u8, {
            let unused_04: u16 = unsafe { ::core::mem::transmute(unused_04) };
            unused_04 as u64
        });
        __bindgen_bitfield_unit.set(48usize, 11u8, {
            let move4: u16 = unsafe { ::core::mem::transmute(move4) };
            move4 as u64
        });
        __bindgen_bitfield_unit.set(59usize, 3u8, {
            let unused_06: u16 = unsafe { ::core::mem::transmute(unused_06) };
            unused_06 as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let hyperTrainedHP: u16 = unsafe { ::core::mem::transmute(hyperTrainedHP) };
            hyperTrainedHP as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let hyperTrainedAttack: u16 = unsafe { ::core::mem::transmute(hyperTrainedAttack) };
            hyperTrainedAttack as u64
        });
        __bindgen_bitfield_unit.set(64usize, 7u8, {
            let pp1: u8 = unsafe { ::core::mem::transmute(pp1) };
            pp1 as u64
        });
        __bindgen_bitfield_unit.set(71usize, 1u8, {
            let hyperTrainedDefense: u8 = unsafe { ::core::mem::transmute(hyperTrainedDefense) };
            hyperTrainedDefense as u64
        });
        __bindgen_bitfield_unit.set(72usize, 7u8, {
            let pp2: u8 = unsafe { ::core::mem::transmute(pp2) };
            pp2 as u64
        });
        __bindgen_bitfield_unit.set(79usize, 1u8, {
            let hyperTrainedSpeed: u8 = unsafe { ::core::mem::transmute(hyperTrainedSpeed) };
            hyperTrainedSpeed as u64
        });
        __bindgen_bitfield_unit.set(80usize, 7u8, {
            let pp3: u8 = unsafe { ::core::mem::transmute(pp3) };
            pp3 as u64
        });
        __bindgen_bitfield_unit.set(87usize, 1u8, {
            let hyperTrainedSpAttack: u8 = unsafe { ::core::mem::transmute(hyperTrainedSpAttack) };
            hyperTrainedSpAttack as u64
        });
        __bindgen_bitfield_unit.set(88usize, 7u8, {
            let pp4: u8 = unsafe { ::core::mem::transmute(pp4) };
            pp4 as u64
        });
        __bindgen_bitfield_unit.set(95usize, 1u8, {
            let hyperTrainedSpDefense: u8 =
                unsafe { ::core::mem::transmute(hyperTrainedSpDefense) };
            hyperTrainedSpDefense as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PokemonSubstruct2 {
    pub hpEV: u8_,
    pub attackEV: u8_,
    pub defenseEV: u8_,
    pub speedEV: u8_,
    pub spAttackEV: u8_,
    pub spDefenseEV: u8_,
    pub cool: u8_,
    pub beauty: u8_,
    pub cute: u8_,
    pub smart: u8_,
    pub tough: u8_,
    pub sheen: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PokemonSubstruct2"][::core::mem::size_of::<PokemonSubstruct2>() - 12usize];
    ["Alignment of PokemonSubstruct2"][::core::mem::align_of::<PokemonSubstruct2>() - 1usize];
    ["Offset of field: PokemonSubstruct2::hpEV"]
        [::core::mem::offset_of!(PokemonSubstruct2, hpEV) - 0usize];
    ["Offset of field: PokemonSubstruct2::attackEV"]
        [::core::mem::offset_of!(PokemonSubstruct2, attackEV) - 1usize];
    ["Offset of field: PokemonSubstruct2::defenseEV"]
        [::core::mem::offset_of!(PokemonSubstruct2, defenseEV) - 2usize];
    ["Offset of field: PokemonSubstruct2::speedEV"]
        [::core::mem::offset_of!(PokemonSubstruct2, speedEV) - 3usize];
    ["Offset of field: PokemonSubstruct2::spAttackEV"]
        [::core::mem::offset_of!(PokemonSubstruct2, spAttackEV) - 4usize];
    ["Offset of field: PokemonSubstruct2::spDefenseEV"]
        [::core::mem::offset_of!(PokemonSubstruct2, spDefenseEV) - 5usize];
    ["Offset of field: PokemonSubstruct2::cool"]
        [::core::mem::offset_of!(PokemonSubstruct2, cool) - 6usize];
    ["Offset of field: PokemonSubstruct2::beauty"]
        [::core::mem::offset_of!(PokemonSubstruct2, beauty) - 7usize];
    ["Offset of field: PokemonSubstruct2::cute"]
        [::core::mem::offset_of!(PokemonSubstruct2, cute) - 8usize];
    ["Offset of field: PokemonSubstruct2::smart"]
        [::core::mem::offset_of!(PokemonSubstruct2, smart) - 9usize];
    ["Offset of field: PokemonSubstruct2::tough"]
        [::core::mem::offset_of!(PokemonSubstruct2, tough) - 10usize];
    ["Offset of field: PokemonSubstruct2::sheen"]
        [::core::mem::offset_of!(PokemonSubstruct2, sheen) - 11usize];
};
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct PokemonSubstruct3 {
    pub _bindgen_opaque_blob: [u32; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PokemonSubstruct3"][::core::mem::size_of::<PokemonSubstruct3>() - 12usize];
    ["Alignment of PokemonSubstruct3"][::core::mem::align_of::<PokemonSubstruct3>() - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union PokemonSubstruct {
    pub type0: PokemonSubstruct0,
    pub type1: PokemonSubstruct1,
    pub type2: PokemonSubstruct2,
    pub type3: PokemonSubstruct3,
    pub raw: [u16_; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PokemonSubstruct"][::core::mem::size_of::<PokemonSubstruct>() - 12usize];
    ["Alignment of PokemonSubstruct"][::core::mem::align_of::<PokemonSubstruct>() - 4usize];
    ["Offset of field: PokemonSubstruct::type0"]
        [::core::mem::offset_of!(PokemonSubstruct, type0) - 0usize];
    ["Offset of field: PokemonSubstruct::type1"]
        [::core::mem::offset_of!(PokemonSubstruct, type1) - 0usize];
    ["Offset of field: PokemonSubstruct::type2"]
        [::core::mem::offset_of!(PokemonSubstruct, type2) - 0usize];
    ["Offset of field: PokemonSubstruct::type3"]
        [::core::mem::offset_of!(PokemonSubstruct, type3) - 0usize];
    ["Offset of field: PokemonSubstruct::raw"]
        [::core::mem::offset_of!(PokemonSubstruct, raw) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BoxPokemon {
    pub personality: u32_,
    pub otId: u32_,
    pub nickname: [u8_; 10usize],
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub otName: [u8_; 7usize],
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub checksum: u16_,
    pub _bitfield_align_3: [u16; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub secure: BoxPokemon__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union BoxPokemon__bindgen_ty_1 {
    pub raw: [u32_; 12usize],
    pub substructs: [PokemonSubstruct; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BoxPokemon__bindgen_ty_1"]
        [::core::mem::size_of::<BoxPokemon__bindgen_ty_1>() - 48usize];
    ["Alignment of BoxPokemon__bindgen_ty_1"]
        [::core::mem::align_of::<BoxPokemon__bindgen_ty_1>() - 4usize];
    ["Offset of field: BoxPokemon__bindgen_ty_1::raw"]
        [::core::mem::offset_of!(BoxPokemon__bindgen_ty_1, raw) - 0usize];
    ["Offset of field: BoxPokemon__bindgen_ty_1::substructs"]
        [::core::mem::offset_of!(BoxPokemon__bindgen_ty_1, substructs) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BoxPokemon"][::core::mem::size_of::<BoxPokemon>() - 80usize];
    ["Alignment of BoxPokemon"][::core::mem::align_of::<BoxPokemon>() - 4usize];
    ["Offset of field: BoxPokemon::personality"]
        [::core::mem::offset_of!(BoxPokemon, personality) - 0usize];
    ["Offset of field: BoxPokemon::otId"][::core::mem::offset_of!(BoxPokemon, otId) - 4usize];
    ["Offset of field: BoxPokemon::nickname"]
        [::core::mem::offset_of!(BoxPokemon, nickname) - 8usize];
    ["Offset of field: BoxPokemon::otName"][::core::mem::offset_of!(BoxPokemon, otName) - 20usize];
    ["Offset of field: BoxPokemon::checksum"]
        [::core::mem::offset_of!(BoxPokemon, checksum) - 28usize];
    ["Offset of field: BoxPokemon::secure"][::core::mem::offset_of!(BoxPokemon, secure) - 32usize];
};
impl BoxPokemon {
    #[inline]
    pub fn language(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_language(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn language_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_language_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn hiddenNatureModifier(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_hiddenNatureModifier(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn hiddenNatureModifier_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                5u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_hiddenNatureModifier_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn isBadEgg(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_isBadEgg(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isBadEgg_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_isBadEgg_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn hasSpecies(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_hasSpecies(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn hasSpecies_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_hasSpecies_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn isEgg(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_isEgg(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isEgg_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_isEgg_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn blockBoxRS(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_blockBoxRS(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn blockBoxRS_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_blockBoxRS_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn daysSinceFormChange(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_daysSinceFormChange(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn daysSinceFormChange_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_daysSinceFormChange_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn unused_13(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_unused_13(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn unused_13_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_unused_13_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        language: u8_,
        hiddenNatureModifier: u8_,
        isBadEgg: u8_,
        hasSpecies: u8_,
        isEgg: u8_,
        blockBoxRS: u8_,
        daysSinceFormChange: u8_,
        unused_13: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let language: u8 = unsafe { ::core::mem::transmute(language) };
            language as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let hiddenNatureModifier: u8 = unsafe { ::core::mem::transmute(hiddenNatureModifier) };
            hiddenNatureModifier as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let isBadEgg: u8 = unsafe { ::core::mem::transmute(isBadEgg) };
            isBadEgg as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let hasSpecies: u8 = unsafe { ::core::mem::transmute(hasSpecies) };
            hasSpecies as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let isEgg: u8 = unsafe { ::core::mem::transmute(isEgg) };
            isEgg as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let blockBoxRS: u8 = unsafe { ::core::mem::transmute(blockBoxRS) };
            blockBoxRS as u64
        });
        __bindgen_bitfield_unit.set(12usize, 3u8, {
            let daysSinceFormChange: u8 = unsafe { ::core::mem::transmute(daysSinceFormChange) };
            daysSinceFormChange as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let unused_13: u8 = unsafe { ::core::mem::transmute(unused_13) };
            unused_13 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn markings(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_markings(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn markings_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_markings_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn compressedStatus(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_compressedStatus(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn compressedStatus_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_compressedStatus_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        markings: u8_,
        compressedStatus: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let markings: u8 = unsafe { ::core::mem::transmute(markings) };
            markings as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let compressedStatus: u8 = unsafe { ::core::mem::transmute(compressedStatus) };
            compressedStatus as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn hpLost(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(0usize, 14u8) as u16) }
    }
    #[inline]
    pub fn set_hpLost(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_3.set(0usize, 14u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn hpLost_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                14u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_hpLost_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                14u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn shinyModifier(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_shinyModifier(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_3.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn shinyModifier_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_3),
                14usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_shinyModifier_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_3),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn unused_1E(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_unused_1E(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_3.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn unused_1E_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_3),
                15usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_unused_1E_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_3),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        hpLost: u16_,
        shinyModifier: u16_,
        unused_1E: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 14u8, {
            let hpLost: u16 = unsafe { ::core::mem::transmute(hpLost) };
            hpLost as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let shinyModifier: u16 = unsafe { ::core::mem::transmute(shinyModifier) };
            shinyModifier as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let unused_1E: u16 = unsafe { ::core::mem::transmute(unused_1E) };
            unused_1E as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Pokemon {
    pub box_: BoxPokemon,
    pub status: u32_,
    pub level: u8_,
    pub mail: u8_,
    pub hp: u16_,
    pub maxHP: u16_,
    pub attack: u16_,
    pub defense: u16_,
    pub speed: u16_,
    pub spAttack: u16_,
    pub spDefense: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Pokemon"][::core::mem::size_of::<Pokemon>() - 100usize];
    ["Alignment of Pokemon"][::core::mem::align_of::<Pokemon>() - 4usize];
    ["Offset of field: Pokemon::box_"][::core::mem::offset_of!(Pokemon, box_) - 0usize];
    ["Offset of field: Pokemon::status"][::core::mem::offset_of!(Pokemon, status) - 80usize];
    ["Offset of field: Pokemon::level"][::core::mem::offset_of!(Pokemon, level) - 84usize];
    ["Offset of field: Pokemon::mail"][::core::mem::offset_of!(Pokemon, mail) - 85usize];
    ["Offset of field: Pokemon::hp"][::core::mem::offset_of!(Pokemon, hp) - 86usize];
    ["Offset of field: Pokemon::maxHP"][::core::mem::offset_of!(Pokemon, maxHP) - 88usize];
    ["Offset of field: Pokemon::attack"][::core::mem::offset_of!(Pokemon, attack) - 90usize];
    ["Offset of field: Pokemon::defense"][::core::mem::offset_of!(Pokemon, defense) - 92usize];
    ["Offset of field: Pokemon::speed"][::core::mem::offset_of!(Pokemon, speed) - 94usize];
    ["Offset of field: Pokemon::spAttack"][::core::mem::offset_of!(Pokemon, spAttack) - 96usize];
    ["Offset of field: Pokemon::spDefense"][::core::mem::offset_of!(Pokemon, spDefense) - 98usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MonSpritesGfxManager {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub spriteBuffer: *mut ::core::ffi::c_void,
    pub spritePointers: *mut *mut u8_,
    pub templates: *mut SpriteTemplate,
    pub frameImages: *mut SpriteFrameImage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MonSpritesGfxManager"][::core::mem::size_of::<MonSpritesGfxManager>() - 20usize];
    ["Alignment of MonSpritesGfxManager"][::core::mem::align_of::<MonSpritesGfxManager>() - 4usize];
    ["Offset of field: MonSpritesGfxManager::spriteBuffer"]
        [::core::mem::offset_of!(MonSpritesGfxManager, spriteBuffer) - 4usize];
    ["Offset of field: MonSpritesGfxManager::spritePointers"]
        [::core::mem::offset_of!(MonSpritesGfxManager, spritePointers) - 8usize];
    ["Offset of field: MonSpritesGfxManager::templates"]
        [::core::mem::offset_of!(MonSpritesGfxManager, templates) - 12usize];
    ["Offset of field: MonSpritesGfxManager::frameImages"]
        [::core::mem::offset_of!(MonSpritesGfxManager, frameImages) - 16usize];
};
impl MonSpritesGfxManager {
    #[inline]
    pub fn numSprites(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_numSprites(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn numSprites_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_numSprites_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn numSprites2(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_numSprites2(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn numSprites2_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_numSprites2_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn numFrames(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_numFrames(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn numFrames_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_numFrames_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn active(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_active(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn active_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_active_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn dataSize(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_dataSize(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn dataSize_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_dataSize_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mode(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_mode(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mode_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_mode_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        numSprites: u32_,
        numSprites2: u32_,
        numFrames: u32_,
        active: u32_,
        dataSize: u32_,
        mode: u32_,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let numSprites: u32 = unsafe { ::core::mem::transmute(numSprites) };
            numSprites as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let numSprites2: u32 = unsafe { ::core::mem::transmute(numSprites2) };
            numSprites2 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let numFrames: u32 = unsafe { ::core::mem::transmute(numFrames) };
            numFrames as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let active: u32 = unsafe { ::core::mem::transmute(active) };
            active as u64
        });
        __bindgen_bitfield_unit.set(24usize, 4u8, {
            let dataSize: u32 = unsafe { ::core::mem::transmute(dataSize) };
            dataSize as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let mode: u32 = unsafe { ::core::mem::transmute(mode) };
            mode as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const MON_SPR_GFX_MODE_NORMAL: _bindgen_ty_14 = 0;
pub const MON_SPR_GFX_MODE_BATTLE: _bindgen_ty_14 = 1;
pub const MON_SPR_GFX_MODE_FULL_PARTY: _bindgen_ty_14 = 2;
pub type _bindgen_ty_14 = ::core::ffi::c_uint;
pub const MON_SPR_GFX_MANAGER_A: _bindgen_ty_15 = 0;
pub const MON_SPR_GFX_MANAGER_B: _bindgen_ty_15 = 1;
pub const MON_SPR_GFX_MANAGERS_COUNT: _bindgen_ty_15 = 2;
pub type _bindgen_ty_15 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BattlePokemon {
    pub species: u16_,
    pub attack: u16_,
    pub defense: u16_,
    pub speed: u16_,
    pub spAttack: u16_,
    pub spDefense: u16_,
    pub moves: [u16_; 4usize],
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub statStages: [s8; 8usize],
    pub ability: u16_,
    pub types: [u8_; 3usize],
    pub pp: [u8_; 4usize],
    pub hp: u16_,
    pub level: u8_,
    pub friendship: u8_,
    pub maxHP: u16_,
    pub item: u16_,
    pub nickname: [u8_; 13usize],
    pub ppBonuses: u8_,
    pub otName: [u8_; 8usize],
    pub experience: u32_,
    pub personality: u32_,
    pub status1: u32_,
    pub status2: u32_,
    pub otId: u32_,
    pub metLevel: u8_,
    pub isShiny: bool8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BattlePokemon"][::core::mem::size_of::<BattlePokemon>() - 96usize];
    ["Alignment of BattlePokemon"][::core::mem::align_of::<BattlePokemon>() - 4usize];
    ["Offset of field: BattlePokemon::species"]
        [::core::mem::offset_of!(BattlePokemon, species) - 0usize];
    ["Offset of field: BattlePokemon::attack"]
        [::core::mem::offset_of!(BattlePokemon, attack) - 2usize];
    ["Offset of field: BattlePokemon::defense"]
        [::core::mem::offset_of!(BattlePokemon, defense) - 4usize];
    ["Offset of field: BattlePokemon::speed"]
        [::core::mem::offset_of!(BattlePokemon, speed) - 6usize];
    ["Offset of field: BattlePokemon::spAttack"]
        [::core::mem::offset_of!(BattlePokemon, spAttack) - 8usize];
    ["Offset of field: BattlePokemon::spDefense"]
        [::core::mem::offset_of!(BattlePokemon, spDefense) - 10usize];
    ["Offset of field: BattlePokemon::moves"]
        [::core::mem::offset_of!(BattlePokemon, moves) - 12usize];
    ["Offset of field: BattlePokemon::statStages"]
        [::core::mem::offset_of!(BattlePokemon, statStages) - 24usize];
    ["Offset of field: BattlePokemon::ability"]
        [::core::mem::offset_of!(BattlePokemon, ability) - 32usize];
    ["Offset of field: BattlePokemon::types"]
        [::core::mem::offset_of!(BattlePokemon, types) - 34usize];
    ["Offset of field: BattlePokemon::pp"][::core::mem::offset_of!(BattlePokemon, pp) - 37usize];
    ["Offset of field: BattlePokemon::hp"][::core::mem::offset_of!(BattlePokemon, hp) - 42usize];
    ["Offset of field: BattlePokemon::level"]
        [::core::mem::offset_of!(BattlePokemon, level) - 44usize];
    ["Offset of field: BattlePokemon::friendship"]
        [::core::mem::offset_of!(BattlePokemon, friendship) - 45usize];
    ["Offset of field: BattlePokemon::maxHP"]
        [::core::mem::offset_of!(BattlePokemon, maxHP) - 46usize];
    ["Offset of field: BattlePokemon::item"]
        [::core::mem::offset_of!(BattlePokemon, item) - 48usize];
    ["Offset of field: BattlePokemon::nickname"]
        [::core::mem::offset_of!(BattlePokemon, nickname) - 50usize];
    ["Offset of field: BattlePokemon::ppBonuses"]
        [::core::mem::offset_of!(BattlePokemon, ppBonuses) - 63usize];
    ["Offset of field: BattlePokemon::otName"]
        [::core::mem::offset_of!(BattlePokemon, otName) - 64usize];
    ["Offset of field: BattlePokemon::experience"]
        [::core::mem::offset_of!(BattlePokemon, experience) - 72usize];
    ["Offset of field: BattlePokemon::personality"]
        [::core::mem::offset_of!(BattlePokemon, personality) - 76usize];
    ["Offset of field: BattlePokemon::status1"]
        [::core::mem::offset_of!(BattlePokemon, status1) - 80usize];
    ["Offset of field: BattlePokemon::status2"]
        [::core::mem::offset_of!(BattlePokemon, status2) - 84usize];
    ["Offset of field: BattlePokemon::otId"]
        [::core::mem::offset_of!(BattlePokemon, otId) - 88usize];
    ["Offset of field: BattlePokemon::metLevel"]
        [::core::mem::offset_of!(BattlePokemon, metLevel) - 92usize];
    ["Offset of field: BattlePokemon::isShiny"]
        [::core::mem::offset_of!(BattlePokemon, isShiny) - 93usize];
};
impl BattlePokemon {
    #[inline]
    pub fn hpIV(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_hpIV(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn hpIV_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_hpIV_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn attackIV(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_attackIV(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn attackIV_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_attackIV_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn defenseIV(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_defenseIV(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn defenseIV_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_defenseIV_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn speedIV(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_speedIV(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn speedIV_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_speedIV_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn spAttackIV(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_spAttackIV(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn spAttackIV_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_spAttackIV_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn spDefenseIV(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_spDefenseIV(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn spDefenseIV_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                25usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_spDefenseIV_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                25usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn abilityNum(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_abilityNum(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn abilityNum_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                30usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_abilityNum_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                30usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        hpIV: u32_,
        attackIV: u32_,
        defenseIV: u32_,
        speedIV: u32_,
        spAttackIV: u32_,
        spDefenseIV: u32_,
        abilityNum: u32_,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let hpIV: u32 = unsafe { ::core::mem::transmute(hpIV) };
            hpIV as u64
        });
        __bindgen_bitfield_unit.set(5usize, 5u8, {
            let attackIV: u32 = unsafe { ::core::mem::transmute(attackIV) };
            attackIV as u64
        });
        __bindgen_bitfield_unit.set(10usize, 5u8, {
            let defenseIV: u32 = unsafe { ::core::mem::transmute(defenseIV) };
            defenseIV as u64
        });
        __bindgen_bitfield_unit.set(15usize, 5u8, {
            let speedIV: u32 = unsafe { ::core::mem::transmute(speedIV) };
            speedIV as u64
        });
        __bindgen_bitfield_unit.set(20usize, 5u8, {
            let spAttackIV: u32 = unsafe { ::core::mem::transmute(spAttackIV) };
            spAttackIV as u64
        });
        __bindgen_bitfield_unit.set(25usize, 5u8, {
            let spDefenseIV: u32 = unsafe { ::core::mem::transmute(spDefenseIV) };
            spDefenseIV as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let abilityNum: u32 = unsafe { ::core::mem::transmute(abilityNum) };
            abilityNum as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Evolution {
    pub method: u16_,
    pub param: u16_,
    pub targetSpecies: u16_,
    pub level: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Evolution"][::core::mem::size_of::<Evolution>() - 8usize];
    ["Alignment of Evolution"][::core::mem::align_of::<Evolution>() - 2usize];
    ["Offset of field: Evolution::method"][::core::mem::offset_of!(Evolution, method) - 0usize];
    ["Offset of field: Evolution::param"][::core::mem::offset_of!(Evolution, param) - 2usize];
    ["Offset of field: Evolution::targetSpecies"]
        [::core::mem::offset_of!(Evolution, targetSpecies) - 4usize];
    ["Offset of field: Evolution::level"][::core::mem::offset_of!(Evolution, level) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpeciesInfo {
    pub baseHP: u8_,
    pub baseAttack: u8_,
    pub baseDefense: u8_,
    pub baseSpeed: u8_,
    pub baseSpAttack: u8_,
    pub baseSpDefense: u8_,
    pub types: [u8_; 2usize],
    pub catchRate: u8_,
    pub forceTeraType: u8_,
    pub expYield: u16_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub itemCommon: u16_,
    pub itemRare: u16_,
    pub genderRatio: u8_,
    pub eggCycles: u8_,
    pub friendship: u8_,
    pub growthRate: u8_,
    pub eggGroups: [u8_; 2usize],
    pub abilities: [u16_; 3usize],
    pub safariZoneFleeRate: u8_,
    pub categoryName: [u8_; 13usize],
    pub speciesName: [u8_; 13usize],
    pub cryId: u16_,
    pub natDexNum: u16_,
    pub height: u16_,
    pub weight: u16_,
    pub pokemonScale: u16_,
    pub pokemonOffset: u16_,
    pub trainerScale: u16_,
    pub trainerOffset: u16_,
    pub description: *const u8_,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub frontAnimDelay: u8_,
    pub frontAnimId: u8_,
    pub backAnimId: u8_,
    pub frontAnimFrames: *const *const AnimCmd,
    pub frontPic: *const u32_,
    pub backPic: *const u32_,
    pub palette: *const u32_,
    pub shinyPalette: *const u32_,
    pub iconSprite: *const u8_,
    pub frontPicFemale: *const u32_,
    pub backPicFemale: *const u32_,
    pub paletteFemale: *const u32_,
    pub shinyPaletteFemale: *const u32_,
    pub iconSpriteFemale: *const u8_,
    pub footprint: *const u8_,
    pub frontPicSize: u8_,
    pub frontPicYOffset: u8_,
    pub backPicSize: u8_,
    pub backPicYOffset: u8_,
    pub frontPicSizeFemale: u8_,
    pub backPicSizeFemale: u8_,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub enemyMonElevation: u8_,
    pub _bitfield_align_4: [u16; 0],
    pub _bitfield_4: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub enemyShadowXOffset: s8,
    pub enemyShadowYOffset: s8,
    pub _bitfield_align_5: [u16; 0],
    pub _bitfield_5: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub levelUpLearnset: *const LevelUpMove,
    pub teachableLearnset: *const u16_,
    pub eggMoveLearnset: *const u16_,
    pub evolutions: *const Evolution,
    pub formSpeciesIdTable: *const u16_,
    pub formChangeTable: *const FormChange,
    pub overworldData: ObjectEventGraphicsInfo,
    pub overworldDataFemale: ObjectEventGraphicsInfo,
    pub overworldPalette: *const ::core::ffi::c_void,
    pub overworldShinyPalette: *const ::core::ffi::c_void,
    pub overworldPaletteFemale: *const ::core::ffi::c_void,
    pub overworldShinyPaletteFemale: *const ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SpeciesInfo"][::core::mem::size_of::<SpeciesInfo>() - 260usize];
    ["Alignment of SpeciesInfo"][::core::mem::align_of::<SpeciesInfo>() - 4usize];
    ["Offset of field: SpeciesInfo::baseHP"][::core::mem::offset_of!(SpeciesInfo, baseHP) - 0usize];
    ["Offset of field: SpeciesInfo::baseAttack"]
        [::core::mem::offset_of!(SpeciesInfo, baseAttack) - 1usize];
    ["Offset of field: SpeciesInfo::baseDefense"]
        [::core::mem::offset_of!(SpeciesInfo, baseDefense) - 2usize];
    ["Offset of field: SpeciesInfo::baseSpeed"]
        [::core::mem::offset_of!(SpeciesInfo, baseSpeed) - 3usize];
    ["Offset of field: SpeciesInfo::baseSpAttack"]
        [::core::mem::offset_of!(SpeciesInfo, baseSpAttack) - 4usize];
    ["Offset of field: SpeciesInfo::baseSpDefense"]
        [::core::mem::offset_of!(SpeciesInfo, baseSpDefense) - 5usize];
    ["Offset of field: SpeciesInfo::types"][::core::mem::offset_of!(SpeciesInfo, types) - 6usize];
    ["Offset of field: SpeciesInfo::catchRate"]
        [::core::mem::offset_of!(SpeciesInfo, catchRate) - 8usize];
    ["Offset of field: SpeciesInfo::forceTeraType"]
        [::core::mem::offset_of!(SpeciesInfo, forceTeraType) - 9usize];
    ["Offset of field: SpeciesInfo::expYield"]
        [::core::mem::offset_of!(SpeciesInfo, expYield) - 10usize];
    ["Offset of field: SpeciesInfo::itemCommon"]
        [::core::mem::offset_of!(SpeciesInfo, itemCommon) - 14usize];
    ["Offset of field: SpeciesInfo::itemRare"]
        [::core::mem::offset_of!(SpeciesInfo, itemRare) - 16usize];
    ["Offset of field: SpeciesInfo::genderRatio"]
        [::core::mem::offset_of!(SpeciesInfo, genderRatio) - 18usize];
    ["Offset of field: SpeciesInfo::eggCycles"]
        [::core::mem::offset_of!(SpeciesInfo, eggCycles) - 19usize];
    ["Offset of field: SpeciesInfo::friendship"]
        [::core::mem::offset_of!(SpeciesInfo, friendship) - 20usize];
    ["Offset of field: SpeciesInfo::growthRate"]
        [::core::mem::offset_of!(SpeciesInfo, growthRate) - 21usize];
    ["Offset of field: SpeciesInfo::eggGroups"]
        [::core::mem::offset_of!(SpeciesInfo, eggGroups) - 22usize];
    ["Offset of field: SpeciesInfo::abilities"]
        [::core::mem::offset_of!(SpeciesInfo, abilities) - 24usize];
    ["Offset of field: SpeciesInfo::safariZoneFleeRate"]
        [::core::mem::offset_of!(SpeciesInfo, safariZoneFleeRate) - 30usize];
    ["Offset of field: SpeciesInfo::categoryName"]
        [::core::mem::offset_of!(SpeciesInfo, categoryName) - 31usize];
    ["Offset of field: SpeciesInfo::speciesName"]
        [::core::mem::offset_of!(SpeciesInfo, speciesName) - 44usize];
    ["Offset of field: SpeciesInfo::cryId"][::core::mem::offset_of!(SpeciesInfo, cryId) - 58usize];
    ["Offset of field: SpeciesInfo::natDexNum"]
        [::core::mem::offset_of!(SpeciesInfo, natDexNum) - 60usize];
    ["Offset of field: SpeciesInfo::height"]
        [::core::mem::offset_of!(SpeciesInfo, height) - 62usize];
    ["Offset of field: SpeciesInfo::weight"]
        [::core::mem::offset_of!(SpeciesInfo, weight) - 64usize];
    ["Offset of field: SpeciesInfo::pokemonScale"]
        [::core::mem::offset_of!(SpeciesInfo, pokemonScale) - 66usize];
    ["Offset of field: SpeciesInfo::pokemonOffset"]
        [::core::mem::offset_of!(SpeciesInfo, pokemonOffset) - 68usize];
    ["Offset of field: SpeciesInfo::trainerScale"]
        [::core::mem::offset_of!(SpeciesInfo, trainerScale) - 70usize];
    ["Offset of field: SpeciesInfo::trainerOffset"]
        [::core::mem::offset_of!(SpeciesInfo, trainerOffset) - 72usize];
    ["Offset of field: SpeciesInfo::description"]
        [::core::mem::offset_of!(SpeciesInfo, description) - 76usize];
    ["Offset of field: SpeciesInfo::frontAnimDelay"]
        [::core::mem::offset_of!(SpeciesInfo, frontAnimDelay) - 81usize];
    ["Offset of field: SpeciesInfo::frontAnimId"]
        [::core::mem::offset_of!(SpeciesInfo, frontAnimId) - 82usize];
    ["Offset of field: SpeciesInfo::backAnimId"]
        [::core::mem::offset_of!(SpeciesInfo, backAnimId) - 83usize];
    ["Offset of field: SpeciesInfo::frontAnimFrames"]
        [::core::mem::offset_of!(SpeciesInfo, frontAnimFrames) - 84usize];
    ["Offset of field: SpeciesInfo::frontPic"]
        [::core::mem::offset_of!(SpeciesInfo, frontPic) - 88usize];
    ["Offset of field: SpeciesInfo::backPic"]
        [::core::mem::offset_of!(SpeciesInfo, backPic) - 92usize];
    ["Offset of field: SpeciesInfo::palette"]
        [::core::mem::offset_of!(SpeciesInfo, palette) - 96usize];
    ["Offset of field: SpeciesInfo::shinyPalette"]
        [::core::mem::offset_of!(SpeciesInfo, shinyPalette) - 100usize];
    ["Offset of field: SpeciesInfo::iconSprite"]
        [::core::mem::offset_of!(SpeciesInfo, iconSprite) - 104usize];
    ["Offset of field: SpeciesInfo::frontPicFemale"]
        [::core::mem::offset_of!(SpeciesInfo, frontPicFemale) - 108usize];
    ["Offset of field: SpeciesInfo::backPicFemale"]
        [::core::mem::offset_of!(SpeciesInfo, backPicFemale) - 112usize];
    ["Offset of field: SpeciesInfo::paletteFemale"]
        [::core::mem::offset_of!(SpeciesInfo, paletteFemale) - 116usize];
    ["Offset of field: SpeciesInfo::shinyPaletteFemale"]
        [::core::mem::offset_of!(SpeciesInfo, shinyPaletteFemale) - 120usize];
    ["Offset of field: SpeciesInfo::iconSpriteFemale"]
        [::core::mem::offset_of!(SpeciesInfo, iconSpriteFemale) - 124usize];
    ["Offset of field: SpeciesInfo::footprint"]
        [::core::mem::offset_of!(SpeciesInfo, footprint) - 128usize];
    ["Offset of field: SpeciesInfo::frontPicSize"]
        [::core::mem::offset_of!(SpeciesInfo, frontPicSize) - 132usize];
    ["Offset of field: SpeciesInfo::frontPicYOffset"]
        [::core::mem::offset_of!(SpeciesInfo, frontPicYOffset) - 133usize];
    ["Offset of field: SpeciesInfo::backPicSize"]
        [::core::mem::offset_of!(SpeciesInfo, backPicSize) - 134usize];
    ["Offset of field: SpeciesInfo::backPicYOffset"]
        [::core::mem::offset_of!(SpeciesInfo, backPicYOffset) - 135usize];
    ["Offset of field: SpeciesInfo::frontPicSizeFemale"]
        [::core::mem::offset_of!(SpeciesInfo, frontPicSizeFemale) - 136usize];
    ["Offset of field: SpeciesInfo::backPicSizeFemale"]
        [::core::mem::offset_of!(SpeciesInfo, backPicSizeFemale) - 137usize];
    ["Offset of field: SpeciesInfo::enemyMonElevation"]
        [::core::mem::offset_of!(SpeciesInfo, enemyMonElevation) - 139usize];
    ["Offset of field: SpeciesInfo::enemyShadowXOffset"]
        [::core::mem::offset_of!(SpeciesInfo, enemyShadowXOffset) - 144usize];
    ["Offset of field: SpeciesInfo::enemyShadowYOffset"]
        [::core::mem::offset_of!(SpeciesInfo, enemyShadowYOffset) - 145usize];
    ["Offset of field: SpeciesInfo::levelUpLearnset"]
        [::core::mem::offset_of!(SpeciesInfo, levelUpLearnset) - 148usize];
    ["Offset of field: SpeciesInfo::teachableLearnset"]
        [::core::mem::offset_of!(SpeciesInfo, teachableLearnset) - 152usize];
    ["Offset of field: SpeciesInfo::eggMoveLearnset"]
        [::core::mem::offset_of!(SpeciesInfo, eggMoveLearnset) - 156usize];
    ["Offset of field: SpeciesInfo::evolutions"]
        [::core::mem::offset_of!(SpeciesInfo, evolutions) - 160usize];
    ["Offset of field: SpeciesInfo::formSpeciesIdTable"]
        [::core::mem::offset_of!(SpeciesInfo, formSpeciesIdTable) - 164usize];
    ["Offset of field: SpeciesInfo::formChangeTable"]
        [::core::mem::offset_of!(SpeciesInfo, formChangeTable) - 168usize];
    ["Offset of field: SpeciesInfo::overworldData"]
        [::core::mem::offset_of!(SpeciesInfo, overworldData) - 172usize];
    ["Offset of field: SpeciesInfo::overworldDataFemale"]
        [::core::mem::offset_of!(SpeciesInfo, overworldDataFemale) - 208usize];
    ["Offset of field: SpeciesInfo::overworldPalette"]
        [::core::mem::offset_of!(SpeciesInfo, overworldPalette) - 244usize];
    ["Offset of field: SpeciesInfo::overworldShinyPalette"]
        [::core::mem::offset_of!(SpeciesInfo, overworldShinyPalette) - 248usize];
    ["Offset of field: SpeciesInfo::overworldPaletteFemale"]
        [::core::mem::offset_of!(SpeciesInfo, overworldPaletteFemale) - 252usize];
    ["Offset of field: SpeciesInfo::overworldShinyPaletteFemale"]
        [::core::mem::offset_of!(SpeciesInfo, overworldShinyPaletteFemale) - 256usize];
};
impl SpeciesInfo {
    #[inline]
    pub fn evYield_HP(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_evYield_HP(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn evYield_HP_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_evYield_HP_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn evYield_Attack(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_evYield_Attack(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn evYield_Attack_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_evYield_Attack_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn evYield_Defense(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_evYield_Defense(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn evYield_Defense_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_evYield_Defense_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn evYield_Speed(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_evYield_Speed(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn evYield_Speed_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_evYield_Speed_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn evYield_SpAttack(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_evYield_SpAttack(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn evYield_SpAttack_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_evYield_SpAttack_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn evYield_SpDefense(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_evYield_SpDefense(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn evYield_SpDefense_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_evYield_SpDefense_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn padding2(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_padding2(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn padding2_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                4u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_padding2_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        evYield_HP: u16_,
        evYield_Attack: u16_,
        evYield_Defense: u16_,
        evYield_Speed: u16_,
        evYield_SpAttack: u16_,
        evYield_SpDefense: u16_,
        padding2: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let evYield_HP: u16 = unsafe { ::core::mem::transmute(evYield_HP) };
            evYield_HP as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let evYield_Attack: u16 = unsafe { ::core::mem::transmute(evYield_Attack) };
            evYield_Attack as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let evYield_Defense: u16 = unsafe { ::core::mem::transmute(evYield_Defense) };
            evYield_Defense as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let evYield_Speed: u16 = unsafe { ::core::mem::transmute(evYield_Speed) };
            evYield_Speed as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let evYield_SpAttack: u16 = unsafe { ::core::mem::transmute(evYield_SpAttack) };
            evYield_SpAttack as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let evYield_SpDefense: u16 = unsafe { ::core::mem::transmute(evYield_SpDefense) };
            evYield_SpDefense as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let padding2: u16 = unsafe { ::core::mem::transmute(padding2) };
            padding2 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn bodyColor(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(0usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_bodyColor(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bodyColor_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_bodyColor_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn noFlip(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_noFlip(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn noFlip_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                7usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_noFlip_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(bodyColor: u8_, noFlip: u8_) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let bodyColor: u8 = unsafe { ::core::mem::transmute(bodyColor) };
            bodyColor as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let noFlip: u8 = unsafe { ::core::mem::transmute(noFlip) };
            noFlip as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn iconPalIndex(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_iconPalIndex(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn iconPalIndex_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_iconPalIndex_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn iconPalIndexFemale(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(3usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_iconPalIndexFemale(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn iconPalIndexFemale_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_3),
                3usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_iconPalIndexFemale_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_3),
                3usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn padding3(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_padding3(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn padding3_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_3),
                6usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_padding3_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_3),
                6usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        iconPalIndex: u8_,
        iconPalIndexFemale: u8_,
        padding3: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let iconPalIndex: u8 = unsafe { ::core::mem::transmute(iconPalIndex) };
            iconPalIndex as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let iconPalIndexFemale: u8 = unsafe { ::core::mem::transmute(iconPalIndexFemale) };
            iconPalIndexFemale as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let padding3: u8 = unsafe { ::core::mem::transmute(padding3) };
            padding3 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn isLegendary(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isLegendary(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_4.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isLegendary_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_isLegendary_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn isMythical(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isMythical(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_4.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isMythical_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_isMythical_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn isUltraBeast(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isUltraBeast(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_4.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isUltraBeast_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_isUltraBeast_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn isParadox(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isParadox(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_4.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isParadox_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_isParadox_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn isTotem(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isTotem(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_4.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isTotem_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_isTotem_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn isMegaEvolution(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isMegaEvolution(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_4.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isMegaEvolution_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_isMegaEvolution_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn isPrimalReversion(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isPrimalReversion(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_4.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isPrimalReversion_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_isPrimalReversion_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn isUltraBurst(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isUltraBurst(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_4.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isUltraBurst_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_isUltraBurst_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn isGigantamax(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isGigantamax(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_4.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isGigantamax_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_isGigantamax_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn isTeraForm(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isTeraForm(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_4.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isTeraForm_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_isTeraForm_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn isAlolanForm(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isAlolanForm(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_4.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isAlolanForm_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_isAlolanForm_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn isGalarianForm(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isGalarianForm(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_4.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isGalarianForm_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_isGalarianForm_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn isHisuianForm(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isHisuianForm(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_4.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isHisuianForm_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_isHisuianForm_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn isPaldeanForm(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isPaldeanForm(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_4.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isPaldeanForm_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_isPaldeanForm_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cannotBeTraded(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cannotBeTraded(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_4.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cannotBeTraded_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_cannotBeTraded_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn perfectIVCount(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(15usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_perfectIVCount(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_4.set(15usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn perfectIVCount_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                15usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_perfectIVCount_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                15usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn dexForceRequired(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dexForceRequired(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_4.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn dexForceRequired_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                18usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_dexForceRequired_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                18usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tmIlliterate(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tmIlliterate(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_4.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tmIlliterate_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                19usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tmIlliterate_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                19usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn isFrontierBanned(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isFrontierBanned(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_4.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isFrontierBanned_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                20usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_isFrontierBanned_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                20usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn padding4(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_padding4(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_4.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn padding4_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                21usize,
                11u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_padding4_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                21usize,
                11u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_4(
        isLegendary: u32_,
        isMythical: u32_,
        isUltraBeast: u32_,
        isParadox: u32_,
        isTotem: u32_,
        isMegaEvolution: u32_,
        isPrimalReversion: u32_,
        isUltraBurst: u32_,
        isGigantamax: u32_,
        isTeraForm: u32_,
        isAlolanForm: u32_,
        isGalarianForm: u32_,
        isHisuianForm: u32_,
        isPaldeanForm: u32_,
        cannotBeTraded: u32_,
        perfectIVCount: u32_,
        dexForceRequired: u32_,
        tmIlliterate: u32_,
        isFrontierBanned: u32_,
        padding4: u32_,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let isLegendary: u32 = unsafe { ::core::mem::transmute(isLegendary) };
            isLegendary as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let isMythical: u32 = unsafe { ::core::mem::transmute(isMythical) };
            isMythical as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let isUltraBeast: u32 = unsafe { ::core::mem::transmute(isUltraBeast) };
            isUltraBeast as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let isParadox: u32 = unsafe { ::core::mem::transmute(isParadox) };
            isParadox as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let isTotem: u32 = unsafe { ::core::mem::transmute(isTotem) };
            isTotem as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let isMegaEvolution: u32 = unsafe { ::core::mem::transmute(isMegaEvolution) };
            isMegaEvolution as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let isPrimalReversion: u32 = unsafe { ::core::mem::transmute(isPrimalReversion) };
            isPrimalReversion as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let isUltraBurst: u32 = unsafe { ::core::mem::transmute(isUltraBurst) };
            isUltraBurst as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let isGigantamax: u32 = unsafe { ::core::mem::transmute(isGigantamax) };
            isGigantamax as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let isTeraForm: u32 = unsafe { ::core::mem::transmute(isTeraForm) };
            isTeraForm as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let isAlolanForm: u32 = unsafe { ::core::mem::transmute(isAlolanForm) };
            isAlolanForm as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let isGalarianForm: u32 = unsafe { ::core::mem::transmute(isGalarianForm) };
            isGalarianForm as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let isHisuianForm: u32 = unsafe { ::core::mem::transmute(isHisuianForm) };
            isHisuianForm as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let isPaldeanForm: u32 = unsafe { ::core::mem::transmute(isPaldeanForm) };
            isPaldeanForm as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let cannotBeTraded: u32 = unsafe { ::core::mem::transmute(cannotBeTraded) };
            cannotBeTraded as u64
        });
        __bindgen_bitfield_unit.set(15usize, 3u8, {
            let perfectIVCount: u32 = unsafe { ::core::mem::transmute(perfectIVCount) };
            perfectIVCount as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let dexForceRequired: u32 = unsafe { ::core::mem::transmute(dexForceRequired) };
            dexForceRequired as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let tmIlliterate: u32 = unsafe { ::core::mem::transmute(tmIlliterate) };
            tmIlliterate as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let isFrontierBanned: u32 = unsafe { ::core::mem::transmute(isFrontierBanned) };
            isFrontierBanned as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let padding4: u32 = unsafe { ::core::mem::transmute(padding4) };
            padding4 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn enemyShadowSize(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_5.get(0usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_enemyShadowSize(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_5.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enemyShadowSize_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_5),
                0usize,
                3u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_enemyShadowSize_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_5),
                0usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn suppressEnemyShadow(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_5.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_suppressEnemyShadow(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_5.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn suppressEnemyShadow_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_5),
                3usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_suppressEnemyShadow_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_5),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn padding5(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_5.get(4usize, 12u8) as u16) }
    }
    #[inline]
    pub fn set_padding5(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_5.set(4usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn padding5_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_5),
                4usize,
                12u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_padding5_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_5),
                4usize,
                12u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_5(
        enemyShadowSize: u16_,
        suppressEnemyShadow: u16_,
        padding5: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let enemyShadowSize: u16 = unsafe { ::core::mem::transmute(enemyShadowSize) };
            enemyShadowSize as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let suppressEnemyShadow: u16 = unsafe { ::core::mem::transmute(suppressEnemyShadow) };
            suppressEnemyShadow as u64
        });
        __bindgen_bitfield_unit.set(4usize, 12u8, {
            let padding5: u16 = unsafe { ::core::mem::transmute(padding5) };
            padding5 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MoveInfo {
    pub name: *const u8_,
    pub description: *const u8_,
    pub effect: u16_,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub pp: u8_,
    pub zMove: MoveInfo__bindgen_ty_1,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 9usize]>,
    pub argument: u32_,
    pub additionalEffects: *const AdditionalEffect,
    pub contestEffect: u8_,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub contestComboStarterId: u8_,
    pub contestComboMoves: [u8_; 5usize],
    pub battleAnimScript: *const u8_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MoveInfo__bindgen_ty_1 {
    pub effect: u8_,
    pub powerOverride: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MoveInfo__bindgen_ty_1"][::core::mem::size_of::<MoveInfo__bindgen_ty_1>() - 1usize];
    ["Alignment of MoveInfo__bindgen_ty_1"]
        [::core::mem::align_of::<MoveInfo__bindgen_ty_1>() - 1usize];
    ["Offset of field: MoveInfo__bindgen_ty_1::effect"]
        [::core::mem::offset_of!(MoveInfo__bindgen_ty_1, effect) - 0usize];
    ["Offset of field: MoveInfo__bindgen_ty_1::powerOverride"]
        [::core::mem::offset_of!(MoveInfo__bindgen_ty_1, powerOverride) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MoveInfo"][::core::mem::size_of::<MoveInfo>() - 48usize];
    ["Alignment of MoveInfo"][::core::mem::align_of::<MoveInfo>() - 4usize];
    ["Offset of field: MoveInfo::name"][::core::mem::offset_of!(MoveInfo, name) - 0usize];
    ["Offset of field: MoveInfo::description"]
        [::core::mem::offset_of!(MoveInfo, description) - 4usize];
    ["Offset of field: MoveInfo::effect"][::core::mem::offset_of!(MoveInfo, effect) - 8usize];
    ["Offset of field: MoveInfo::pp"][::core::mem::offset_of!(MoveInfo, pp) - 14usize];
    ["Offset of field: MoveInfo::zMove"][::core::mem::offset_of!(MoveInfo, zMove) - 15usize];
    ["Offset of field: MoveInfo::argument"][::core::mem::offset_of!(MoveInfo, argument) - 28usize];
    ["Offset of field: MoveInfo::additionalEffects"]
        [::core::mem::offset_of!(MoveInfo, additionalEffects) - 32usize];
    ["Offset of field: MoveInfo::contestEffect"]
        [::core::mem::offset_of!(MoveInfo, contestEffect) - 36usize];
    ["Offset of field: MoveInfo::contestComboStarterId"]
        [::core::mem::offset_of!(MoveInfo, contestComboStarterId) - 38usize];
    ["Offset of field: MoveInfo::contestComboMoves"]
        [::core::mem::offset_of!(MoveInfo, contestComboMoves) - 39usize];
    ["Offset of field: MoveInfo::battleAnimScript"]
        [::core::mem::offset_of!(MoveInfo, battleAnimScript) - 44usize];
};
impl MoveInfo {
    #[inline]
    pub fn type_(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                5u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn category(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_category(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn category_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_category_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn power(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 9u8) as u16) }
    }
    #[inline]
    pub fn set_power(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn power_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                9u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_power_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                9u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn accuracy(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 7u8) as u16) }
    }
    #[inline]
    pub fn set_accuracy(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn accuracy_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                7u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_accuracy_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn target(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 9u8) as u16) }
    }
    #[inline]
    pub fn set_target(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn target_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                23usize,
                9u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_target_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                23usize,
                9u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: u16_,
        category: u16_,
        power: u16_,
        accuracy: u16_,
        target: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let type_: u16 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let category: u16 = unsafe { ::core::mem::transmute(category) };
            category as u64
        });
        __bindgen_bitfield_unit.set(7usize, 9u8, {
            let power: u16 = unsafe { ::core::mem::transmute(power) };
            power as u64
        });
        __bindgen_bitfield_unit.set(16usize, 7u8, {
            let accuracy: u16 = unsafe { ::core::mem::transmute(accuracy) };
            accuracy as u64
        });
        __bindgen_bitfield_unit.set(23usize, 9u8, {
            let target: u16 = unsafe { ::core::mem::transmute(target) };
            target as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn priority(&self) -> s32 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_priority(&mut self, val: s32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn priority_raw(this: *const Self) -> s32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_priority_raw(this: *mut Self, val: s32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn recoil(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(4usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_recoil(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(4usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn recoil_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                4usize,
                7u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_recoil_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                4usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn strikeCount(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(11usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_strikeCount(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(11usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn strikeCount_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                11usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_strikeCount_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                11usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn criticalHitStage(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(15usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_criticalHitStage(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(15usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn criticalHitStage_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                15usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_criticalHitStage_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                15usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn alwaysCriticalHit(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_alwaysCriticalHit(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn alwaysCriticalHit_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                17usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_alwaysCriticalHit_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                17usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn numAdditionalEffects(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(18usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_numAdditionalEffects(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(18usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn numAdditionalEffects_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                18usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_numAdditionalEffects_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                18usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn makesContact(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_makesContact(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn makesContact_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                21usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_makesContact_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                21usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ignoresProtect(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ignoresProtect(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ignoresProtect_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                22usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ignoresProtect_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                22usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn magicCoatAffected(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_magicCoatAffected(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn magicCoatAffected_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                23usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_magicCoatAffected_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                23usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn snatchAffected(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_snatchAffected(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn snatchAffected_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                24usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_snatchAffected_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                24usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ignoresKingsRock(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ignoresKingsRock(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ignoresKingsRock_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                25usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ignoresKingsRock_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                25usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn punchingMove(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_punchingMove(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn punchingMove_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                26usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_punchingMove_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                26usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bitingMove(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitingMove(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bitingMove_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                27usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_bitingMove_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                27usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pulseMove(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pulseMove(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pulseMove_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                28usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pulseMove_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                28usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn soundMove(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_soundMove(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn soundMove_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                29usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_soundMove_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                29usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ballisticMove(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ballisticMove(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ballisticMove_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                30usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ballisticMove_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                30usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn powderMove(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_powderMove(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn powderMove_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                31usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_powderMove_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                31usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn danceMove(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_danceMove(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn danceMove_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                32usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_danceMove_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                32usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn windMove(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_windMove(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn windMove_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                33usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_windMove_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                33usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn slicingMove(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slicingMove(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn slicingMove_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                34usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_slicingMove_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                34usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn healingMove(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(35usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_healingMove(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(35usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn healingMove_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                35usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_healingMove_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                35usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn minimizeDoubleDamage(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(36usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_minimizeDoubleDamage(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(36usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn minimizeDoubleDamage_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                36usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_minimizeDoubleDamage_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                36usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ignoresTargetAbility(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(37usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ignoresTargetAbility(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(37usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ignoresTargetAbility_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                37usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ignoresTargetAbility_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                37usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ignoresTargetDefenseEvasionStages(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(38usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ignoresTargetDefenseEvasionStages(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(38usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ignoresTargetDefenseEvasionStages_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                38usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ignoresTargetDefenseEvasionStages_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                38usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn damagesUnderground(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(39usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_damagesUnderground(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(39usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn damagesUnderground_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                39usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_damagesUnderground_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                39usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn damagesUnderwater(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(40usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_damagesUnderwater(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(40usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn damagesUnderwater_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                40usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_damagesUnderwater_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                40usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn damagesAirborne(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(41usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_damagesAirborne(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(41usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn damagesAirborne_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                41usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_damagesAirborne_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                41usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn damagesAirborneDoubleDamage(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(42usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_damagesAirborneDoubleDamage(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(42usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn damagesAirborneDoubleDamage_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                42usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_damagesAirborneDoubleDamage_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                42usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ignoreTypeIfFlyingAndUngrounded(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(43usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ignoreTypeIfFlyingAndUngrounded(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(43usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ignoreTypeIfFlyingAndUngrounded_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                43usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ignoreTypeIfFlyingAndUngrounded_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                43usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn thawsUser(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(44usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_thawsUser(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(44usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn thawsUser_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                44usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_thawsUser_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                44usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ignoresSubstitute(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(45usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ignoresSubstitute(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(45usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ignoresSubstitute_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                45usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ignoresSubstitute_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                45usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn forcePressure(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(46usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_forcePressure(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(46usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn forcePressure_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                46usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_forcePressure_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                46usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cantUseTwice(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(47usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cantUseTwice(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(47usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cantUseTwice_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                47usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_cantUseTwice_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                47usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn gravityBanned(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(48usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_gravityBanned(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(48usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn gravityBanned_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                48usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_gravityBanned_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                48usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mirrorMoveBanned(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(49usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mirrorMoveBanned(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(49usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mirrorMoveBanned_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                49usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_mirrorMoveBanned_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                49usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn meFirstBanned(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(50usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_meFirstBanned(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(50usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn meFirstBanned_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                50usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_meFirstBanned_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                50usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mimicBanned(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(51usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mimicBanned(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(51usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mimicBanned_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                51usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_mimicBanned_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                51usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn metronomeBanned(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(52usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_metronomeBanned(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(52usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn metronomeBanned_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                52usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_metronomeBanned_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                52usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn copycatBanned(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(53usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_copycatBanned(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(53usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn copycatBanned_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                53usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_copycatBanned_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                53usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn assistBanned(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(54usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_assistBanned(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(54usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn assistBanned_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                54usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_assistBanned_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                54usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sleepTalkBanned(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(55usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sleepTalkBanned(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(55usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sleepTalkBanned_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                55usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sleepTalkBanned_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                55usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn instructBanned(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(56usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_instructBanned(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(56usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn instructBanned_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                56usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_instructBanned_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                56usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn encoreBanned(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(57usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_encoreBanned(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(57usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn encoreBanned_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                57usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_encoreBanned_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                57usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn parentalBondBanned(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(58usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_parentalBondBanned(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(58usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn parentalBondBanned_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                58usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_parentalBondBanned_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                58usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn skyBattleBanned(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(59usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_skyBattleBanned(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(59usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn skyBattleBanned_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                59usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_skyBattleBanned_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                59usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sketchBanned(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(60usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sketchBanned(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(60usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sketchBanned_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                60usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sketchBanned_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                60usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn padding(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(64usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_padding(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(64usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn padding_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                64usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_padding_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                64usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        priority: s32,
        recoil: u32_,
        strikeCount: u32_,
        criticalHitStage: u32_,
        alwaysCriticalHit: u32_,
        numAdditionalEffects: u32_,
        makesContact: u32_,
        ignoresProtect: u32_,
        magicCoatAffected: u32_,
        snatchAffected: u32_,
        ignoresKingsRock: u32_,
        punchingMove: u32_,
        bitingMove: u32_,
        pulseMove: u32_,
        soundMove: u32_,
        ballisticMove: u32_,
        powderMove: u32_,
        danceMove: u32_,
        windMove: u32_,
        slicingMove: u32_,
        healingMove: u32_,
        minimizeDoubleDamage: u32_,
        ignoresTargetAbility: u32_,
        ignoresTargetDefenseEvasionStages: u32_,
        damagesUnderground: u32_,
        damagesUnderwater: u32_,
        damagesAirborne: u32_,
        damagesAirborneDoubleDamage: u32_,
        ignoreTypeIfFlyingAndUngrounded: u32_,
        thawsUser: u32_,
        ignoresSubstitute: u32_,
        forcePressure: u32_,
        cantUseTwice: u32_,
        gravityBanned: u32_,
        mirrorMoveBanned: u32_,
        meFirstBanned: u32_,
        mimicBanned: u32_,
        metronomeBanned: u32_,
        copycatBanned: u32_,
        assistBanned: u32_,
        sleepTalkBanned: u32_,
        instructBanned: u32_,
        encoreBanned: u32_,
        parentalBondBanned: u32_,
        skyBattleBanned: u32_,
        sketchBanned: u32_,
        padding: u32_,
    ) -> __BindgenBitfieldUnit<[u8; 9usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 9usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let priority: u32 = unsafe { ::core::mem::transmute(priority) };
            priority as u64
        });
        __bindgen_bitfield_unit.set(4usize, 7u8, {
            let recoil: u32 = unsafe { ::core::mem::transmute(recoil) };
            recoil as u64
        });
        __bindgen_bitfield_unit.set(11usize, 4u8, {
            let strikeCount: u32 = unsafe { ::core::mem::transmute(strikeCount) };
            strikeCount as u64
        });
        __bindgen_bitfield_unit.set(15usize, 2u8, {
            let criticalHitStage: u32 = unsafe { ::core::mem::transmute(criticalHitStage) };
            criticalHitStage as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let alwaysCriticalHit: u32 = unsafe { ::core::mem::transmute(alwaysCriticalHit) };
            alwaysCriticalHit as u64
        });
        __bindgen_bitfield_unit.set(18usize, 3u8, {
            let numAdditionalEffects: u32 = unsafe { ::core::mem::transmute(numAdditionalEffects) };
            numAdditionalEffects as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let makesContact: u32 = unsafe { ::core::mem::transmute(makesContact) };
            makesContact as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let ignoresProtect: u32 = unsafe { ::core::mem::transmute(ignoresProtect) };
            ignoresProtect as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let magicCoatAffected: u32 = unsafe { ::core::mem::transmute(magicCoatAffected) };
            magicCoatAffected as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let snatchAffected: u32 = unsafe { ::core::mem::transmute(snatchAffected) };
            snatchAffected as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let ignoresKingsRock: u32 = unsafe { ::core::mem::transmute(ignoresKingsRock) };
            ignoresKingsRock as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let punchingMove: u32 = unsafe { ::core::mem::transmute(punchingMove) };
            punchingMove as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let bitingMove: u32 = unsafe { ::core::mem::transmute(bitingMove) };
            bitingMove as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let pulseMove: u32 = unsafe { ::core::mem::transmute(pulseMove) };
            pulseMove as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let soundMove: u32 = unsafe { ::core::mem::transmute(soundMove) };
            soundMove as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let ballisticMove: u32 = unsafe { ::core::mem::transmute(ballisticMove) };
            ballisticMove as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let powderMove: u32 = unsafe { ::core::mem::transmute(powderMove) };
            powderMove as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let danceMove: u32 = unsafe { ::core::mem::transmute(danceMove) };
            danceMove as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let windMove: u32 = unsafe { ::core::mem::transmute(windMove) };
            windMove as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let slicingMove: u32 = unsafe { ::core::mem::transmute(slicingMove) };
            slicingMove as u64
        });
        __bindgen_bitfield_unit.set(35usize, 1u8, {
            let healingMove: u32 = unsafe { ::core::mem::transmute(healingMove) };
            healingMove as u64
        });
        __bindgen_bitfield_unit.set(36usize, 1u8, {
            let minimizeDoubleDamage: u32 = unsafe { ::core::mem::transmute(minimizeDoubleDamage) };
            minimizeDoubleDamage as u64
        });
        __bindgen_bitfield_unit.set(37usize, 1u8, {
            let ignoresTargetAbility: u32 = unsafe { ::core::mem::transmute(ignoresTargetAbility) };
            ignoresTargetAbility as u64
        });
        __bindgen_bitfield_unit.set(38usize, 1u8, {
            let ignoresTargetDefenseEvasionStages: u32 =
                unsafe { ::core::mem::transmute(ignoresTargetDefenseEvasionStages) };
            ignoresTargetDefenseEvasionStages as u64
        });
        __bindgen_bitfield_unit.set(39usize, 1u8, {
            let damagesUnderground: u32 = unsafe { ::core::mem::transmute(damagesUnderground) };
            damagesUnderground as u64
        });
        __bindgen_bitfield_unit.set(40usize, 1u8, {
            let damagesUnderwater: u32 = unsafe { ::core::mem::transmute(damagesUnderwater) };
            damagesUnderwater as u64
        });
        __bindgen_bitfield_unit.set(41usize, 1u8, {
            let damagesAirborne: u32 = unsafe { ::core::mem::transmute(damagesAirborne) };
            damagesAirborne as u64
        });
        __bindgen_bitfield_unit.set(42usize, 1u8, {
            let damagesAirborneDoubleDamage: u32 =
                unsafe { ::core::mem::transmute(damagesAirborneDoubleDamage) };
            damagesAirborneDoubleDamage as u64
        });
        __bindgen_bitfield_unit.set(43usize, 1u8, {
            let ignoreTypeIfFlyingAndUngrounded: u32 =
                unsafe { ::core::mem::transmute(ignoreTypeIfFlyingAndUngrounded) };
            ignoreTypeIfFlyingAndUngrounded as u64
        });
        __bindgen_bitfield_unit.set(44usize, 1u8, {
            let thawsUser: u32 = unsafe { ::core::mem::transmute(thawsUser) };
            thawsUser as u64
        });
        __bindgen_bitfield_unit.set(45usize, 1u8, {
            let ignoresSubstitute: u32 = unsafe { ::core::mem::transmute(ignoresSubstitute) };
            ignoresSubstitute as u64
        });
        __bindgen_bitfield_unit.set(46usize, 1u8, {
            let forcePressure: u32 = unsafe { ::core::mem::transmute(forcePressure) };
            forcePressure as u64
        });
        __bindgen_bitfield_unit.set(47usize, 1u8, {
            let cantUseTwice: u32 = unsafe { ::core::mem::transmute(cantUseTwice) };
            cantUseTwice as u64
        });
        __bindgen_bitfield_unit.set(48usize, 1u8, {
            let gravityBanned: u32 = unsafe { ::core::mem::transmute(gravityBanned) };
            gravityBanned as u64
        });
        __bindgen_bitfield_unit.set(49usize, 1u8, {
            let mirrorMoveBanned: u32 = unsafe { ::core::mem::transmute(mirrorMoveBanned) };
            mirrorMoveBanned as u64
        });
        __bindgen_bitfield_unit.set(50usize, 1u8, {
            let meFirstBanned: u32 = unsafe { ::core::mem::transmute(meFirstBanned) };
            meFirstBanned as u64
        });
        __bindgen_bitfield_unit.set(51usize, 1u8, {
            let mimicBanned: u32 = unsafe { ::core::mem::transmute(mimicBanned) };
            mimicBanned as u64
        });
        __bindgen_bitfield_unit.set(52usize, 1u8, {
            let metronomeBanned: u32 = unsafe { ::core::mem::transmute(metronomeBanned) };
            metronomeBanned as u64
        });
        __bindgen_bitfield_unit.set(53usize, 1u8, {
            let copycatBanned: u32 = unsafe { ::core::mem::transmute(copycatBanned) };
            copycatBanned as u64
        });
        __bindgen_bitfield_unit.set(54usize, 1u8, {
            let assistBanned: u32 = unsafe { ::core::mem::transmute(assistBanned) };
            assistBanned as u64
        });
        __bindgen_bitfield_unit.set(55usize, 1u8, {
            let sleepTalkBanned: u32 = unsafe { ::core::mem::transmute(sleepTalkBanned) };
            sleepTalkBanned as u64
        });
        __bindgen_bitfield_unit.set(56usize, 1u8, {
            let instructBanned: u32 = unsafe { ::core::mem::transmute(instructBanned) };
            instructBanned as u64
        });
        __bindgen_bitfield_unit.set(57usize, 1u8, {
            let encoreBanned: u32 = unsafe { ::core::mem::transmute(encoreBanned) };
            encoreBanned as u64
        });
        __bindgen_bitfield_unit.set(58usize, 1u8, {
            let parentalBondBanned: u32 = unsafe { ::core::mem::transmute(parentalBondBanned) };
            parentalBondBanned as u64
        });
        __bindgen_bitfield_unit.set(59usize, 1u8, {
            let skyBattleBanned: u32 = unsafe { ::core::mem::transmute(skyBattleBanned) };
            skyBattleBanned as u64
        });
        __bindgen_bitfield_unit.set(60usize, 1u8, {
            let sketchBanned: u32 = unsafe { ::core::mem::transmute(sketchBanned) };
            sketchBanned as u64
        });
        __bindgen_bitfield_unit.set(64usize, 5u8, {
            let padding: u32 = unsafe { ::core::mem::transmute(padding) };
            padding as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn contestCategory(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_contestCategory(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn contestCategory_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_contestCategory_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(contestCategory: u8_) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let contestCategory: u8 = unsafe { ::core::mem::transmute(contestCategory) };
            contestCategory as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const SheerForceBoost_SHEER_FORCE_AUTO_BOOST: SheerForceBoost = 0;
pub const SheerForceBoost_SHEER_FORCE_BOOST: SheerForceBoost = 1;
pub const SheerForceBoost_SHEER_FORCE_NO_BOOST: SheerForceBoost = 2;
pub type SheerForceBoost = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AdditionalEffect {
    pub moveEffect: u16_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub chance: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AdditionalEffect"][::core::mem::size_of::<AdditionalEffect>() - 4usize];
    ["Alignment of AdditionalEffect"][::core::mem::align_of::<AdditionalEffect>() - 2usize];
    ["Offset of field: AdditionalEffect::moveEffect"]
        [::core::mem::offset_of!(AdditionalEffect, moveEffect) - 0usize];
    ["Offset of field: AdditionalEffect::chance"]
        [::core::mem::offset_of!(AdditionalEffect, chance) - 3usize];
};
impl AdditionalEffect {
    #[inline]
    pub fn self_(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_self(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn self__raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_self_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn onlyIfTargetRaisedStats(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_onlyIfTargetRaisedStats(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn onlyIfTargetRaisedStats_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_onlyIfTargetRaisedStats_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn onChargeTurnOnly(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_onChargeTurnOnly(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn onChargeTurnOnly_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_onChargeTurnOnly_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sheerForceBoost(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_sheerForceBoost(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sheerForceBoost_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_sheerForceBoost_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn padding(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_padding(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn padding_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_padding_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        self_: u8_,
        onlyIfTargetRaisedStats: u8_,
        onChargeTurnOnly: u8_,
        sheerForceBoost: u8_,
        padding: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let self_: u8 = unsafe { ::core::mem::transmute(self_) };
            self_ as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let onlyIfTargetRaisedStats: u8 =
                unsafe { ::core::mem::transmute(onlyIfTargetRaisedStats) };
            onlyIfTargetRaisedStats as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let onChargeTurnOnly: u8 = unsafe { ::core::mem::transmute(onChargeTurnOnly) };
            onChargeTurnOnly as u64
        });
        __bindgen_bitfield_unit.set(3usize, 2u8, {
            let sheerForceBoost: u8 = unsafe { ::core::mem::transmute(sheerForceBoost) };
            sheerForceBoost as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let padding: u8 = unsafe { ::core::mem::transmute(padding) };
            padding as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Ability {
    pub name: [u8_; 17usize],
    pub description: *const u8_,
    pub aiRating: s8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Ability"][::core::mem::size_of::<Ability>() - 28usize];
    ["Alignment of Ability"][::core::mem::align_of::<Ability>() - 4usize];
    ["Offset of field: Ability::name"][::core::mem::offset_of!(Ability, name) - 0usize];
    ["Offset of field: Ability::description"]
        [::core::mem::offset_of!(Ability, description) - 20usize];
    ["Offset of field: Ability::aiRating"][::core::mem::offset_of!(Ability, aiRating) - 24usize];
};
impl Ability {
    #[inline]
    pub fn cantBeCopied(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_cantBeCopied(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cantBeCopied_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_cantBeCopied_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cantBeSwapped(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_cantBeSwapped(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cantBeSwapped_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_cantBeSwapped_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cantBeTraced(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_cantBeTraced(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cantBeTraced_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_cantBeTraced_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cantBeSuppressed(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_cantBeSuppressed(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cantBeSuppressed_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_cantBeSuppressed_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cantBeOverwritten(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_cantBeOverwritten(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cantBeOverwritten_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_cantBeOverwritten_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn breakable(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_breakable(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn breakable_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_breakable_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn failsOnImposter(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_failsOnImposter(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn failsOnImposter_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_failsOnImposter_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cantBeCopied: u8_,
        cantBeSwapped: u8_,
        cantBeTraced: u8_,
        cantBeSuppressed: u8_,
        cantBeOverwritten: u8_,
        breakable: u8_,
        failsOnImposter: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let cantBeCopied: u8 = unsafe { ::core::mem::transmute(cantBeCopied) };
            cantBeCopied as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let cantBeSwapped: u8 = unsafe { ::core::mem::transmute(cantBeSwapped) };
            cantBeSwapped as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let cantBeTraced: u8 = unsafe { ::core::mem::transmute(cantBeTraced) };
            cantBeTraced as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let cantBeSuppressed: u8 = unsafe { ::core::mem::transmute(cantBeSuppressed) };
            cantBeSuppressed as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let cantBeOverwritten: u8 = unsafe { ::core::mem::transmute(cantBeOverwritten) };
            cantBeOverwritten as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let breakable: u8 = unsafe { ::core::mem::transmute(breakable) };
            breakable as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let failsOnImposter: u8 = unsafe { ::core::mem::transmute(failsOnImposter) };
            failsOnImposter as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const AFFINE_NONE: _bindgen_ty_16 = 0;
pub const AFFINE_TURN_UP: _bindgen_ty_16 = 1;
pub const AFFINE_TURN_UP_AND_DOWN: _bindgen_ty_16 = 2;
pub const AFFINE_TURN_DOWN: _bindgen_ty_16 = 3;
pub const AFFINE_TURN_DOWN_SLOW: _bindgen_ty_16 = 4;
pub const AFFINE_TURN_DOWN_SLIGHT: _bindgen_ty_16 = 5;
pub const AFFINE_TURN_UP_HIGH: _bindgen_ty_16 = 6;
pub const AFFINE_UNUSED_1: _bindgen_ty_16 = 7;
pub const AFFINE_UNUSED_2: _bindgen_ty_16 = 8;
pub const AFFINE_UNUSED_3: _bindgen_ty_16 = 9;
pub const NUM_MON_AFFINES: _bindgen_ty_16 = 10;
pub type _bindgen_ty_16 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NatureInfo {
    pub name: *const u8_,
    pub statUp: u8_,
    pub statDown: u8_,
    pub backAnim: u8_,
    pub pokeBlockAnim: [u8_; 2usize],
    pub battlePalacePercents: [u8_; 4usize],
    pub battlePalaceFlavorText: u8_,
    pub battlePalaceSmokescreen: u8_,
    pub natureGirlMessage: *const u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NatureInfo"][::core::mem::size_of::<NatureInfo>() - 20usize];
    ["Alignment of NatureInfo"][::core::mem::align_of::<NatureInfo>() - 4usize];
    ["Offset of field: NatureInfo::name"][::core::mem::offset_of!(NatureInfo, name) - 0usize];
    ["Offset of field: NatureInfo::statUp"][::core::mem::offset_of!(NatureInfo, statUp) - 4usize];
    ["Offset of field: NatureInfo::statDown"]
        [::core::mem::offset_of!(NatureInfo, statDown) - 5usize];
    ["Offset of field: NatureInfo::backAnim"]
        [::core::mem::offset_of!(NatureInfo, backAnim) - 6usize];
    ["Offset of field: NatureInfo::pokeBlockAnim"]
        [::core::mem::offset_of!(NatureInfo, pokeBlockAnim) - 7usize];
    ["Offset of field: NatureInfo::battlePalacePercents"]
        [::core::mem::offset_of!(NatureInfo, battlePalacePercents) - 9usize];
    ["Offset of field: NatureInfo::battlePalaceFlavorText"]
        [::core::mem::offset_of!(NatureInfo, battlePalaceFlavorText) - 13usize];
    ["Offset of field: NatureInfo::battlePalaceSmokescreen"]
        [::core::mem::offset_of!(NatureInfo, battlePalaceSmokescreen) - 14usize];
    ["Offset of field: NatureInfo::natureGirlMessage"]
        [::core::mem::offset_of!(NatureInfo, natureGirlMessage) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpindaSpot {
    pub x: u8_,
    pub y: u8_,
    pub image: [u16_; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SpindaSpot"][::core::mem::size_of::<SpindaSpot>() - 34usize];
    ["Alignment of SpindaSpot"][::core::mem::align_of::<SpindaSpot>() - 2usize];
    ["Offset of field: SpindaSpot::x"][::core::mem::offset_of!(SpindaSpot, x) - 0usize];
    ["Offset of field: SpindaSpot::y"][::core::mem::offset_of!(SpindaSpot, y) - 1usize];
    ["Offset of field: SpindaSpot::image"][::core::mem::offset_of!(SpindaSpot, image) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LevelUpMove {
    pub move_: u16_,
    pub level: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LevelUpMove"][::core::mem::size_of::<LevelUpMove>() - 4usize];
    ["Alignment of LevelUpMove"][::core::mem::align_of::<LevelUpMove>() - 2usize];
    ["Offset of field: LevelUpMove::move_"][::core::mem::offset_of!(LevelUpMove, move_) - 0usize];
    ["Offset of field: LevelUpMove::level"][::core::mem::offset_of!(LevelUpMove, level) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FormChange {
    pub method: u16_,
    pub targetSpecies: u16_,
    pub param1: u16_,
    pub param2: u16_,
    pub param3: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FormChange"][::core::mem::size_of::<FormChange>() - 10usize];
    ["Alignment of FormChange"][::core::mem::align_of::<FormChange>() - 2usize];
    ["Offset of field: FormChange::method"][::core::mem::offset_of!(FormChange, method) - 0usize];
    ["Offset of field: FormChange::targetSpecies"]
        [::core::mem::offset_of!(FormChange, targetSpecies) - 2usize];
    ["Offset of field: FormChange::param1"][::core::mem::offset_of!(FormChange, param1) - 4usize];
    ["Offset of field: FormChange::param2"][::core::mem::offset_of!(FormChange, param2) - 6usize];
    ["Offset of field: FormChange::param3"][::core::mem::offset_of!(FormChange, param3) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fusion {
    pub fusionStorageIndex: u16_,
    pub itemId: u16_,
    pub targetSpecies1: u16_,
    pub targetSpecies2: u16_,
    pub fusingIntoMon: u16_,
    pub fusionMove: u16_,
    pub unfuseForgetMove: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Fusion"][::core::mem::size_of::<Fusion>() - 14usize];
    ["Alignment of Fusion"][::core::mem::align_of::<Fusion>() - 2usize];
    ["Offset of field: Fusion::fusionStorageIndex"]
        [::core::mem::offset_of!(Fusion, fusionStorageIndex) - 0usize];
    ["Offset of field: Fusion::itemId"][::core::mem::offset_of!(Fusion, itemId) - 2usize];
    ["Offset of field: Fusion::targetSpecies1"]
        [::core::mem::offset_of!(Fusion, targetSpecies1) - 4usize];
    ["Offset of field: Fusion::targetSpecies2"]
        [::core::mem::offset_of!(Fusion, targetSpecies2) - 6usize];
    ["Offset of field: Fusion::fusingIntoMon"]
        [::core::mem::offset_of!(Fusion, fusingIntoMon) - 8usize];
    ["Offset of field: Fusion::fusionMove"][::core::mem::offset_of!(Fusion, fusionMove) - 10usize];
    ["Offset of field: Fusion::unfuseForgetMove"]
        [::core::mem::offset_of!(Fusion, unfuseForgetMove) - 12usize];
};
unsafe extern "C" {
    pub static gFusionTablePointers: [*const Fusion; 1529usize];
}
unsafe extern "C" {
    pub static mut gPlayerPartyCount: u8_;
}
unsafe extern "C" {
    pub static mut gPlayerParty: [Pokemon; 6usize];
}
unsafe extern "C" {
    pub static mut gEnemyPartyCount: u8_;
}
unsafe extern "C" {
    pub static mut gEnemyParty: [Pokemon; 6usize];
}
unsafe extern "C" {
    pub static mut gMultiuseSpriteTemplate: SpriteTemplate;
}
unsafe extern "C" {
    pub static mut gFollowerSteps: u16_;
}
unsafe extern "C" {
    pub static gMovesInfo: [MoveInfo; 0usize];
}
unsafe extern "C" {
    pub static gFacilityClassToPicIndex: [u8_; 0usize];
}
unsafe extern "C" {
    pub static gFacilityClassToTrainerClass: [u8_; 0usize];
}
unsafe extern "C" {
    pub static gSpeciesInfo: [SpeciesInfo; 0usize];
}
unsafe extern "C" {
    pub static mut gExperienceTables: [[u32_; 101usize]; 0usize];
}
unsafe extern "C" {
    pub static gPPUpGetMask: [u8_; 0usize];
}
unsafe extern "C" {
    pub static gPPUpClearMask: [u8_; 0usize];
}
unsafe extern "C" {
    pub static gPPUpAddValues: [u8_; 0usize];
}
unsafe extern "C" {
    pub static mut gStatStageRatios: [[u8_; 2usize]; 13usize];
}
unsafe extern "C" {
    pub static gUnionRoomFacilityClasses: [u16_; 0usize];
}
unsafe extern "C" {
    pub static gBattlerSpriteTemplates: [SpriteTemplate; 0usize];
}
unsafe extern "C" {
    pub static sExpCandyExperienceTable: [u32_; 0usize];
}
unsafe extern "C" {
    pub static gAbilitiesInfo: [Ability; 0usize];
}
unsafe extern "C" {
    pub static gNaturesInfo: [NatureInfo; 0usize];
}
unsafe extern "C" {
    pub fn ZeroBoxMonData(boxMon: *mut BoxPokemon);
}
unsafe extern "C" {
    pub fn ZeroMonData(mon: *mut Pokemon);
}
unsafe extern "C" {
    pub fn ZeroPlayerPartyMons();
}
unsafe extern "C" {
    pub fn ZeroEnemyPartyMons();
}
unsafe extern "C" {
    pub fn CreateMon(
        mon: *mut Pokemon,
        species: u16_,
        level: u8_,
        fixedIV: u8_,
        hasFixedPersonality: u8_,
        fixedPersonality: u32_,
        otIdType: u8_,
        fixedOtId: u32_,
    );
}
unsafe extern "C" {
    pub fn CreateBoxMon(
        boxMon: *mut BoxPokemon,
        species: u16_,
        level: u8_,
        fixedIV: u8_,
        hasFixedPersonality: u8_,
        fixedPersonality: u32_,
        otIdType: u8_,
        fixedOtId: u32_,
    );
}
unsafe extern "C" {
    pub fn CreateMonWithNature(
        mon: *mut Pokemon,
        species: u16_,
        level: u8_,
        fixedIV: u8_,
        nature: u8_,
    );
}
unsafe extern "C" {
    pub fn CreateMonWithGenderNatureLetter(
        mon: *mut Pokemon,
        species: u16_,
        level: u8_,
        fixedIV: u8_,
        gender: u8_,
        nature: u8_,
        unownLetter: u8_,
    );
}
unsafe extern "C" {
    pub fn CreateMaleMon(mon: *mut Pokemon, species: u16_, level: u8_);
}
unsafe extern "C" {
    pub fn CreateMonWithIVsPersonality(
        mon: *mut Pokemon,
        species: u16_,
        level: u8_,
        ivs: u32_,
        personality: u32_,
    );
}
unsafe extern "C" {
    pub fn CreateMonWithIVsOTID(
        mon: *mut Pokemon,
        species: u16_,
        level: u8_,
        ivs: *mut u8_,
        otId: u32_,
    );
}
unsafe extern "C" {
    pub fn CreateMonWithEVSpread(
        mon: *mut Pokemon,
        species: u16_,
        level: u8_,
        fixedIV: u8_,
        evSpread: u8_,
    );
}
unsafe extern "C" {
    pub fn CreateBattleTowerMon(mon: *mut Pokemon, src: *mut BattleTowerPokemon);
}
unsafe extern "C" {
    pub fn CreateBattleTowerMon_HandleLevel(
        mon: *mut Pokemon,
        src: *mut BattleTowerPokemon,
        lvl50: bool8,
    );
}
unsafe extern "C" {
    pub fn CreateApprenticeMon(mon: *mut Pokemon, src: *const Apprentice, monId: u8_);
}
unsafe extern "C" {
    pub fn CreateMonWithEVSpreadNatureOTID(
        mon: *mut Pokemon,
        species: u16_,
        level: u8_,
        nature: u8_,
        fixedIV: u8_,
        evSpread: u8_,
        otId: u32_,
    );
}
unsafe extern "C" {
    pub fn ConvertPokemonToBattleTowerPokemon(mon: *mut Pokemon, dest: *mut BattleTowerPokemon);
}
unsafe extern "C" {
    pub fn ShouldIgnoreDeoxysForm(caseId: u8_, battlerId: u8_) -> bool8;
}
unsafe extern "C" {
    pub fn GetUnionRoomTrainerPic() -> u16_;
}
unsafe extern "C" {
    pub fn GetUnionRoomTrainerClass() -> u16_;
}
unsafe extern "C" {
    pub fn CreateEnemyEventMon();
}
unsafe extern "C" {
    pub fn CalculateMonStats(mon: *mut Pokemon);
}
unsafe extern "C" {
    pub fn BoxMonToMon(src: *const BoxPokemon, dest: *mut Pokemon);
}
unsafe extern "C" {
    pub fn GetLevelFromMonExp(mon: *mut Pokemon) -> u8_;
}
unsafe extern "C" {
    pub fn GetLevelFromBoxMonExp(boxMon: *mut BoxPokemon) -> u8_;
}
unsafe extern "C" {
    pub fn GiveMoveToMon(mon: *mut Pokemon, move_: u16_) -> u16_;
}
unsafe extern "C" {
    pub fn GiveMoveToBoxMon(boxMon: *mut BoxPokemon, move_: u16_) -> u16_;
}
unsafe extern "C" {
    pub fn GiveMoveToBattleMon(mon: *mut BattlePokemon, move_: u16_) -> u16_;
}
unsafe extern "C" {
    pub fn SetMonMoveSlot(mon: *mut Pokemon, move_: u16_, slot: u8_);
}
unsafe extern "C" {
    pub fn SetBattleMonMoveSlot(mon: *mut BattlePokemon, move_: u16_, slot: u8_);
}
unsafe extern "C" {
    pub fn GiveMonInitialMoveset(mon: *mut Pokemon);
}
unsafe extern "C" {
    pub fn GiveBoxMonInitialMoveset(boxMon: *mut BoxPokemon);
}
unsafe extern "C" {
    pub fn MonTryLearningNewMove(mon: *mut Pokemon, firstMove: bool8) -> u16_;
}
unsafe extern "C" {
    pub fn DeleteFirstMoveAndGiveMoveToMon(mon: *mut Pokemon, move_: u16_);
}
unsafe extern "C" {
    pub fn DeleteFirstMoveAndGiveMoveToBoxMon(boxMon: *mut BoxPokemon, move_: u16_);
}
unsafe extern "C" {
    pub fn CountAliveMonsInBattle(caseId: u8_, battler: u32_) -> u8_;
}
unsafe extern "C" {
    pub fn GetDefaultMoveTarget(battlerId: u8_) -> u8_;
}
unsafe extern "C" {
    pub fn GetMonGender(mon: *mut Pokemon) -> u8_;
}
unsafe extern "C" {
    pub fn GetBoxMonGender(boxMon: *mut BoxPokemon) -> u8_;
}
unsafe extern "C" {
    pub fn GetGenderFromSpeciesAndPersonality(species: u16_, personality: u32_) -> u8_;
}
unsafe extern "C" {
    pub fn IsPersonalityFemale(species: u16_, personality: u32_) -> bool32;
}
unsafe extern "C" {
    pub fn GetUnownSpeciesId(personality: u32_) -> u32_;
}
unsafe extern "C" {
    pub fn SetMultiuseSpriteTemplateToPokemon(speciesTag: u16_, battlerPosition: u8_);
}
unsafe extern "C" {
    pub fn SetMultiuseSpriteTemplateToTrainerBack(trainerSpriteId: u16_, battlerPosition: u8_);
}
unsafe extern "C" {
    pub fn SetMultiuseSpriteTemplateToTrainerFront(trainerPicId: u16_, battlerPosition: u8_);
}
unsafe extern "C" {
    pub fn GetMonData3(mon: *mut Pokemon, field: s32, data: *mut u8_) -> u32_;
}
unsafe extern "C" {
    pub fn GetMonData2(mon: *mut Pokemon, field: s32) -> u32_;
}
unsafe extern "C" {
    pub fn GetBoxMonData3(boxMon: *mut BoxPokemon, field: s32, data: *mut u8_) -> u32_;
}
unsafe extern "C" {
    pub fn GetBoxMonData2(boxMon: *mut BoxPokemon, field: s32) -> u32_;
}
unsafe extern "C" {
    pub fn SetMonData(mon: *mut Pokemon, field: s32, dataArg: *const ::core::ffi::c_void);
}
unsafe extern "C" {
    pub fn SetBoxMonData(boxMon: *mut BoxPokemon, field: s32, dataArg: *const ::core::ffi::c_void);
}
unsafe extern "C" {
    pub fn CopyMon(dest: *mut ::core::ffi::c_void, src: *mut ::core::ffi::c_void, size: usize);
}
unsafe extern "C" {
    pub fn GiveMonToPlayer(mon: *mut Pokemon) -> u8_;
}
unsafe extern "C" {
    pub fn CopyMonToPC(mon: *mut Pokemon) -> u8_;
}
unsafe extern "C" {
    pub fn CalculatePlayerPartyCount() -> u8_;
}
unsafe extern "C" {
    pub fn CalculateEnemyPartyCount() -> u8_;
}
unsafe extern "C" {
    pub fn CalculateEnemyPartyCountInSide(battler: u32_) -> u8_;
}
unsafe extern "C" {
    pub fn GetMonsStateToDoubles() -> u8_;
}
unsafe extern "C" {
    pub fn GetMonsStateToDoubles_2() -> u8_;
}
unsafe extern "C" {
    pub fn GetAbilityBySpecies(species: u16_, abilityNum: u8_) -> u16_;
}
unsafe extern "C" {
    pub fn GetMonAbility(mon: *mut Pokemon) -> u16_;
}
unsafe extern "C" {
    pub fn CreateSecretBaseEnemyParty(secretBaseRecord: *mut SecretBase);
}
unsafe extern "C" {
    pub fn GetSecretBaseTrainerPicIndex() -> u8_;
}
unsafe extern "C" {
    pub fn GetSecretBaseTrainerClass() -> u8_;
}
unsafe extern "C" {
    pub fn IsPlayerPartyAndPokemonStorageFull() -> bool8;
}
unsafe extern "C" {
    pub fn IsPokemonStorageFull() -> bool8;
}
unsafe extern "C" {
    pub fn GetSpeciesName(species: u16_) -> *const u8_;
}
unsafe extern "C" {
    pub fn GetSpeciesCategory(species: u16_) -> *const u8_;
}
unsafe extern "C" {
    pub fn GetSpeciesPokedexDescription(species: u16_) -> *const u8_;
}
unsafe extern "C" {
    pub fn GetSpeciesHeight(species: u16_) -> u16_;
}
unsafe extern "C" {
    pub fn GetSpeciesWeight(species: u16_) -> u16_;
}
unsafe extern "C" {
    pub fn GetSpeciesLevelUpLearnset(species: u16_) -> *const LevelUpMove;
}
unsafe extern "C" {
    pub fn GetSpeciesTeachableLearnset(species: u16_) -> *const u16_;
}
unsafe extern "C" {
    pub fn GetSpeciesEggMoves(species: u16_) -> *const u16_;
}
unsafe extern "C" {
    pub fn GetSpeciesEvolutions(species: u16_) -> *const Evolution;
}
unsafe extern "C" {
    pub fn GetSpeciesFormTable(species: u16_) -> *const u16_;
}
unsafe extern "C" {
    pub fn GetSpeciesFormChanges(species: u16_) -> *const FormChange;
}
unsafe extern "C" {
    pub fn CalculatePPWithBonus(move_: u16_, ppBonuses: u8_, moveIndex: u8_) -> u8_;
}
unsafe extern "C" {
    pub fn RemoveMonPPBonus(mon: *mut Pokemon, moveIndex: u8_);
}
unsafe extern "C" {
    pub fn RemoveBattleMonPPBonus(mon: *mut BattlePokemon, moveIndex: u8_);
}
unsafe extern "C" {
    pub fn PokemonToBattleMon(src: *mut Pokemon, dst: *mut BattlePokemon);
}
unsafe extern "C" {
    pub fn CopyPartyMonToBattleData(battlerId: u32_, partyIndex: u32_);
}
unsafe extern "C" {
    pub fn ExecuteTableBasedItemEffect(
        mon: *mut Pokemon,
        item: u16_,
        partyIndex: u8_,
        moveIndex: u8_,
    ) -> bool8;
}
unsafe extern "C" {
    pub fn PokemonUseItemEffects(
        mon: *mut Pokemon,
        item: u16_,
        partyIndex: u8_,
        moveIndex: u8_,
        e: u8_,
    ) -> bool8;
}
unsafe extern "C" {
    pub fn HealStatusConditions(mon: *mut Pokemon, healMask: u32_, battlerId: u8_) -> bool8;
}
unsafe extern "C" {
    pub fn GetItemEffectParamOffset(
        battler: u32_,
        itemId: u16_,
        effectByte: u8_,
        effectBit: u8_,
    ) -> u8_;
}
unsafe extern "C" {
    pub fn UseStatIncreaseItem(itemId: u16_) -> *mut u8_;
}
unsafe extern "C" {
    pub fn GetNature(mon: *mut Pokemon) -> u8_;
}
unsafe extern "C" {
    pub fn GetNatureFromPersonality(personality: u32_) -> u8_;
}
unsafe extern "C" {
    pub fn GetEvolutionTargetSpecies(
        mon: *mut Pokemon,
        mode: EvolutionMode,
        evolutionItem: u16_,
        tradePartner: *mut Pokemon,
    ) -> u16_;
}
unsafe extern "C" {
    pub fn IsMonPastEvolutionLevel(mon: *mut Pokemon) -> bool8;
}
unsafe extern "C" {
    pub fn NationalPokedexNumToSpecies(nationalNum: u16_) -> u16_;
}
unsafe extern "C" {
    pub fn NationalToHoennOrder(nationalNum: u16_) -> u16_;
}
unsafe extern "C" {
    pub fn SpeciesToNationalPokedexNum(species: u16_) -> u16_;
}
unsafe extern "C" {
    pub fn SpeciesToHoennPokedexNum(species: u16_) -> u16_;
}
unsafe extern "C" {
    pub fn HoennToNationalOrder(hoennNum: u16_) -> u16_;
}
unsafe extern "C" {
    pub fn DrawSpindaSpots(personality: u32_, dest: *mut u8_, isSecondFrame: bool32);
}
unsafe extern "C" {
    pub fn EvolutionRenameMon(mon: *mut Pokemon, oldSpecies: u16_, newSpecies: u16_);
}
unsafe extern "C" {
    pub fn GetPlayerFlankId() -> u8_;
}
unsafe extern "C" {
    pub fn GetLinkTrainerFlankId(id: u8_) -> u16_;
}
unsafe extern "C" {
    pub fn GetBattlerMultiplayerId(id: u16_) -> s32;
}
unsafe extern "C" {
    pub fn GetTrainerEncounterMusicId(trainerOpponentId: u16_) -> u8_;
}
unsafe extern "C" {
    pub fn ModifyStatByNature(nature: u8_, n: u16_, statIndex: u8_) -> u16_;
}
unsafe extern "C" {
    pub fn AdjustFriendship(mon: *mut Pokemon, event: u8_);
}
unsafe extern "C" {
    pub fn MonGainEVs(mon: *mut Pokemon, defeatedSpecies: u16_);
}
unsafe extern "C" {
    pub fn GetMonEVCount(mon: *mut Pokemon) -> u16_;
}
unsafe extern "C" {
    pub fn RandomlyGivePartyPokerus(party: *mut Pokemon);
}
unsafe extern "C" {
    pub fn CheckPartyPokerus(party: *mut Pokemon, selection: u8_) -> u8_;
}
unsafe extern "C" {
    pub fn CheckPartyHasHadPokerus(party: *mut Pokemon, selection: u8_) -> u8_;
}
unsafe extern "C" {
    pub fn UpdatePartyPokerusTime(days: u16_);
}
unsafe extern "C" {
    pub fn PartySpreadPokerus(party: *mut Pokemon);
}
unsafe extern "C" {
    pub fn TryIncrementMonLevel(mon: *mut Pokemon) -> bool8;
}
unsafe extern "C" {
    pub fn CanLearnTeachableMove(species: u16_, move_: u16_) -> u8_;
}
unsafe extern "C" {
    pub fn GetMoveRelearnerMoves(mon: *mut Pokemon, moves: *mut u16_) -> u8_;
}
unsafe extern "C" {
    pub fn GetMoveRelearnerTmMoves(mon: *mut Pokemon, moves: *mut u16_) -> u8_;
}
unsafe extern "C" {
    pub fn GetLevelUpMovesBySpecies(species: u16_, moves: *mut u16_) -> u8_;
}
unsafe extern "C" {
    pub fn GetNumberOfRelearnableMoves(mon: *mut Pokemon) -> u8_;
}
unsafe extern "C" {
    pub fn SpeciesToPokedexNum(species: u16_) -> u16_;
}
unsafe extern "C" {
    pub fn IsSpeciesInHoennDex(species: u16_) -> bool32;
}
unsafe extern "C" {
    pub fn GetBattleBGM() -> u16_;
}
unsafe extern "C" {
    pub fn PlayBattleBGM();
}
unsafe extern "C" {
    pub fn PlayMapChosenOrBattleBGM(songId: u16_);
}
unsafe extern "C" {
    pub fn CreateTask_PlayMapChosenOrBattleBGM(songId: u16_);
}
unsafe extern "C" {
    pub fn GetMonFrontSpritePal(mon: *mut Pokemon) -> *const u32_;
}
unsafe extern "C" {
    pub fn GetMonSpritePalFromSpeciesAndPersonality(
        species: u16_,
        isShiny: bool32,
        personality: u32_,
    ) -> *const u32_;
}
unsafe extern "C" {
    pub fn GetMonSpritePalFromSpecies(
        species: u16_,
        isShiny: bool32,
        isFemale: bool32,
    ) -> *const u32_;
}
unsafe extern "C" {
    pub fn IsMoveHM(move_: u16_) -> bool8;
}
unsafe extern "C" {
    pub fn IsMonSpriteNotFlipped(species: u16_) -> bool8;
}
unsafe extern "C" {
    pub fn GetMonFlavorRelation(mon: *mut Pokemon, flavor: u8_) -> s8;
}
unsafe extern "C" {
    pub fn GetFlavorRelationByPersonality(personality: u32_, flavor: u8_) -> s8;
}
unsafe extern "C" {
    pub fn IsTradedMon(mon: *mut Pokemon) -> bool8;
}
unsafe extern "C" {
    pub fn IsOtherTrainer(otId: u32_, otName: *mut u8_) -> bool8;
}
unsafe extern "C" {
    pub fn MonRestorePP(mon: *mut Pokemon);
}
unsafe extern "C" {
    pub fn BoxMonRestorePP(boxMon: *mut BoxPokemon);
}
unsafe extern "C" {
    pub fn SetMonPreventsSwitchingString();
}
unsafe extern "C" {
    pub fn SetWildMonHeldItem();
}
unsafe extern "C" {
    pub fn IsMonShiny(mon: *mut Pokemon) -> bool8;
}
unsafe extern "C" {
    pub fn GetTrainerPartnerName() -> *const u8_;
}
unsafe extern "C" {
    pub fn BattleAnimateFrontSprite(sprite: *mut Sprite, species: u16_, noCry: bool8, panMode: u8_);
}
unsafe extern "C" {
    pub fn DoMonFrontSpriteAnimation(
        sprite: *mut Sprite,
        species: u16_,
        noCry: bool8,
        panModeAnimFlag: u8_,
    );
}
unsafe extern "C" {
    pub fn PokemonSummaryDoMonAnimation(
        sprite: *mut Sprite,
        species: u16_,
        oneFrame: bool8,
        isShadow: bool32,
    );
}
unsafe extern "C" {
    pub fn StopPokemonAnimationDelayTask();
}
unsafe extern "C" {
    pub fn BattleAnimateBackSprite(sprite: *mut Sprite, species: u16_);
}
unsafe extern "C" {
    pub fn GetOpposingLinkMultiBattlerId(rightSide: bool8, multiplayerId: u8_) -> u8_;
}
unsafe extern "C" {
    pub fn FacilityClassToPicIndex(facilityClass: u16_) -> u16_;
}
unsafe extern "C" {
    pub fn PlayerGenderToFrontTrainerPicId(playerGender: u8_) -> u16_;
}
unsafe extern "C" {
    pub fn HandleSetPokedexFlag(nationalNum: u16_, caseId: u8_, personality: u32_);
}
unsafe extern "C" {
    pub fn HasTwoFramesAnimation(species: u16_) -> bool8;
}
unsafe extern "C" {
    pub fn CreateMonSpritesGfxManager(managerId: u8_, mode: u8_) -> *mut MonSpritesGfxManager;
}
unsafe extern "C" {
    pub fn DestroyMonSpritesGfxManager(managerId: u8_);
}
unsafe extern "C" {
    pub fn MonSpritesGfxManager_GetSpritePtr(managerId: u8_, spriteNum: u8_) -> *mut u8_;
}
unsafe extern "C" {
    pub fn GetFormSpeciesId(speciesId: u16_, formId: u8_) -> u16_;
}
unsafe extern "C" {
    pub fn GetFormIdFromFormSpeciesId(formSpeciesId: u16_) -> u8_;
}
unsafe extern "C" {
    pub fn GetFormChangeTargetSpecies(mon: *mut Pokemon, method: u16_, arg: u32_) -> u16_;
}
unsafe extern "C" {
    pub fn GetFormChangeTargetSpeciesBoxMon(
        boxMon: *mut BoxPokemon,
        method: u16_,
        arg: u32_,
    ) -> u16_;
}
unsafe extern "C" {
    pub fn DoesSpeciesHaveFormChangeMethod(species: u16_, method: u16_) -> bool32;
}
unsafe extern "C" {
    pub fn MonTryLearningNewMoveEvolution(mon: *mut Pokemon, firstMove: bool8) -> u16_;
}
unsafe extern "C" {
    pub fn RemoveIVIndexFromList(ivs: *mut u8_, selectedIv: u8_);
}
unsafe extern "C" {
    pub fn SpeciesHasGenderDifferences(species: u16_) -> bool32;
}
unsafe extern "C" {
    pub fn TryFormChange(monId: u32_, side: u32_, method: u16_) -> bool32;
}
unsafe extern "C" {
    pub fn TryToSetBattleFormChangeMoves(mon: *mut Pokemon, method: u16_);
}
unsafe extern "C" {
    pub fn GetMonFriendshipScore(pokemon: *mut Pokemon) -> u32_;
}
unsafe extern "C" {
    pub fn GetMonAffectionHearts(pokemon: *mut Pokemon) -> u32_;
}
unsafe extern "C" {
    pub fn UpdateMonPersonality(boxMon: *mut BoxPokemon, personality: u32_);
}
unsafe extern "C" {
    pub fn CalculatePartyCount(party: *mut Pokemon) -> u8_;
}
unsafe extern "C" {
    pub fn SanitizeSpeciesId(species: u16_) -> u16_;
}
unsafe extern "C" {
    pub fn IsSpeciesEnabled(species: u16_) -> bool32;
}
unsafe extern "C" {
    pub fn GetCryIdBySpecies(species: u16_) -> u16_;
}
unsafe extern "C" {
    pub fn GetSpeciesPreEvolution(species: u16_) -> u16_;
}
unsafe extern "C" {
    pub fn HealPokemon(mon: *mut Pokemon);
}
unsafe extern "C" {
    pub fn HealBoxPokemon(boxMon: *mut BoxPokemon);
}
unsafe extern "C" {
    pub fn GetMoveName(moveId: u16_) -> *const u8_;
}
unsafe extern "C" {
    pub fn GetMoveAnimationScript(moveId: u16_) -> *const u8_;
}
unsafe extern "C" {
    pub fn UpdateDaysPassedSinceFormChange(days: u16_);
}
unsafe extern "C" {
    pub fn TrySetDayLimitToFormChange(mon: *mut Pokemon);
}
unsafe extern "C" {
    pub fn CheckDynamicMoveType(mon: *mut Pokemon, move_: u32_, battler: u32_) -> u32_;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpData {
    pub mapGroup: s8,
    pub mapNum: s8,
    pub warpId: s8,
    pub x: s16,
    pub y: s16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WarpData"][::core::mem::size_of::<WarpData>() - 8usize];
    ["Alignment of WarpData"][::core::mem::align_of::<WarpData>() - 2usize];
    ["Offset of field: WarpData::mapGroup"][::core::mem::offset_of!(WarpData, mapGroup) - 0usize];
    ["Offset of field: WarpData::mapNum"][::core::mem::offset_of!(WarpData, mapNum) - 1usize];
    ["Offset of field: WarpData::warpId"][::core::mem::offset_of!(WarpData, warpId) - 2usize];
    ["Offset of field: WarpData::x"][::core::mem::offset_of!(WarpData, x) - 4usize];
    ["Offset of field: WarpData::y"][::core::mem::offset_of!(WarpData, y) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ItemSlot {
    pub itemId: u16_,
    pub quantity: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ItemSlot"][::core::mem::size_of::<ItemSlot>() - 4usize];
    ["Alignment of ItemSlot"][::core::mem::align_of::<ItemSlot>() - 2usize];
    ["Offset of field: ItemSlot::itemId"][::core::mem::offset_of!(ItemSlot, itemId) - 0usize];
    ["Offset of field: ItemSlot::quantity"][::core::mem::offset_of!(ItemSlot, quantity) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Pokeblock {
    pub color: u8_,
    pub spicy: u8_,
    pub dry: u8_,
    pub sweet: u8_,
    pub bitter: u8_,
    pub sour: u8_,
    pub feel: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Pokeblock"][::core::mem::size_of::<Pokeblock>() - 7usize];
    ["Alignment of Pokeblock"][::core::mem::align_of::<Pokeblock>() - 1usize];
    ["Offset of field: Pokeblock::color"][::core::mem::offset_of!(Pokeblock, color) - 0usize];
    ["Offset of field: Pokeblock::spicy"][::core::mem::offset_of!(Pokeblock, spicy) - 1usize];
    ["Offset of field: Pokeblock::dry"][::core::mem::offset_of!(Pokeblock, dry) - 2usize];
    ["Offset of field: Pokeblock::sweet"][::core::mem::offset_of!(Pokeblock, sweet) - 3usize];
    ["Offset of field: Pokeblock::bitter"][::core::mem::offset_of!(Pokeblock, bitter) - 4usize];
    ["Offset of field: Pokeblock::sour"][::core::mem::offset_of!(Pokeblock, sour) - 5usize];
    ["Offset of field: Pokeblock::feel"][::core::mem::offset_of!(Pokeblock, feel) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Roamer {
    pub ivs: u32_,
    pub personality: u32_,
    pub species: u16_,
    pub hp: u16_,
    pub level: u8_,
    pub statusA: u8_,
    pub cool: u8_,
    pub beauty: u8_,
    pub cute: u8_,
    pub smart: u8_,
    pub tough: u8_,
    pub active: bool8,
    pub statusB: u8_,
    pub filler: [u8_; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Roamer"][::core::mem::size_of::<Roamer>() - 28usize];
    ["Alignment of Roamer"][::core::mem::align_of::<Roamer>() - 4usize];
    ["Offset of field: Roamer::ivs"][::core::mem::offset_of!(Roamer, ivs) - 0usize];
    ["Offset of field: Roamer::personality"][::core::mem::offset_of!(Roamer, personality) - 4usize];
    ["Offset of field: Roamer::species"][::core::mem::offset_of!(Roamer, species) - 8usize];
    ["Offset of field: Roamer::hp"][::core::mem::offset_of!(Roamer, hp) - 10usize];
    ["Offset of field: Roamer::level"][::core::mem::offset_of!(Roamer, level) - 12usize];
    ["Offset of field: Roamer::statusA"][::core::mem::offset_of!(Roamer, statusA) - 13usize];
    ["Offset of field: Roamer::cool"][::core::mem::offset_of!(Roamer, cool) - 14usize];
    ["Offset of field: Roamer::beauty"][::core::mem::offset_of!(Roamer, beauty) - 15usize];
    ["Offset of field: Roamer::cute"][::core::mem::offset_of!(Roamer, cute) - 16usize];
    ["Offset of field: Roamer::smart"][::core::mem::offset_of!(Roamer, smart) - 17usize];
    ["Offset of field: Roamer::tough"][::core::mem::offset_of!(Roamer, tough) - 18usize];
    ["Offset of field: Roamer::active"][::core::mem::offset_of!(Roamer, active) - 19usize];
    ["Offset of field: Roamer::statusB"][::core::mem::offset_of!(Roamer, statusB) - 20usize];
    ["Offset of field: Roamer::filler"][::core::mem::offset_of!(Roamer, filler) - 21usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RamScriptData {
    pub magic: u8_,
    pub mapGroup: u8_,
    pub mapNum: u8_,
    pub objectId: u8_,
    pub script: [u8_; 995usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RamScriptData"][::core::mem::size_of::<RamScriptData>() - 999usize];
    ["Alignment of RamScriptData"][::core::mem::align_of::<RamScriptData>() - 1usize];
    ["Offset of field: RamScriptData::magic"]
        [::core::mem::offset_of!(RamScriptData, magic) - 0usize];
    ["Offset of field: RamScriptData::mapGroup"]
        [::core::mem::offset_of!(RamScriptData, mapGroup) - 1usize];
    ["Offset of field: RamScriptData::mapNum"]
        [::core::mem::offset_of!(RamScriptData, mapNum) - 2usize];
    ["Offset of field: RamScriptData::objectId"]
        [::core::mem::offset_of!(RamScriptData, objectId) - 3usize];
    ["Offset of field: RamScriptData::script"]
        [::core::mem::offset_of!(RamScriptData, script) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RamScript {
    pub checksum: u32_,
    pub data: RamScriptData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RamScript"][::core::mem::size_of::<RamScript>() - 1004usize];
    ["Alignment of RamScript"][::core::mem::align_of::<RamScript>() - 4usize];
    ["Offset of field: RamScript::checksum"][::core::mem::offset_of!(RamScript, checksum) - 0usize];
    ["Offset of field: RamScript::data"][::core::mem::offset_of!(RamScript, data) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DewfordTrend {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub rand: u16_,
    pub words: [u16_; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DewfordTrend"][::core::mem::size_of::<DewfordTrend>() - 8usize];
    ["Alignment of DewfordTrend"][::core::mem::align_of::<DewfordTrend>() - 2usize];
    ["Offset of field: DewfordTrend::rand"][::core::mem::offset_of!(DewfordTrend, rand) - 2usize];
    ["Offset of field: DewfordTrend::words"][::core::mem::offset_of!(DewfordTrend, words) - 4usize];
};
impl DewfordTrend {
    #[inline]
    pub fn trendiness(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u16) }
    }
    #[inline]
    pub fn set_trendiness(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn trendiness_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                7u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_trendiness_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn maxTrendiness(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 7u8) as u16) }
    }
    #[inline]
    pub fn set_maxTrendiness(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn maxTrendiness_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                7u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_maxTrendiness_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn gainingTrendiness(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_gainingTrendiness(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn gainingTrendiness_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_gainingTrendiness_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        trendiness: u16_,
        maxTrendiness: u16_,
        gainingTrendiness: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let trendiness: u16 = unsafe { ::core::mem::transmute(trendiness) };
            trendiness as u64
        });
        __bindgen_bitfield_unit.set(7usize, 7u8, {
            let maxTrendiness: u16 = unsafe { ::core::mem::transmute(maxTrendiness) };
            maxTrendiness as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let gainingTrendiness: u16 = unsafe { ::core::mem::transmute(gainingTrendiness) };
            gainingTrendiness as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MauvilleManCommon {
    pub id: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MauvilleManCommon"][::core::mem::size_of::<MauvilleManCommon>() - 1usize];
    ["Alignment of MauvilleManCommon"][::core::mem::align_of::<MauvilleManCommon>() - 1usize];
    ["Offset of field: MauvilleManCommon::id"]
        [::core::mem::offset_of!(MauvilleManCommon, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MauvilleManBard {
    pub id: u8_,
    pub songLyrics: [u16_; 6usize],
    pub temporaryLyrics: [u16_; 6usize],
    pub playerName: [u8_; 8usize],
    pub filler_2DB6: [u8_; 3usize],
    pub playerTrainerId: [u8_; 4usize],
    pub hasChangedSong: bool8,
    pub language: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MauvilleManBard"][::core::mem::size_of::<MauvilleManBard>() - 44usize];
    ["Alignment of MauvilleManBard"][::core::mem::align_of::<MauvilleManBard>() - 2usize];
    ["Offset of field: MauvilleManBard::id"][::core::mem::offset_of!(MauvilleManBard, id) - 0usize];
    ["Offset of field: MauvilleManBard::songLyrics"]
        [::core::mem::offset_of!(MauvilleManBard, songLyrics) - 2usize];
    ["Offset of field: MauvilleManBard::temporaryLyrics"]
        [::core::mem::offset_of!(MauvilleManBard, temporaryLyrics) - 14usize];
    ["Offset of field: MauvilleManBard::playerName"]
        [::core::mem::offset_of!(MauvilleManBard, playerName) - 26usize];
    ["Offset of field: MauvilleManBard::filler_2DB6"]
        [::core::mem::offset_of!(MauvilleManBard, filler_2DB6) - 34usize];
    ["Offset of field: MauvilleManBard::playerTrainerId"]
        [::core::mem::offset_of!(MauvilleManBard, playerTrainerId) - 37usize];
    ["Offset of field: MauvilleManBard::hasChangedSong"]
        [::core::mem::offset_of!(MauvilleManBard, hasChangedSong) - 41usize];
    ["Offset of field: MauvilleManBard::language"]
        [::core::mem::offset_of!(MauvilleManBard, language) - 42usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MauvilleManStoryteller {
    pub id: u8_,
    pub alreadyRecorded: bool8,
    pub filler2: [u8_; 2usize],
    pub gameStatIDs: [u8_; 4usize],
    pub trainerNames: [[u8_; 7usize]; 4usize],
    pub statValues: [[u8_; 4usize]; 4usize],
    pub language: [u8_; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MauvilleManStoryteller"][::core::mem::size_of::<MauvilleManStoryteller>() - 56usize];
    ["Alignment of MauvilleManStoryteller"]
        [::core::mem::align_of::<MauvilleManStoryteller>() - 1usize];
    ["Offset of field: MauvilleManStoryteller::id"]
        [::core::mem::offset_of!(MauvilleManStoryteller, id) - 0usize];
    ["Offset of field: MauvilleManStoryteller::alreadyRecorded"]
        [::core::mem::offset_of!(MauvilleManStoryteller, alreadyRecorded) - 1usize];
    ["Offset of field: MauvilleManStoryteller::filler2"]
        [::core::mem::offset_of!(MauvilleManStoryteller, filler2) - 2usize];
    ["Offset of field: MauvilleManStoryteller::gameStatIDs"]
        [::core::mem::offset_of!(MauvilleManStoryteller, gameStatIDs) - 4usize];
    ["Offset of field: MauvilleManStoryteller::trainerNames"]
        [::core::mem::offset_of!(MauvilleManStoryteller, trainerNames) - 8usize];
    ["Offset of field: MauvilleManStoryteller::statValues"]
        [::core::mem::offset_of!(MauvilleManStoryteller, statValues) - 36usize];
    ["Offset of field: MauvilleManStoryteller::language"]
        [::core::mem::offset_of!(MauvilleManStoryteller, language) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MauvilleManGiddy {
    pub id: u8_,
    pub taleCounter: u8_,
    pub questionNum: u8_,
    pub randomWords: [u16_; 10usize],
    pub questionList: [u8_; 8usize],
    pub language: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MauvilleManGiddy"][::core::mem::size_of::<MauvilleManGiddy>() - 34usize];
    ["Alignment of MauvilleManGiddy"][::core::mem::align_of::<MauvilleManGiddy>() - 2usize];
    ["Offset of field: MauvilleManGiddy::id"]
        [::core::mem::offset_of!(MauvilleManGiddy, id) - 0usize];
    ["Offset of field: MauvilleManGiddy::taleCounter"]
        [::core::mem::offset_of!(MauvilleManGiddy, taleCounter) - 1usize];
    ["Offset of field: MauvilleManGiddy::questionNum"]
        [::core::mem::offset_of!(MauvilleManGiddy, questionNum) - 2usize];
    ["Offset of field: MauvilleManGiddy::randomWords"]
        [::core::mem::offset_of!(MauvilleManGiddy, randomWords) - 4usize];
    ["Offset of field: MauvilleManGiddy::questionList"]
        [::core::mem::offset_of!(MauvilleManGiddy, questionList) - 24usize];
    ["Offset of field: MauvilleManGiddy::language"]
        [::core::mem::offset_of!(MauvilleManGiddy, language) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MauvilleManHipster {
    pub id: u8_,
    pub taughtWord: bool8,
    pub language: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MauvilleManHipster"][::core::mem::size_of::<MauvilleManHipster>() - 3usize];
    ["Alignment of MauvilleManHipster"][::core::mem::align_of::<MauvilleManHipster>() - 1usize];
    ["Offset of field: MauvilleManHipster::id"]
        [::core::mem::offset_of!(MauvilleManHipster, id) - 0usize];
    ["Offset of field: MauvilleManHipster::taughtWord"]
        [::core::mem::offset_of!(MauvilleManHipster, taughtWord) - 1usize];
    ["Offset of field: MauvilleManHipster::language"]
        [::core::mem::offset_of!(MauvilleManHipster, language) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MauvilleOldManTrader {
    pub id: u8_,
    pub decorations: [u8_; 4usize],
    pub playerNames: [[u8_; 11usize]; 4usize],
    pub alreadyTraded: u8_,
    pub language: [u8_; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MauvilleOldManTrader"][::core::mem::size_of::<MauvilleOldManTrader>() - 54usize];
    ["Alignment of MauvilleOldManTrader"][::core::mem::align_of::<MauvilleOldManTrader>() - 1usize];
    ["Offset of field: MauvilleOldManTrader::id"]
        [::core::mem::offset_of!(MauvilleOldManTrader, id) - 0usize];
    ["Offset of field: MauvilleOldManTrader::decorations"]
        [::core::mem::offset_of!(MauvilleOldManTrader, decorations) - 1usize];
    ["Offset of field: MauvilleOldManTrader::playerNames"]
        [::core::mem::offset_of!(MauvilleOldManTrader, playerNames) - 5usize];
    ["Offset of field: MauvilleOldManTrader::alreadyTraded"]
        [::core::mem::offset_of!(MauvilleOldManTrader, alreadyTraded) - 49usize];
    ["Offset of field: MauvilleOldManTrader::language"]
        [::core::mem::offset_of!(MauvilleOldManTrader, language) - 50usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union OldMan {
    pub common: MauvilleManCommon,
    pub bard: MauvilleManBard,
    pub giddy: MauvilleManGiddy,
    pub hipster: MauvilleManHipster,
    pub trader: MauvilleOldManTrader,
    pub storyteller: MauvilleManStoryteller,
    pub filler: [u8_; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OldMan"][::core::mem::size_of::<OldMan>() - 64usize];
    ["Alignment of OldMan"][::core::mem::align_of::<OldMan>() - 2usize];
    ["Offset of field: OldMan::common"][::core::mem::offset_of!(OldMan, common) - 0usize];
    ["Offset of field: OldMan::bard"][::core::mem::offset_of!(OldMan, bard) - 0usize];
    ["Offset of field: OldMan::giddy"][::core::mem::offset_of!(OldMan, giddy) - 0usize];
    ["Offset of field: OldMan::hipster"][::core::mem::offset_of!(OldMan, hipster) - 0usize];
    ["Offset of field: OldMan::trader"][::core::mem::offset_of!(OldMan, trader) - 0usize];
    ["Offset of field: OldMan::storyteller"][::core::mem::offset_of!(OldMan, storyteller) - 0usize];
    ["Offset of field: OldMan::filler"][::core::mem::offset_of!(OldMan, filler) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LinkBattleRecord {
    pub name: [u8_; 8usize],
    pub trainerId: u16_,
    pub wins: u16_,
    pub losses: u16_,
    pub draws: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LinkBattleRecord"][::core::mem::size_of::<LinkBattleRecord>() - 16usize];
    ["Alignment of LinkBattleRecord"][::core::mem::align_of::<LinkBattleRecord>() - 2usize];
    ["Offset of field: LinkBattleRecord::name"]
        [::core::mem::offset_of!(LinkBattleRecord, name) - 0usize];
    ["Offset of field: LinkBattleRecord::trainerId"]
        [::core::mem::offset_of!(LinkBattleRecord, trainerId) - 8usize];
    ["Offset of field: LinkBattleRecord::wins"]
        [::core::mem::offset_of!(LinkBattleRecord, wins) - 10usize];
    ["Offset of field: LinkBattleRecord::losses"]
        [::core::mem::offset_of!(LinkBattleRecord, losses) - 12usize];
    ["Offset of field: LinkBattleRecord::draws"]
        [::core::mem::offset_of!(LinkBattleRecord, draws) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LinkBattleRecords {
    pub entries: [LinkBattleRecord; 5usize],
    pub languages: [u8_; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LinkBattleRecords"][::core::mem::size_of::<LinkBattleRecords>() - 86usize];
    ["Alignment of LinkBattleRecords"][::core::mem::align_of::<LinkBattleRecords>() - 2usize];
    ["Offset of field: LinkBattleRecords::entries"]
        [::core::mem::offset_of!(LinkBattleRecords, entries) - 0usize];
    ["Offset of field: LinkBattleRecords::languages"]
        [::core::mem::offset_of!(LinkBattleRecords, languages) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RecordMixingGiftData {
    pub unk0: u8_,
    pub quantity: u8_,
    pub itemId: u16_,
    pub filler4: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RecordMixingGiftData"][::core::mem::size_of::<RecordMixingGiftData>() - 12usize];
    ["Alignment of RecordMixingGiftData"][::core::mem::align_of::<RecordMixingGiftData>() - 2usize];
    ["Offset of field: RecordMixingGiftData::unk0"]
        [::core::mem::offset_of!(RecordMixingGiftData, unk0) - 0usize];
    ["Offset of field: RecordMixingGiftData::quantity"]
        [::core::mem::offset_of!(RecordMixingGiftData, quantity) - 1usize];
    ["Offset of field: RecordMixingGiftData::itemId"]
        [::core::mem::offset_of!(RecordMixingGiftData, itemId) - 2usize];
    ["Offset of field: RecordMixingGiftData::filler4"]
        [::core::mem::offset_of!(RecordMixingGiftData, filler4) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RecordMixingGift {
    pub checksum: ::core::ffi::c_int,
    pub data: RecordMixingGiftData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RecordMixingGift"][::core::mem::size_of::<RecordMixingGift>() - 16usize];
    ["Alignment of RecordMixingGift"][::core::mem::align_of::<RecordMixingGift>() - 4usize];
    ["Offset of field: RecordMixingGift::checksum"]
        [::core::mem::offset_of!(RecordMixingGift, checksum) - 0usize];
    ["Offset of field: RecordMixingGift::data"]
        [::core::mem::offset_of!(RecordMixingGift, data) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ContestWinner {
    pub personality: u32_,
    pub trainerId: u32_,
    pub species: u16_,
    pub contestCategory: u8_,
    pub monName: [u8_; 11usize],
    pub trainerName: [u8_; 8usize],
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ContestWinner"][::core::mem::size_of::<ContestWinner>() - 32usize];
    ["Alignment of ContestWinner"][::core::mem::align_of::<ContestWinner>() - 4usize];
    ["Offset of field: ContestWinner::personality"]
        [::core::mem::offset_of!(ContestWinner, personality) - 0usize];
    ["Offset of field: ContestWinner::trainerId"]
        [::core::mem::offset_of!(ContestWinner, trainerId) - 4usize];
    ["Offset of field: ContestWinner::species"]
        [::core::mem::offset_of!(ContestWinner, species) - 8usize];
    ["Offset of field: ContestWinner::contestCategory"]
        [::core::mem::offset_of!(ContestWinner, contestCategory) - 10usize];
    ["Offset of field: ContestWinner::monName"]
        [::core::mem::offset_of!(ContestWinner, monName) - 11usize];
    ["Offset of field: ContestWinner::trainerName"]
        [::core::mem::offset_of!(ContestWinner, trainerName) - 22usize];
};
impl ContestWinner {
    #[inline]
    pub fn contestRank(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_contestRank(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn contestRank_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                7u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_contestRank_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn isShiny(&self) -> bool8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_isShiny(&mut self, val: bool8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isShiny_raw(this: *const Self) -> bool8 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_isShiny_raw(this: *mut Self, val: bool8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(contestRank: u8_, isShiny: bool8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let contestRank: u8 = unsafe { ::core::mem::transmute(contestRank) };
            contestRank as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let isShiny: u8 = unsafe { ::core::mem::transmute(isShiny) };
            isShiny as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Mail {
    pub words: [u16_; 9usize],
    pub playerName: [u8_; 8usize],
    pub trainerId: [u8_; 4usize],
    pub species: u16_,
    pub itemId: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Mail"][::core::mem::size_of::<Mail>() - 34usize];
    ["Alignment of Mail"][::core::mem::align_of::<Mail>() - 2usize];
    ["Offset of field: Mail::words"][::core::mem::offset_of!(Mail, words) - 0usize];
    ["Offset of field: Mail::playerName"][::core::mem::offset_of!(Mail, playerName) - 18usize];
    ["Offset of field: Mail::trainerId"][::core::mem::offset_of!(Mail, trainerId) - 26usize];
    ["Offset of field: Mail::species"][::core::mem::offset_of!(Mail, species) - 30usize];
    ["Offset of field: Mail::itemId"][::core::mem::offset_of!(Mail, itemId) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DaycareMail {
    pub message: Mail,
    pub otName: [u8_; 8usize],
    pub monName: [u8_; 11usize],
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DaycareMail"][::core::mem::size_of::<DaycareMail>() - 54usize];
    ["Alignment of DaycareMail"][::core::mem::align_of::<DaycareMail>() - 2usize];
    ["Offset of field: DaycareMail::message"]
        [::core::mem::offset_of!(DaycareMail, message) - 0usize];
    ["Offset of field: DaycareMail::otName"]
        [::core::mem::offset_of!(DaycareMail, otName) - 34usize];
    ["Offset of field: DaycareMail::monName"]
        [::core::mem::offset_of!(DaycareMail, monName) - 42usize];
};
impl DaycareMail {
    #[inline]
    pub fn gameLanguage(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_gameLanguage(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn gameLanguage_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_gameLanguage_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn monLanguage(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_monLanguage(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn monLanguage_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_monLanguage_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        gameLanguage: u8_,
        monLanguage: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let gameLanguage: u8 = unsafe { ::core::mem::transmute(gameLanguage) };
            gameLanguage as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let monLanguage: u8 = unsafe { ::core::mem::transmute(monLanguage) };
            monLanguage as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DaycareMon {
    pub mon: BoxPokemon,
    pub mail: DaycareMail,
    pub steps: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DaycareMon"][::core::mem::size_of::<DaycareMon>() - 140usize];
    ["Alignment of DaycareMon"][::core::mem::align_of::<DaycareMon>() - 4usize];
    ["Offset of field: DaycareMon::mon"][::core::mem::offset_of!(DaycareMon, mon) - 0usize];
    ["Offset of field: DaycareMon::mail"][::core::mem::offset_of!(DaycareMon, mail) - 80usize];
    ["Offset of field: DaycareMon::steps"][::core::mem::offset_of!(DaycareMon, steps) - 136usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DayCare {
    pub mons: [DaycareMon; 2usize],
    pub offspringPersonality: u32_,
    pub stepCounter: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DayCare"][::core::mem::size_of::<DayCare>() - 288usize];
    ["Alignment of DayCare"][::core::mem::align_of::<DayCare>() - 4usize];
    ["Offset of field: DayCare::mons"][::core::mem::offset_of!(DayCare, mons) - 0usize];
    ["Offset of field: DayCare::offspringPersonality"]
        [::core::mem::offset_of!(DayCare, offspringPersonality) - 280usize];
    ["Offset of field: DayCare::stepCounter"]
        [::core::mem::offset_of!(DayCare, stepCounter) - 284usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LilycoveLadyQuiz {
    pub id: u8_,
    pub state: u8_,
    pub question: [u16_; 9usize],
    pub correctAnswer: u16_,
    pub playerAnswer: u16_,
    pub playerName: [u8_; 8usize],
    pub playerTrainerId: [u16_; 4usize],
    pub prize: u16_,
    pub waitingForChallenger: bool8,
    pub questionId: u8_,
    pub prevQuestionId: u8_,
    pub language: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LilycoveLadyQuiz"][::core::mem::size_of::<LilycoveLadyQuiz>() - 46usize];
    ["Alignment of LilycoveLadyQuiz"][::core::mem::align_of::<LilycoveLadyQuiz>() - 2usize];
    ["Offset of field: LilycoveLadyQuiz::id"]
        [::core::mem::offset_of!(LilycoveLadyQuiz, id) - 0usize];
    ["Offset of field: LilycoveLadyQuiz::state"]
        [::core::mem::offset_of!(LilycoveLadyQuiz, state) - 1usize];
    ["Offset of field: LilycoveLadyQuiz::question"]
        [::core::mem::offset_of!(LilycoveLadyQuiz, question) - 2usize];
    ["Offset of field: LilycoveLadyQuiz::correctAnswer"]
        [::core::mem::offset_of!(LilycoveLadyQuiz, correctAnswer) - 20usize];
    ["Offset of field: LilycoveLadyQuiz::playerAnswer"]
        [::core::mem::offset_of!(LilycoveLadyQuiz, playerAnswer) - 22usize];
    ["Offset of field: LilycoveLadyQuiz::playerName"]
        [::core::mem::offset_of!(LilycoveLadyQuiz, playerName) - 24usize];
    ["Offset of field: LilycoveLadyQuiz::playerTrainerId"]
        [::core::mem::offset_of!(LilycoveLadyQuiz, playerTrainerId) - 32usize];
    ["Offset of field: LilycoveLadyQuiz::prize"]
        [::core::mem::offset_of!(LilycoveLadyQuiz, prize) - 40usize];
    ["Offset of field: LilycoveLadyQuiz::waitingForChallenger"]
        [::core::mem::offset_of!(LilycoveLadyQuiz, waitingForChallenger) - 42usize];
    ["Offset of field: LilycoveLadyQuiz::questionId"]
        [::core::mem::offset_of!(LilycoveLadyQuiz, questionId) - 43usize];
    ["Offset of field: LilycoveLadyQuiz::prevQuestionId"]
        [::core::mem::offset_of!(LilycoveLadyQuiz, prevQuestionId) - 44usize];
    ["Offset of field: LilycoveLadyQuiz::language"]
        [::core::mem::offset_of!(LilycoveLadyQuiz, language) - 45usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LilycoveLadyFavor {
    pub id: u8_,
    pub state: u8_,
    pub likedItem: bool8,
    pub numItemsGiven: u8_,
    pub playerName: [u8_; 8usize],
    pub favorId: u8_,
    pub itemId: u16_,
    pub bestItem: u16_,
    pub language: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LilycoveLadyFavor"][::core::mem::size_of::<LilycoveLadyFavor>() - 20usize];
    ["Alignment of LilycoveLadyFavor"][::core::mem::align_of::<LilycoveLadyFavor>() - 2usize];
    ["Offset of field: LilycoveLadyFavor::id"]
        [::core::mem::offset_of!(LilycoveLadyFavor, id) - 0usize];
    ["Offset of field: LilycoveLadyFavor::state"]
        [::core::mem::offset_of!(LilycoveLadyFavor, state) - 1usize];
    ["Offset of field: LilycoveLadyFavor::likedItem"]
        [::core::mem::offset_of!(LilycoveLadyFavor, likedItem) - 2usize];
    ["Offset of field: LilycoveLadyFavor::numItemsGiven"]
        [::core::mem::offset_of!(LilycoveLadyFavor, numItemsGiven) - 3usize];
    ["Offset of field: LilycoveLadyFavor::playerName"]
        [::core::mem::offset_of!(LilycoveLadyFavor, playerName) - 4usize];
    ["Offset of field: LilycoveLadyFavor::favorId"]
        [::core::mem::offset_of!(LilycoveLadyFavor, favorId) - 12usize];
    ["Offset of field: LilycoveLadyFavor::itemId"]
        [::core::mem::offset_of!(LilycoveLadyFavor, itemId) - 14usize];
    ["Offset of field: LilycoveLadyFavor::bestItem"]
        [::core::mem::offset_of!(LilycoveLadyFavor, bestItem) - 16usize];
    ["Offset of field: LilycoveLadyFavor::language"]
        [::core::mem::offset_of!(LilycoveLadyFavor, language) - 18usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LilycoveLadyContest {
    pub id: u8_,
    pub givenPokeblock: bool8,
    pub numGoodPokeblocksGiven: u8_,
    pub numOtherPokeblocksGiven: u8_,
    pub playerName: [u8_; 8usize],
    pub maxSheen: u8_,
    pub category: u8_,
    pub language: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LilycoveLadyContest"][::core::mem::size_of::<LilycoveLadyContest>() - 15usize];
    ["Alignment of LilycoveLadyContest"][::core::mem::align_of::<LilycoveLadyContest>() - 1usize];
    ["Offset of field: LilycoveLadyContest::id"]
        [::core::mem::offset_of!(LilycoveLadyContest, id) - 0usize];
    ["Offset of field: LilycoveLadyContest::givenPokeblock"]
        [::core::mem::offset_of!(LilycoveLadyContest, givenPokeblock) - 1usize];
    ["Offset of field: LilycoveLadyContest::numGoodPokeblocksGiven"]
        [::core::mem::offset_of!(LilycoveLadyContest, numGoodPokeblocksGiven) - 2usize];
    ["Offset of field: LilycoveLadyContest::numOtherPokeblocksGiven"]
        [::core::mem::offset_of!(LilycoveLadyContest, numOtherPokeblocksGiven) - 3usize];
    ["Offset of field: LilycoveLadyContest::playerName"]
        [::core::mem::offset_of!(LilycoveLadyContest, playerName) - 4usize];
    ["Offset of field: LilycoveLadyContest::maxSheen"]
        [::core::mem::offset_of!(LilycoveLadyContest, maxSheen) - 12usize];
    ["Offset of field: LilycoveLadyContest::category"]
        [::core::mem::offset_of!(LilycoveLadyContest, category) - 13usize];
    ["Offset of field: LilycoveLadyContest::language"]
        [::core::mem::offset_of!(LilycoveLadyContest, language) - 14usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union LilycoveLady {
    pub quiz: LilycoveLadyQuiz,
    pub favor: LilycoveLadyFavor,
    pub contest: LilycoveLadyContest,
    pub id: u8_,
    pub filler: [u8_; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LilycoveLady"][::core::mem::size_of::<LilycoveLady>() - 64usize];
    ["Alignment of LilycoveLady"][::core::mem::align_of::<LilycoveLady>() - 2usize];
    ["Offset of field: LilycoveLady::quiz"][::core::mem::offset_of!(LilycoveLady, quiz) - 0usize];
    ["Offset of field: LilycoveLady::favor"][::core::mem::offset_of!(LilycoveLady, favor) - 0usize];
    ["Offset of field: LilycoveLady::contest"]
        [::core::mem::offset_of!(LilycoveLady, contest) - 0usize];
    ["Offset of field: LilycoveLady::id"][::core::mem::offset_of!(LilycoveLady, id) - 0usize];
    ["Offset of field: LilycoveLady::filler"]
        [::core::mem::offset_of!(LilycoveLady, filler) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WaldaPhrase {
    pub colors: [u16_; 2usize],
    pub text: [u8_; 16usize],
    pub iconId: u8_,
    pub patternId: u8_,
    pub patternUnlocked: bool8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WaldaPhrase"][::core::mem::size_of::<WaldaPhrase>() - 24usize];
    ["Alignment of WaldaPhrase"][::core::mem::align_of::<WaldaPhrase>() - 2usize];
    ["Offset of field: WaldaPhrase::colors"][::core::mem::offset_of!(WaldaPhrase, colors) - 0usize];
    ["Offset of field: WaldaPhrase::text"][::core::mem::offset_of!(WaldaPhrase, text) - 4usize];
    ["Offset of field: WaldaPhrase::iconId"]
        [::core::mem::offset_of!(WaldaPhrase, iconId) - 20usize];
    ["Offset of field: WaldaPhrase::patternId"]
        [::core::mem::offset_of!(WaldaPhrase, patternId) - 21usize];
    ["Offset of field: WaldaPhrase::patternUnlocked"]
        [::core::mem::offset_of!(WaldaPhrase, patternUnlocked) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TrainerNameRecord {
    pub trainerId: u32_,
    pub trainerName: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TrainerNameRecord"][::core::mem::size_of::<TrainerNameRecord>() - 12usize];
    ["Alignment of TrainerNameRecord"][::core::mem::align_of::<TrainerNameRecord>() - 4usize];
    ["Offset of field: TrainerNameRecord::trainerId"]
        [::core::mem::offset_of!(TrainerNameRecord, trainerId) - 0usize];
    ["Offset of field: TrainerNameRecord::trainerName"]
        [::core::mem::offset_of!(TrainerNameRecord, trainerName) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TrainerHillSave {
    pub timer: u32_,
    pub bestTime: u32_,
    pub unk_3D6C: u8_,
    pub unused: u8_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TrainerHillSave"][::core::mem::size_of::<TrainerHillSave>() - 12usize];
    ["Alignment of TrainerHillSave"][::core::mem::align_of::<TrainerHillSave>() - 4usize];
    ["Offset of field: TrainerHillSave::timer"]
        [::core::mem::offset_of!(TrainerHillSave, timer) - 0usize];
    ["Offset of field: TrainerHillSave::bestTime"]
        [::core::mem::offset_of!(TrainerHillSave, bestTime) - 4usize];
    ["Offset of field: TrainerHillSave::unk_3D6C"]
        [::core::mem::offset_of!(TrainerHillSave, unk_3D6C) - 8usize];
    ["Offset of field: TrainerHillSave::unused"]
        [::core::mem::offset_of!(TrainerHillSave, unused) - 9usize];
};
impl TrainerHillSave {
    #[inline]
    pub fn receivedPrize(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_receivedPrize(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn receivedPrize_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_receivedPrize_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn checkedFinalTime(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_checkedFinalTime(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn checkedFinalTime_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_checkedFinalTime_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn spokeToOwner(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_spokeToOwner(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn spokeToOwner_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_spokeToOwner_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn hasLost(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_hasLost(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn hasLost_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_hasLost_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn maybeECardScanDuringChallenge(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_maybeECardScanDuringChallenge(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn maybeECardScanDuringChallenge_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_maybeECardScanDuringChallenge_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn field_3D6E_0f(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_field_3D6E_0f(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn field_3D6E_0f_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_field_3D6E_0f_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mode(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_mode(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mode_raw(this: *const Self) -> u16_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_mode_raw(this: *mut Self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        receivedPrize: u16_,
        checkedFinalTime: u16_,
        spokeToOwner: u16_,
        hasLost: u16_,
        maybeECardScanDuringChallenge: u16_,
        field_3D6E_0f: u16_,
        mode: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let receivedPrize: u16 = unsafe { ::core::mem::transmute(receivedPrize) };
            receivedPrize as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let checkedFinalTime: u16 = unsafe { ::core::mem::transmute(checkedFinalTime) };
            checkedFinalTime as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let spokeToOwner: u16 = unsafe { ::core::mem::transmute(spokeToOwner) };
            spokeToOwner as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let hasLost: u16 = unsafe { ::core::mem::transmute(hasLost) };
            hasLost as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let maybeECardScanDuringChallenge: u16 =
                unsafe { ::core::mem::transmute(maybeECardScanDuringChallenge) };
            maybeECardScanDuringChallenge as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let field_3D6E_0f: u16 = unsafe { ::core::mem::transmute(field_3D6E_0f) };
            field_3D6E_0f as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let mode: u16 = unsafe { ::core::mem::transmute(mode) };
            mode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WonderNewsMetadata {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub berry: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WonderNewsMetadata"][::core::mem::size_of::<WonderNewsMetadata>() - 2usize];
    ["Alignment of WonderNewsMetadata"][::core::mem::align_of::<WonderNewsMetadata>() - 1usize];
    ["Offset of field: WonderNewsMetadata::berry"]
        [::core::mem::offset_of!(WonderNewsMetadata, berry) - 1usize];
};
impl WonderNewsMetadata {
    #[inline]
    pub fn newsType(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_newsType(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn newsType_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_newsType_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sentRewardCounter(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_sentRewardCounter(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sentRewardCounter_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_sentRewardCounter_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn rewardCounter(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_rewardCounter(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn rewardCounter_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_rewardCounter_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        newsType: u8_,
        sentRewardCounter: u8_,
        rewardCounter: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let newsType: u8 = unsafe { ::core::mem::transmute(newsType) };
            newsType as u64
        });
        __bindgen_bitfield_unit.set(2usize, 3u8, {
            let sentRewardCounter: u8 = unsafe { ::core::mem::transmute(sentRewardCounter) };
            sentRewardCounter as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let rewardCounter: u8 = unsafe { ::core::mem::transmute(rewardCounter) };
            rewardCounter as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WonderNews {
    pub id: u16_,
    pub sendType: u8_,
    pub bgType: u8_,
    pub titleText: [u8_; 40usize],
    pub bodyText: [[u8_; 40usize]; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WonderNews"][::core::mem::size_of::<WonderNews>() - 444usize];
    ["Alignment of WonderNews"][::core::mem::align_of::<WonderNews>() - 2usize];
    ["Offset of field: WonderNews::id"][::core::mem::offset_of!(WonderNews, id) - 0usize];
    ["Offset of field: WonderNews::sendType"]
        [::core::mem::offset_of!(WonderNews, sendType) - 2usize];
    ["Offset of field: WonderNews::bgType"][::core::mem::offset_of!(WonderNews, bgType) - 3usize];
    ["Offset of field: WonderNews::titleText"]
        [::core::mem::offset_of!(WonderNews, titleText) - 4usize];
    ["Offset of field: WonderNews::bodyText"]
        [::core::mem::offset_of!(WonderNews, bodyText) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WonderCard {
    pub flagId: u16_,
    pub iconSpecies: u16_,
    pub idNumber: u32_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub maxStamps: u8_,
    pub titleText: [u8_; 40usize],
    pub subtitleText: [u8_; 40usize],
    pub bodyText: [[u8_; 40usize]; 4usize],
    pub footerLine1Text: [u8_; 40usize],
    pub footerLine2Text: [u8_; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WonderCard"][::core::mem::size_of::<WonderCard>() - 332usize];
    ["Alignment of WonderCard"][::core::mem::align_of::<WonderCard>() - 4usize];
    ["Offset of field: WonderCard::flagId"][::core::mem::offset_of!(WonderCard, flagId) - 0usize];
    ["Offset of field: WonderCard::iconSpecies"]
        [::core::mem::offset_of!(WonderCard, iconSpecies) - 2usize];
    ["Offset of field: WonderCard::idNumber"]
        [::core::mem::offset_of!(WonderCard, idNumber) - 4usize];
    ["Offset of field: WonderCard::maxStamps"]
        [::core::mem::offset_of!(WonderCard, maxStamps) - 9usize];
    ["Offset of field: WonderCard::titleText"]
        [::core::mem::offset_of!(WonderCard, titleText) - 10usize];
    ["Offset of field: WonderCard::subtitleText"]
        [::core::mem::offset_of!(WonderCard, subtitleText) - 50usize];
    ["Offset of field: WonderCard::bodyText"]
        [::core::mem::offset_of!(WonderCard, bodyText) - 90usize];
    ["Offset of field: WonderCard::footerLine1Text"]
        [::core::mem::offset_of!(WonderCard, footerLine1Text) - 250usize];
    ["Offset of field: WonderCard::footerLine2Text"]
        [::core::mem::offset_of!(WonderCard, footerLine2Text) - 290usize];
};
impl WonderCard {
    #[inline]
    pub fn type_(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bgType(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_bgType(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bgType_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_bgType_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sendType(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_sendType(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sendType_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_sendType_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: u8_,
        bgType: u8_,
        sendType: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let type_: u8 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(2usize, 4u8, {
            let bgType: u8 = unsafe { ::core::mem::transmute(bgType) };
            bgType as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let sendType: u8 = unsafe { ::core::mem::transmute(sendType) };
            sendType as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WonderCardMetadata {
    pub battlesWon: u16_,
    pub battlesLost: u16_,
    pub numTrades: u16_,
    pub iconSpecies: u16_,
    pub stampData: [[u16_; 7usize]; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WonderCardMetadata"][::core::mem::size_of::<WonderCardMetadata>() - 36usize];
    ["Alignment of WonderCardMetadata"][::core::mem::align_of::<WonderCardMetadata>() - 2usize];
    ["Offset of field: WonderCardMetadata::battlesWon"]
        [::core::mem::offset_of!(WonderCardMetadata, battlesWon) - 0usize];
    ["Offset of field: WonderCardMetadata::battlesLost"]
        [::core::mem::offset_of!(WonderCardMetadata, battlesLost) - 2usize];
    ["Offset of field: WonderCardMetadata::numTrades"]
        [::core::mem::offset_of!(WonderCardMetadata, numTrades) - 4usize];
    ["Offset of field: WonderCardMetadata::iconSpecies"]
        [::core::mem::offset_of!(WonderCardMetadata, iconSpecies) - 6usize];
    ["Offset of field: WonderCardMetadata::stampData"]
        [::core::mem::offset_of!(WonderCardMetadata, stampData) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MysteryGiftSave {
    pub newsCrc: u32_,
    pub news: WonderNews,
    pub cardCrc: u32_,
    pub card: WonderCard,
    pub cardMetadataCrc: u32_,
    pub cardMetadata: WonderCardMetadata,
    pub questionnaireWords: [u16_; 4usize],
    pub newsMetadata: WonderNewsMetadata,
    pub trainerIds: [[u32_; 5usize]; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MysteryGiftSave"][::core::mem::size_of::<MysteryGiftSave>() - 876usize];
    ["Alignment of MysteryGiftSave"][::core::mem::align_of::<MysteryGiftSave>() - 4usize];
    ["Offset of field: MysteryGiftSave::newsCrc"]
        [::core::mem::offset_of!(MysteryGiftSave, newsCrc) - 0usize];
    ["Offset of field: MysteryGiftSave::news"]
        [::core::mem::offset_of!(MysteryGiftSave, news) - 4usize];
    ["Offset of field: MysteryGiftSave::cardCrc"]
        [::core::mem::offset_of!(MysteryGiftSave, cardCrc) - 448usize];
    ["Offset of field: MysteryGiftSave::card"]
        [::core::mem::offset_of!(MysteryGiftSave, card) - 452usize];
    ["Offset of field: MysteryGiftSave::cardMetadataCrc"]
        [::core::mem::offset_of!(MysteryGiftSave, cardMetadataCrc) - 784usize];
    ["Offset of field: MysteryGiftSave::cardMetadata"]
        [::core::mem::offset_of!(MysteryGiftSave, cardMetadata) - 788usize];
    ["Offset of field: MysteryGiftSave::questionnaireWords"]
        [::core::mem::offset_of!(MysteryGiftSave, questionnaireWords) - 824usize];
    ["Offset of field: MysteryGiftSave::newsMetadata"]
        [::core::mem::offset_of!(MysteryGiftSave, newsMetadata) - 832usize];
    ["Offset of field: MysteryGiftSave::trainerIds"]
        [::core::mem::offset_of!(MysteryGiftSave, trainerIds) - 836usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ExternalEventData {
    pub unknownExternalDataFields1: [u8_; 7usize],
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub unknownExternalDataFields4: [u8_; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ExternalEventData"][::core::mem::size_of::<ExternalEventData>() - 20usize];
    ["Alignment of ExternalEventData"][::core::mem::align_of::<ExternalEventData>() - 1usize];
    ["Offset of field: ExternalEventData::unknownExternalDataFields1"]
        [::core::mem::offset_of!(ExternalEventData, unknownExternalDataFields1) - 0usize];
    ["Offset of field: ExternalEventData::unknownExternalDataFields4"]
        [::core::mem::offset_of!(ExternalEventData, unknownExternalDataFields4) - 15usize];
};
impl ExternalEventData {
    #[inline]
    pub fn unknownExternalDataFields2(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_unknownExternalDataFields2(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn unknownExternalDataFields2_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_unknownExternalDataFields2_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn currentPokeCoupons(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_currentPokeCoupons(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn currentPokeCoupons_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_currentPokeCoupons_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn gotGoldPokeCouponTitleReward(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_gotGoldPokeCouponTitleReward(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn gotGoldPokeCouponTitleReward_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_gotGoldPokeCouponTitleReward_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn gotSilverPokeCouponTitleReward(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_gotSilverPokeCouponTitleReward(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn gotSilverPokeCouponTitleReward_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                33usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_gotSilverPokeCouponTitleReward_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                33usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn gotBronzePokeCouponTitleReward(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_gotBronzePokeCouponTitleReward(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn gotBronzePokeCouponTitleReward_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                34usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_gotBronzePokeCouponTitleReward_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                34usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn receivedAgetoCelebi(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(35usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_receivedAgetoCelebi(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(35usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn receivedAgetoCelebi_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                35usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_receivedAgetoCelebi_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                35usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn unknownExternalDataFields3(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(36usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_unknownExternalDataFields3(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(36usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn unknownExternalDataFields3_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                36usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_unknownExternalDataFields3_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                36usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn totalEarnedPokeCoupons(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(40usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_totalEarnedPokeCoupons(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(40usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn totalEarnedPokeCoupons_raw(this: *const Self) -> u32_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                40usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_totalEarnedPokeCoupons_raw(this: *mut Self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                40usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        unknownExternalDataFields2: u32_,
        currentPokeCoupons: u32_,
        gotGoldPokeCouponTitleReward: u32_,
        gotSilverPokeCouponTitleReward: u32_,
        gotBronzePokeCouponTitleReward: u32_,
        receivedAgetoCelebi: u32_,
        unknownExternalDataFields3: u32_,
        totalEarnedPokeCoupons: u32_,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let unknownExternalDataFields2: u32 =
                unsafe { ::core::mem::transmute(unknownExternalDataFields2) };
            unknownExternalDataFields2 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 24u8, {
            let currentPokeCoupons: u32 = unsafe { ::core::mem::transmute(currentPokeCoupons) };
            currentPokeCoupons as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let gotGoldPokeCouponTitleReward: u32 =
                unsafe { ::core::mem::transmute(gotGoldPokeCouponTitleReward) };
            gotGoldPokeCouponTitleReward as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let gotSilverPokeCouponTitleReward: u32 =
                unsafe { ::core::mem::transmute(gotSilverPokeCouponTitleReward) };
            gotSilverPokeCouponTitleReward as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let gotBronzePokeCouponTitleReward: u32 =
                unsafe { ::core::mem::transmute(gotBronzePokeCouponTitleReward) };
            gotBronzePokeCouponTitleReward as u64
        });
        __bindgen_bitfield_unit.set(35usize, 1u8, {
            let receivedAgetoCelebi: u32 = unsafe { ::core::mem::transmute(receivedAgetoCelebi) };
            receivedAgetoCelebi as u64
        });
        __bindgen_bitfield_unit.set(36usize, 4u8, {
            let unknownExternalDataFields3: u32 =
                unsafe { ::core::mem::transmute(unknownExternalDataFields3) };
            unknownExternalDataFields3 as u64
        });
        __bindgen_bitfield_unit.set(40usize, 24u8, {
            let totalEarnedPokeCoupons: u32 =
                unsafe { ::core::mem::transmute(totalEarnedPokeCoupons) };
            totalEarnedPokeCoupons as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ExternalEventFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub unknownFlag1: u8_,
    pub receivedGCNJirachi: u8_,
    pub unknownFlag3: u8_,
    pub unknownFlag4: u8_,
    pub unknownFlag5: u8_,
    pub unknownFlag6: u8_,
    pub unknownFlag7: u8_,
    pub unknownFlag8: u8_,
    pub unknownFlag9: u8_,
    pub unknownFlag10: u8_,
    pub unknownFlag11: u8_,
    pub unknownFlag12: u8_,
    pub unknownFlag13: u8_,
    pub unknownFlag14: u8_,
    pub unknownFlag15: u8_,
    pub unknownFlag16: u8_,
    pub unknownFlag17: u8_,
    pub unknownFlag18: u8_,
    pub unknownFlag19: u8_,
    pub unknownFlag20: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ExternalEventFlags"][::core::mem::size_of::<ExternalEventFlags>() - 21usize];
    ["Alignment of ExternalEventFlags"][::core::mem::align_of::<ExternalEventFlags>() - 1usize];
    ["Offset of field: ExternalEventFlags::unknownFlag1"]
        [::core::mem::offset_of!(ExternalEventFlags, unknownFlag1) - 1usize];
    ["Offset of field: ExternalEventFlags::receivedGCNJirachi"]
        [::core::mem::offset_of!(ExternalEventFlags, receivedGCNJirachi) - 2usize];
    ["Offset of field: ExternalEventFlags::unknownFlag3"]
        [::core::mem::offset_of!(ExternalEventFlags, unknownFlag3) - 3usize];
    ["Offset of field: ExternalEventFlags::unknownFlag4"]
        [::core::mem::offset_of!(ExternalEventFlags, unknownFlag4) - 4usize];
    ["Offset of field: ExternalEventFlags::unknownFlag5"]
        [::core::mem::offset_of!(ExternalEventFlags, unknownFlag5) - 5usize];
    ["Offset of field: ExternalEventFlags::unknownFlag6"]
        [::core::mem::offset_of!(ExternalEventFlags, unknownFlag6) - 6usize];
    ["Offset of field: ExternalEventFlags::unknownFlag7"]
        [::core::mem::offset_of!(ExternalEventFlags, unknownFlag7) - 7usize];
    ["Offset of field: ExternalEventFlags::unknownFlag8"]
        [::core::mem::offset_of!(ExternalEventFlags, unknownFlag8) - 8usize];
    ["Offset of field: ExternalEventFlags::unknownFlag9"]
        [::core::mem::offset_of!(ExternalEventFlags, unknownFlag9) - 9usize];
    ["Offset of field: ExternalEventFlags::unknownFlag10"]
        [::core::mem::offset_of!(ExternalEventFlags, unknownFlag10) - 10usize];
    ["Offset of field: ExternalEventFlags::unknownFlag11"]
        [::core::mem::offset_of!(ExternalEventFlags, unknownFlag11) - 11usize];
    ["Offset of field: ExternalEventFlags::unknownFlag12"]
        [::core::mem::offset_of!(ExternalEventFlags, unknownFlag12) - 12usize];
    ["Offset of field: ExternalEventFlags::unknownFlag13"]
        [::core::mem::offset_of!(ExternalEventFlags, unknownFlag13) - 13usize];
    ["Offset of field: ExternalEventFlags::unknownFlag14"]
        [::core::mem::offset_of!(ExternalEventFlags, unknownFlag14) - 14usize];
    ["Offset of field: ExternalEventFlags::unknownFlag15"]
        [::core::mem::offset_of!(ExternalEventFlags, unknownFlag15) - 15usize];
    ["Offset of field: ExternalEventFlags::unknownFlag16"]
        [::core::mem::offset_of!(ExternalEventFlags, unknownFlag16) - 16usize];
    ["Offset of field: ExternalEventFlags::unknownFlag17"]
        [::core::mem::offset_of!(ExternalEventFlags, unknownFlag17) - 17usize];
    ["Offset of field: ExternalEventFlags::unknownFlag18"]
        [::core::mem::offset_of!(ExternalEventFlags, unknownFlag18) - 18usize];
    ["Offset of field: ExternalEventFlags::unknownFlag19"]
        [::core::mem::offset_of!(ExternalEventFlags, unknownFlag19) - 19usize];
    ["Offset of field: ExternalEventFlags::unknownFlag20"]
        [::core::mem::offset_of!(ExternalEventFlags, unknownFlag20) - 20usize];
};
impl ExternalEventFlags {
    #[inline]
    pub fn usedBoxRS(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_usedBoxRS(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn usedBoxRS_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_usedBoxRS_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn boxRSEggsUnlocked(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_boxRSEggsUnlocked(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn boxRSEggsUnlocked_raw(this: *const Self) -> u8_ {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_boxRSEggsUnlocked_raw(this: *mut Self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        usedBoxRS: u8_,
        boxRSEggsUnlocked: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let usedBoxRS: u8 = unsafe { ::core::mem::transmute(usedBoxRS) };
            usedBoxRS as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let boxRSEggsUnlocked: u8 = unsafe { ::core::mem::transmute(boxRSEggsUnlocked) };
            boxRSEggsUnlocked as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
pub struct SaveBlock1 {
    pub _bindgen_opaque_blob: [u32; 3874usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SaveBlock1"][::core::mem::size_of::<SaveBlock1>() - 15496usize];
    ["Alignment of SaveBlock1"][::core::mem::align_of::<SaveBlock1>() - 4usize];
};
unsafe extern "C" {
    pub static mut gSaveBlock1Ptr: *mut SaveBlock1;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MapPosition {
    pub x: s16,
    pub y: s16,
    pub elevation: s8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MapPosition"][::core::mem::size_of::<MapPosition>() - 6usize];
    ["Alignment of MapPosition"][::core::mem::align_of::<MapPosition>() - 2usize];
    ["Offset of field: MapPosition::x"][::core::mem::offset_of!(MapPosition, x) - 0usize];
    ["Offset of field: MapPosition::y"][::core::mem::offset_of!(MapPosition, y) - 2usize];
    ["Offset of field: MapPosition::elevation"]
        [::core::mem::offset_of!(MapPosition, elevation) - 4usize];
};
